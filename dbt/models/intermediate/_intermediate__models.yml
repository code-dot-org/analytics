version: 2

models: 
  - name: int_ap_agg_exam_results_union_agg_school_level
    description: |
      This intermediate model unions together:
      
      1. All of the aggregated AP exam results from `stg_ap_agg_exam_results`.
      2. Computes the 'cdo_audit' aggregate group from Code.org school-level exam results from `stg_school_level_exam_results`.

      For column descriptions please see upstream: `stg_ap_agg_exam_results` - the column descriptions are the same and the aggregation of school-level results is made to fit those descriptions.

    columns:
      - name: source
        description: used in downstream models to identify the source of the data.  Since these data are just straight from the college board the source is `college board`. Downstream groups derived from this will be source = 'calculated'
      - name: exam_year
      - name: pd_year
      - name: reporting_group
      - name: rp_id
      - name: exam
      - name: demographic_category
      - name: demographic_group
      - name: score_category
      - name: score_of
      - name: num_students

  - name: int_ap_agg_exam_results_calculate_race_no_response 
    description: >
      This model computes the number of students in each dataset who are not associated with a race demographic_group
      i.e., the "race_no_response" group. The model ensures every year|reporting|group|exam has a value for 
      demographic_group='race_no_response' under demographic_category='race' such that the sum of all values under 
      demographic_category='race' is equal to the total.
    columns:
      - name: source
        description: "Indicates whether the data source is 'college board' or 'calculated'."
      - name: exam_year
        description: "The year the exam was taken."
        tests:
          - not_null
      - name: pd_year
        description: "The program year of the exam data."
      - name: reporting_group
        description: "The group for which the report is generated."
        tests:
          - not_null
      - name: rp_id
        description: "Unique identifier for the reporting program."
      - name: exam
        description: "The name of the exam."
        tests:
          - not_null
      - name: demographic_category
        description: "Category of the demographic data, such as 'race' or 'total'."
      - name: demographic_group
        description: "Specific group within the demographic category, e.g., 'race_no_response'."
      - name: score_category
        description: "'total' or 'detail' - if 'detail' then there will be a score_of 1,2,3,4 or 5"
      - name: score_of
        description: "The specific score achieved 1,2,3,4 or 5"
      - name: num_students
        description: "Number of students in the demographic group for the specific score category."
        tests:
          - not_null

  - name: int_ap_agg_exam_results_calculate_agg_race_groups
    description: |
      This intermediate model builds aggregated race/ethnic groupings (bhnapi and wh_as_other). These are needed both for reporting as well as for the URG calculation.

      For column descriptions please see upstream: `stg_ap_agg_exam_results` - the column descriptions are the same and the aggregation of school-level results is made to fit those descriptions.
      
    columns:
      - name: source
        description: One of `college board` or `calculated`.  Used in downstream models to identify the source of the demographic category and group.  This model adds some `calculated` to the existing `college board` group.
      - name: exam_year
      - name: pd_year
      - name: reporting_group
      - name: rp_id
      - name: exam
      - name: demographic_category
      - name: demographic_group
      - name: score_category
      - name: score_of
      - name: num_students

  - name: int_daily_summary_user_level_activity
    description: "This model summarizes user-level activity per user per day.  Specifically, this summarizes the number of first-time interactions a user had with levels on a given day. It does not count re-visits to levels."
    columns:
      - name: user_id
        description: "The Code.org user id for this user."
        tests:
          - not_null
      - name: activity_date
        description: "The date (day) of the user's activity. Extracted and cast from the user_level record `created_at` timestamp. Multiple records per day are aggregated and summarized for each day."
        tests:
          - not_null
      - name: course_list
        description: "A concatenated list of unique course names that the user has interacted with on a particular day, ordered alphabetically."
      - name: num_user_level_records
        description: "The count of user-level records created in the database for the user on the specified activity date. This indicates the number of levels a user interacted with for the first time on this day."
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - user_id
            - activity_date


  - name: int_daily_summary_sign_ins
    description: "This model summarizes the number of sign-ins per user per day. It tracks the number of times a user logs in per day."
    columns:
      - name: user_id
        description: "The Code.org user id for this user."
        tests:
          - not_null
      - name: activity_date
        description: "The date (day) of the user's sign-in. Extracted and cast from the `sign_in_at` timestamp. The model aggregates multiple sign-ins per day to summarize the first sign-in of the day."
        tests:
          - not_null
      - name: num_records
        description: "The count of sign-in records for the user on the specified activity date. Represents the number of times the user generated a new session / sign-in record on this day."
    
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - user_id
            - activity_date

  - name: int_daily_summary_project_activity
    description: |
      This model aggregates and summarizes the number and types of **new projects** each user created per day. 
      It lists unique project types engaged per day and counts the total project records created on that day.

      _(A future modification of this model could include updates to projects, rather that just new project creations, but we would need to start logging that. As of 5.15.24 that data is not being collected)_
    columns:
      - name: cdo_user_id
        description: "The Code.org user_id (via their project_storage_id)"

      - name: project_id
        description: "The project id associated with the creator of the project (use this when cdo_user_id is null for anonymous projects )"
      - name: user_id_merged
        description: The `cdo_user_id` if a known code.org user id exists, otherwise value is `'project_id_' || project_id`.  This 'merged' user id serves as a unique identifer accross all projects for known code.org users, and anonymous.

      - name: activity_date
        description: "The date (day) when the project record was created, derived from the `created_at` timestamp."
        tests:
          - not_null
      - name: project_types
        description: "A comma-separated list of distinct project types (applab, gamelab, etc.) the user engaged with on a particular day, ordered alphabetically."
      - name: num_project_records
        description: "The count of projects created associated with the user on the specified activity date."
    
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - user_id_merged
            - activity_date

  - name: int_active_sections
    description: all sections passing the "active" threshold in a given school year (5+ students completing 1+ levels of same course)
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - teacher_id
            - school_year
            - course_name
            - section_id

  - name: int_school_years
    description: 1 row per school year in different formats

  - name: int_section_mapping
    description: xref table to pull together these FK's for reference
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - student_id
            - school_year
            - section_id
            - teacher_id
            - school_id 

  - name: int_parent_levels_child_levels 
    description: mapping parent and child level ids

  - name: int_teacher_schools_historical
    description: all historical school associations made by teachers-- for a given school year, it takes their most recent school selection
            
  - name: int_school_weeks
    description: This model allows us to report metrics on a weekly basis based on timestamps.  We want to do this using ISO weeks to the greatest extent possible because our school year is defined to start on July 1 and end June 30. This means that the start of the school year can start either in ISO week 26 or 27 depending on the year. Some years have 52 weeks and some bleed into a 53rd week. This table numbers the "school year weeks" with week 1 possibly being a fragment (less than 7 days) of a week that starts with July 1, and stops at the first ISO week boundary that comes after july 1. Weeks 2 through 51 fall on standard ISO week boundaries. Week 52 (or 53, depending on the year) is another possible fragment of a week running from the ISO week boundary that is closest to June 30, and running up through and including June 30. As a result, for example, the end of one school year (june 30) and the start of another (july 1) may fall entirely within ISO week 27, but in this table you might see ISO week 27 split between "school year week" 52 (being 4 days) and school year week 1 of the next year being 3 days.
    tests: 
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - school_year
            - iso_week
            - school_year_week


