{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v11.json", "dbt_version": "1.7.5", "generated_at": "2024-01-21T22:02:04.964555Z", "invocation_id": "b716930a-b32b-4105-a69c-3baccdb03a1f", "env": {"DBT_CLOUD_PROJECT_ID": "286339", "DBT_CLOUD_RUN_ID": "243232111", "DBT_CLOUD_JOB_ID": "412302", "DBT_CLOUD_RUN_REASON": "Kicked off from UI by jordan.springer@code.org", "DBT_CLOUD_RUN_REASON_CATEGORY": "other", "DBT_CLOUD_RUN_TRIGGER_CATEGORY": "RUN_REASON_CATEGORY_UI", "DBT_CLOUD_ENVIRONMENT_ID": "233228", "DBT_CLOUD_ACCOUNT_ID": "182221"}, "project_name": "cdo_analytics", "project_id": "eee3f67225afa3475ed10a606905427f", "user_id": "846d2cd3-2635-4005-b0ed-963d281f93a6", "send_anonymous_usage_stats": true, "adapter_type": "redshift"}, "nodes": {"model.cdo_analytics.stg_dashboard_pii__regional_partners": {"database": "dev", "schema": "analytics", "name": "stg_dashboard_pii__regional_partners", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/stg_dashboard_pii__regional_partners.sql", "original_file_path": "models/staging/dashboard_pii/stg_dashboard_pii__regional_partners.sql", "unique_id": "model.cdo_analytics.stg_dashboard_pii__regional_partners", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "stg_dashboard_pii__regional_partners"], "alias": "stg_dashboard_pii__regional_partners", "checksum": {"name": "sha256", "checksum": "c68dcd36151b200509f9f3daccc23062db290b722b8d6c56ca80ccbbbae8fd18"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii"], "description": "staging regional partner data", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/staging/dashboard_pii/_dashboard_pii__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["contains_pii"]}, "created_at": 1705873847.012179, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard_pii__regional_partners\"", "raw_code": "with regional_partners as (\n    select * \n    from {{ ref('base_dashboard_pii__regional_partners') }}\n)\n\nselect * \nfrom regional_partners", "language": "sql", "refs": [{"name": "base_dashboard_pii__regional_partners", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_dashboard_pii__regional_partners"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/stg_dashboard_pii__regional_partners.sql", "compiled": true, "compiled_code": "with  __dbt__cte__base_dashboard_pii__regional_partners as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"regional_partners\"\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id                  as regional_partner_id,\n        \"group\"             as regional_partner_group,\n        name                as regional_partner_name,\n        urban               as is_urban,\n        attention,\n        street,\n        apartment_or_suite,\n        city,\n        state,\n        zip_code,\n        -- phone_number,\n        -- notes,\n        created_at,\n        updated_at,\n        -- properties,\n        is_active\n    from source\n)\n\nselect * \nfrom renamed\n), regional_partners as (\n    select * \n    from __dbt__cte__base_dashboard_pii__regional_partners\n)\n\nselect * \nfrom regional_partners", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard_pii__regional_partners", "sql": " __dbt__cte__base_dashboard_pii__regional_partners as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"regional_partners\"\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id                  as regional_partner_id,\n        \"group\"             as regional_partner_group,\n        name                as regional_partner_name,\n        urban               as is_urban,\n        attention,\n        street,\n        apartment_or_suite,\n        city,\n        state,\n        zip_code,\n        -- phone_number,\n        -- notes,\n        created_at,\n        updated_at,\n        -- properties,\n        is_active\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard_pii__users": {"database": "dev", "schema": "analytics", "name": "stg_dashboard_pii__users", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/stg_dashboard_pii__users.sql", "original_file_path": "models/staging/dashboard_pii/stg_dashboard_pii__users.sql", "unique_id": "model.cdo_analytics.stg_dashboard_pii__users", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "stg_dashboard_pii__users"], "alias": "stg_dashboard_pii__users", "checksum": {"name": "sha256", "checksum": "9e22e6c3b77892d445d66e5f5434e74349e579ff5788e125f119834d7c3580f0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii"], "description": "staging user pii data", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/staging/dashboard_pii/_dashboard_pii__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["contains_pii"]}, "created_at": 1705873847.013157, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard_pii__users\"", "raw_code": "with \nusers as (\n    select * \n    from {{ ref('base_dashboard_pii__users') }}\n)\n\nselect * \nfrom users", "language": "sql", "refs": [{"name": "base_dashboard_pii__users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_dashboard_pii__users"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/stg_dashboard_pii__users.sql", "compiled": true, "compiled_code": "with \n __dbt__cte__base_dashboard_pii__users as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"users\"\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id                          as user_id,\n        studio_person_id,\n        sign_in_count,\n        current_sign_in_at,\n        last_sign_in_at,\n        created_at,\n        updated_at,\n        -- username,\n        provider,\n        uid,\n        admin,\n        -- gender,\n        -- name,\n        locale,\n        -- birthday,\n        user_type,\n        school,\n        full_address,\n        school_info_id,\n        total_lines,\n        active                      as is_active,\n        purged_at,\n        invited_by_id,\n        invited_by_type,\n        terms_of_service_version,\n        urm                         as is_urm,\n        -- races,\n        primary_contact_info_id\n\n    from source\n)\n\nselect * \nfrom renamed\n), users as (\n    select * \n    from __dbt__cte__base_dashboard_pii__users\n)\n\nselect * \nfrom users", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard_pii__users", "sql": " __dbt__cte__base_dashboard_pii__users as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"users\"\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id                          as user_id,\n        studio_person_id,\n        sign_in_count,\n        current_sign_in_at,\n        last_sign_in_at,\n        created_at,\n        updated_at,\n        -- username,\n        provider,\n        uid,\n        admin,\n        -- gender,\n        -- name,\n        locale,\n        -- birthday,\n        user_type,\n        school,\n        full_address,\n        school_info_id,\n        total_lines,\n        active                      as is_active,\n        purged_at,\n        invited_by_id,\n        invited_by_type,\n        terms_of_service_version,\n        urm                         as is_urm,\n        -- races,\n        primary_contact_info_id\n\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard_pii__pd_international_opt_ins": {"database": "dev", "schema": "analytics", "name": "stg_dashboard_pii__pd_international_opt_ins", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/stg_dashboard_pii__pd_international_opt_ins.sql", "original_file_path": "models/staging/dashboard_pii/stg_dashboard_pii__pd_international_opt_ins.sql", "unique_id": "model.cdo_analytics.stg_dashboard_pii__pd_international_opt_ins", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "stg_dashboard_pii__pd_international_opt_ins"], "alias": "stg_dashboard_pii__pd_international_opt_ins", "checksum": {"name": "sha256", "checksum": "f9d9fc4eac196a0c5df2ec6f5a77765f0e62c11127b6920f001ba678ca427cd1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii"], "description": "staging pd_intl_opt_in data", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/staging/dashboard_pii/_dashboard_pii__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["contains_pii"]}, "created_at": 1705873847.0104485, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard_pii__pd_international_opt_ins\"", "raw_code": "with \ninternational_opt_ins as (\n    select * \n    from {{ ref('base_dashboard_pii__pd_international_opt_ins')}}\n),\n\nfinal as (\n    select \n        international_opt_in_id,\n        user_id                                             as teacher_user_id,\n        created_at                                          as form_submitted_at,\n        updated_at                                          as updated_at,\n\n        -- json_extract_path_text(form_data, 'firstName')           as first_name,\n        -- json_extract_path_text(form_data, 'firstNamePreferred')  as pref_name,\n        -- json_extract_path_text(form_data, 'lastName')            as last_name,\n        -- json_extract_path_text(form_data, 'email')               as email,\n        -- json_extract_path_text(form_data, 'emailAlternate')      as email_alt,\n        -- json_extract_path_text(form_data, 'gender')              as gender,\n        json_extract_path_text(form_data, 'schoolDepartment')    as school_department,\n        json_extract_path_text(form_data, 'schoolMunicipality')  as school_municipality,\n        json_extract_path_text(form_data, 'schoolName')          as school_name,\n        json_extract_path_text(form_data, 'schoolCity')          as school_city,\n        json_extract_path_text(form_data, 'schoolCountry')       as school_country,\n        json_extract_path_text(form_data, 'ages')                as age_taught,\n        json_extract_path_text(form_data, 'subjects')            as subject_taught,\n        json_extract_path_text(form_data, 'resources')           as cs_resources,\n        json_extract_path_text(form_data, 'robotics')            as robotics_resources,\n        json_extract_path_text(form_data, 'date')                as workshop_date,\n        json_extract_path_text(form_data, 'workshopOrganizer')   as workshop_organizer,\n        json_extract_path_text(form_data, 'workshopFacilitator') as workshop_facilitator,\n        json_extract_path_text(form_data, 'workshopCourse')      as workshop_course,\n        json_extract_path_text(form_data, 'emailOptIn')          as email_opt_in\n        {# form_data #}\n    from international_opt_ins \n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "base_dashboard_pii__pd_international_opt_ins", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_dashboard_pii__pd_international_opt_ins"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/stg_dashboard_pii__pd_international_opt_ins.sql", "compiled": true, "compiled_code": "with \n __dbt__cte__base_dashboard_pii__pd_international_opt_ins as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_international_opt_ins\"\n),\n\nrenamed as (\n    select \n        id as international_opt_in_id,\n        user_id,\n        form_data,\n        created_at,\n        updated_at\n    from source \n)\n\nselect *\nfrom renamed\n), international_opt_ins as (\n    select * \n    from __dbt__cte__base_dashboard_pii__pd_international_opt_ins\n),\n\nfinal as (\n    select \n        international_opt_in_id,\n        user_id                                             as teacher_user_id,\n        created_at                                          as form_submitted_at,\n        updated_at                                          as updated_at,\n\n        -- json_extract_path_text(form_data, 'firstName')           as first_name,\n        -- json_extract_path_text(form_data, 'firstNamePreferred')  as pref_name,\n        -- json_extract_path_text(form_data, 'lastName')            as last_name,\n        -- json_extract_path_text(form_data, 'email')               as email,\n        -- json_extract_path_text(form_data, 'emailAlternate')      as email_alt,\n        -- json_extract_path_text(form_data, 'gender')              as gender,\n        json_extract_path_text(form_data, 'schoolDepartment')    as school_department,\n        json_extract_path_text(form_data, 'schoolMunicipality')  as school_municipality,\n        json_extract_path_text(form_data, 'schoolName')          as school_name,\n        json_extract_path_text(form_data, 'schoolCity')          as school_city,\n        json_extract_path_text(form_data, 'schoolCountry')       as school_country,\n        json_extract_path_text(form_data, 'ages')                as age_taught,\n        json_extract_path_text(form_data, 'subjects')            as subject_taught,\n        json_extract_path_text(form_data, 'resources')           as cs_resources,\n        json_extract_path_text(form_data, 'robotics')            as robotics_resources,\n        json_extract_path_text(form_data, 'date')                as workshop_date,\n        json_extract_path_text(form_data, 'workshopOrganizer')   as workshop_organizer,\n        json_extract_path_text(form_data, 'workshopFacilitator') as workshop_facilitator,\n        json_extract_path_text(form_data, 'workshopCourse')      as workshop_course,\n        json_extract_path_text(form_data, 'emailOptIn')          as email_opt_in\n        \n    from international_opt_ins \n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard_pii__pd_international_opt_ins", "sql": " __dbt__cte__base_dashboard_pii__pd_international_opt_ins as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_international_opt_ins\"\n),\n\nrenamed as (\n    select \n        id as international_opt_in_id,\n        user_id,\n        form_data,\n        created_at,\n        updated_at\n    from source \n)\n\nselect *\nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard_pii__pd_enrollments": {"database": "dev", "schema": "analytics", "name": "stg_dashboard_pii__pd_enrollments", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/stg_dashboard_pii__pd_enrollments.sql", "original_file_path": "models/staging/dashboard_pii/stg_dashboard_pii__pd_enrollments.sql", "unique_id": "model.cdo_analytics.stg_dashboard_pii__pd_enrollments", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "stg_dashboard_pii__pd_enrollments"], "alias": "stg_dashboard_pii__pd_enrollments", "checksum": {"name": "sha256", "checksum": "d12a358eded9b0609602681b44330f78b71ba570acc5e473ad7cc203c9ccaeb6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii"], "description": "staging pd enrollments data", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/staging/dashboard_pii/_dashboard_pii__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["contains_pii"]}, "created_at": 1705873847.0100067, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard_pii__pd_enrollments\"", "raw_code": "with\npd_enrollments as (\n    select * \n    from {{ ref('base_dashboard_pii__pd_enrollments') }}\n)\n\nselect * \nfrom pd_enrollments", "language": "sql", "refs": [{"name": "base_dashboard_pii__pd_enrollments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_dashboard_pii__pd_enrollments"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/stg_dashboard_pii__pd_enrollments.sql", "compiled": true, "compiled_code": "with\n __dbt__cte__base_dashboard_pii__pd_enrollments as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_enrollments\"\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id as pd_enrollment_id,\n        pd_workshop_id,\n        name,\n        -- first_name,\n        -- last_name,\n        -- email,\n        created_at,\n        updated_at,\n        school,\n        code,\n        user_id,\n        survey_sent_at,\n        completed_survey_id,\n        school_info_id,\n        -- properties,\n        application_id\n    from source\n)\n\nselect * \nfrom renamed\n), pd_enrollments as (\n    select * \n    from __dbt__cte__base_dashboard_pii__pd_enrollments\n)\n\nselect * \nfrom pd_enrollments", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard_pii__pd_enrollments", "sql": " __dbt__cte__base_dashboard_pii__pd_enrollments as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_enrollments\"\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id as pd_enrollment_id,\n        pd_workshop_id,\n        name,\n        -- first_name,\n        -- last_name,\n        -- email,\n        created_at,\n        updated_at,\n        school,\n        code,\n        user_id,\n        survey_sent_at,\n        completed_survey_id,\n        school_info_id,\n        -- properties,\n        application_id\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard_pii__pd_sessions": {"database": "dev", "schema": "analytics", "name": "stg_dashboard_pii__pd_sessions", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/stg_dashboard_pii__pd_sessions.sql", "original_file_path": "models/staging/dashboard_pii/stg_dashboard_pii__pd_sessions.sql", "unique_id": "model.cdo_analytics.stg_dashboard_pii__pd_sessions", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "stg_dashboard_pii__pd_sessions"], "alias": "stg_dashboard_pii__pd_sessions", "checksum": {"name": "sha256", "checksum": "bb2c106f924392dd680e99d0962695eb06d9f266580ca0952f351b6b37ab5037"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii"], "description": "staging pd session data", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/staging/dashboard_pii/_dashboard_pii__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["contains_pii"]}, "created_at": 1705873847.0108554, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard_pii__pd_sessions\"", "raw_code": "with\npd_sessions as (\n    select * \n    from {{ ref('base_dashboard_pii__pd_sessions') }}\n)\n\nselect * \nfrom pd_sessions", "language": "sql", "refs": [{"name": "base_dashboard_pii__pd_sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_dashboard_pii__pd_sessions"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/stg_dashboard_pii__pd_sessions.sql", "compiled": true, "compiled_code": "with\n __dbt__cte__base_dashboard_pii__pd_sessions as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_sessions\"\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id                  as pd_session_id,\n        pd_workshop_id,\n        \"start\"             as started_at,\n        \"end\"               as ended_at,\n        created_at,\n        updated_at,\n        code\n    from source\n)\n\nselect * \nfrom renamed\n), pd_sessions as (\n    select * \n    from __dbt__cte__base_dashboard_pii__pd_sessions\n)\n\nselect * \nfrom pd_sessions", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard_pii__pd_sessions", "sql": " __dbt__cte__base_dashboard_pii__pd_sessions as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_sessions\"\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id                  as pd_session_id,\n        pd_workshop_id,\n        \"start\"             as started_at,\n        \"end\"               as ended_at,\n        created_at,\n        updated_at,\n        code\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard_pii__pd_workshop_facilitators": {"database": "dev", "schema": "analytics", "name": "stg_dashboard_pii__pd_workshop_facilitators", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/stg_dashboard_pii__pd_workshop_facilitators.sql", "original_file_path": "models/staging/dashboard_pii/stg_dashboard_pii__pd_workshop_facilitators.sql", "unique_id": "model.cdo_analytics.stg_dashboard_pii__pd_workshop_facilitators", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "stg_dashboard_pii__pd_workshop_facilitators"], "alias": "stg_dashboard_pii__pd_workshop_facilitators", "checksum": {"name": "sha256", "checksum": "85e4f1a54346774f1507ba6cf75fc4430bd27e3e6b17339c3108be8ebff8631b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii"], "description": "staging pd workshop facilitator data", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/staging/dashboard_pii/_dashboard_pii__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["contains_pii"]}, "created_at": 1705873847.0112479, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard_pii__pd_workshop_facilitators\"", "raw_code": "with pd_workshop_facilitators as (\n    select * \n    from {{ ref('base_dashboard_pii__pd_workshops_facilitators') }}\n)\n\nselect * \nfrom pd_workshop_facilitators", "language": "sql", "refs": [{"name": "base_dashboard_pii__pd_workshops_facilitators", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_dashboard_pii__pd_workshops_facilitators"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/stg_dashboard_pii__pd_workshop_facilitators.sql", "compiled": true, "compiled_code": "with  __dbt__cte__base_dashboard_pii__pd_workshops_facilitators as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_workshops_facilitators\"\n),\n\nrenamed as (\n    select\n        pd_workshop_id,\n        user_id\n    from source\n)\n\nselect * \nfrom renamed\n), pd_workshop_facilitators as (\n    select * \n    from __dbt__cte__base_dashboard_pii__pd_workshops_facilitators\n)\n\nselect * \nfrom pd_workshop_facilitators", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard_pii__pd_workshops_facilitators", "sql": " __dbt__cte__base_dashboard_pii__pd_workshops_facilitators as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_workshops_facilitators\"\n),\n\nrenamed as (\n    select\n        pd_workshop_id,\n        user_id\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard_pii__user_school_infos": {"database": "dev", "schema": "analytics", "name": "stg_dashboard_pii__user_school_infos", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/stg_dashboard_pii__user_school_infos.sql", "original_file_path": "models/staging/dashboard_pii/stg_dashboard_pii__user_school_infos.sql", "unique_id": "model.cdo_analytics.stg_dashboard_pii__user_school_infos", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "stg_dashboard_pii__user_school_infos"], "alias": "stg_dashboard_pii__user_school_infos", "checksum": {"name": "sha256", "checksum": "c45f5b92a5a967438eafef68bc68c165f3a144941a9197d60cdd4c902539b11c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii"], "description": "staging user school info data", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/staging/dashboard_pii/_dashboard_pii__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["contains_pii"]}, "created_at": 1705873847.0127378, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard_pii__user_school_infos\"", "raw_code": "with \nuser_school_infos as (\n    select \n        user_school_info_id,\n        user_id,\n        started_at,\n        case when ended_at is not null then ended_at else '9999-12-31' end as ended_at,\n        school_info_id,\n        last_confirmation_at,\n        created_at,\n        updated_at \n    from {{ ref('base_dashboard_pii__user_school_infos') }}\n)\n\nselect * \nfrom user_school_infos", "language": "sql", "refs": [{"name": "base_dashboard_pii__user_school_infos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_dashboard_pii__user_school_infos"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/stg_dashboard_pii__user_school_infos.sql", "compiled": true, "compiled_code": "with \n __dbt__cte__base_dashboard_pii__user_school_infos as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"user_school_infos\"\n),\n\nrenamed as (\n    select\n        id                      as user_school_info_id,\n        user_id,\n        start_date              as started_at,\n        end_date                as ended_at,\n        school_info_id,\n        last_confirmation_date  as last_confirmation_at,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed\n), user_school_infos as (\n    select \n        user_school_info_id,\n        user_id,\n        started_at,\n        case when ended_at is not null then ended_at else '9999-12-31' end as ended_at,\n        school_info_id,\n        last_confirmation_at,\n        created_at,\n        updated_at \n    from __dbt__cte__base_dashboard_pii__user_school_infos\n)\n\nselect * \nfrom user_school_infos", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard_pii__user_school_infos", "sql": " __dbt__cte__base_dashboard_pii__user_school_infos as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"user_school_infos\"\n),\n\nrenamed as (\n    select\n        id                      as user_school_info_id,\n        user_id,\n        start_date              as started_at,\n        end_date                as ended_at,\n        school_info_id,\n        last_confirmation_date  as last_confirmation_at,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard_pii__pd_workshops": {"database": "dev", "schema": "analytics", "name": "stg_dashboard_pii__pd_workshops", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/stg_dashboard_pii__pd_workshops.sql", "original_file_path": "models/staging/dashboard_pii/stg_dashboard_pii__pd_workshops.sql", "unique_id": "model.cdo_analytics.stg_dashboard_pii__pd_workshops", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "stg_dashboard_pii__pd_workshops"], "alias": "stg_dashboard_pii__pd_workshops", "checksum": {"name": "sha256", "checksum": "f57ac4b6d8d21cdafc61a61d9a7349b2ca837afff129888afb8e95b8bf67f3ba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii"], "description": "staging pd workshops data", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/staging/dashboard_pii/_dashboard_pii__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["contains_pii"]}, "created_at": 1705873847.0117888, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard_pii__pd_workshops\"", "raw_code": "with\npd_workshops as (\n    select * \n    from {{ ref('base_dashboard_pii__pd_workshops') }}\n)\n\nselect * \nfrom pd_workshops", "language": "sql", "refs": [{"name": "base_dashboard_pii__pd_workshops", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_dashboard_pii__pd_workshops"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/stg_dashboard_pii__pd_workshops.sql", "compiled": true, "compiled_code": "with\n __dbt__cte__base_dashboard_pii__pd_workshops as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_workshops\"\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id                  as pd_workshop_id,\n        organizer_id,\n        location_name,\n        location_address,\n        processed_location,\n        course,\n        subject,\n        capacity,\n        -- notes,\n        section_id,\n        started_at,\n        ended_at,\n        created_at,\n        updated_at,\n        processed_at,\n        regional_partner_id,\n        on_map              as is_on_map,\n        funded              as is_funded,\n        funding_type,\n        -- properties,\n        module -- (js) new col added (see: https://github.com/code-dot-org/code-dot-org/pull/53949/files)\n    from source\n)\n\nselect * \nfrom renamed\n), pd_workshops as (\n    select * \n    from __dbt__cte__base_dashboard_pii__pd_workshops\n)\n\nselect * \nfrom pd_workshops", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard_pii__pd_workshops", "sql": " __dbt__cte__base_dashboard_pii__pd_workshops as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_workshops\"\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id                  as pd_workshop_id,\n        organizer_id,\n        location_name,\n        location_address,\n        processed_location,\n        course,\n        subject,\n        capacity,\n        -- notes,\n        section_id,\n        started_at,\n        ended_at,\n        created_at,\n        updated_at,\n        processed_at,\n        regional_partner_id,\n        on_map              as is_on_map,\n        funded              as is_funded,\n        funding_type,\n        -- properties,\n        module -- (js) new col added (see: https://github.com/code-dot-org/code-dot-org/pull/53949/files)\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard_pii__pd_attendances": {"database": "dev", "schema": "analytics", "name": "stg_dashboard_pii__pd_attendances", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/stg_dashboard_pii__pd_attendances.sql", "original_file_path": "models/staging/dashboard_pii/stg_dashboard_pii__pd_attendances.sql", "unique_id": "model.cdo_analytics.stg_dashboard_pii__pd_attendances", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "stg_dashboard_pii__pd_attendances"], "alias": "stg_dashboard_pii__pd_attendances", "checksum": {"name": "sha256", "checksum": "092dafaecdf3b40a55dba49484a3afc15bad16dfa4e05cf69d4c4913d237b16a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii"], "description": "staging pd attendances data", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/staging/dashboard_pii/_dashboard_pii__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["contains_pii"]}, "created_at": 1705873847.0095851, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard_pii__pd_attendances\"", "raw_code": "with\npd_attendances as (\n    select * \n    from {{ ref('base_dashboard_pii__pd_attendances') }}\n)\n\nselect * \nfrom pd_attendances", "language": "sql", "refs": [{"name": "base_dashboard_pii__pd_attendances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_dashboard_pii__pd_attendances"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/stg_dashboard_pii__pd_attendances.sql", "compiled": true, "compiled_code": "with\n __dbt__cte__base_dashboard_pii__pd_attendances as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_attendances\"\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id as pd_attendance_id,\n        pd_session_id,\n        teacher_id,\n        created_at,\n        updated_at,\n        pd_enrollment_id,\n        marked_by_user_id\n    from source\n)\n\nselect * \nfrom renamed\n), pd_attendances as (\n    select * \n    from __dbt__cte__base_dashboard_pii__pd_attendances\n)\n\nselect * \nfrom pd_attendances", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard_pii__pd_attendances", "sql": " __dbt__cte__base_dashboard_pii__pd_attendances as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_attendances\"\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id as pd_attendance_id,\n        pd_session_id,\n        teacher_id,\n        created_at,\n        updated_at,\n        pd_enrollment_id,\n        marked_by_user_id\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard_pii__pd_regional_partner_mappings": {"database": "dev", "schema": "analytics", "name": "stg_dashboard_pii__pd_regional_partner_mappings", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/stg_dashboard_pii__pd_regional_partner_mappings.sql", "original_file_path": "models/staging/dashboard_pii/stg_dashboard_pii__pd_regional_partner_mappings.sql", "unique_id": "model.cdo_analytics.stg_dashboard_pii__pd_regional_partner_mappings", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "stg_dashboard_pii__pd_regional_partner_mappings"], "alias": "stg_dashboard_pii__pd_regional_partner_mappings", "checksum": {"name": "sha256", "checksum": "0e5328152a57c89fc9074cc2a7f11921bffdf6ba7f085660ed6380b55c1ca806"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["contains_pii"]}, "created_at": 1705873846.0465078, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard_pii__pd_regional_partner_mappings\"", "raw_code": "with pd_regional_partner_mappings as (\n    select * \n    from {{ ref('base_dashboard_pii__pd_regional_partner_mappings') }}\n)\n\nselect * \nfrom pd_regional_partner_mappings", "language": "sql", "refs": [{"name": "base_dashboard_pii__pd_regional_partner_mappings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_dashboard_pii__pd_regional_partner_mappings"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/stg_dashboard_pii__pd_regional_partner_mappings.sql", "compiled": true, "compiled_code": "with  __dbt__cte__base_dashboard_pii__pd_regional_partner_mappings as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_regional_partner_mappings\"\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id as pd_regional_partner_mapping_id,\n        regional_partner_id,\n        state,\n        zip_code,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed\n), pd_regional_partner_mappings as (\n    select * \n    from __dbt__cte__base_dashboard_pii__pd_regional_partner_mappings\n)\n\nselect * \nfrom pd_regional_partner_mappings", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard_pii__pd_regional_partner_mappings", "sql": " __dbt__cte__base_dashboard_pii__pd_regional_partner_mappings as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_regional_partner_mappings\"\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id as pd_regional_partner_mapping_id,\n        regional_partner_id,\n        state,\n        zip_code,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard_pii__pd_applications": {"database": "dev", "schema": "analytics", "name": "stg_dashboard_pii__pd_applications", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/stg_dashboard_pii__pd_applications.sql", "original_file_path": "models/staging/dashboard_pii/stg_dashboard_pii__pd_applications.sql", "unique_id": "model.cdo_analytics.stg_dashboard_pii__pd_applications", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "stg_dashboard_pii__pd_applications"], "alias": "stg_dashboard_pii__pd_applications", "checksum": {"name": "sha256", "checksum": "e9473b52c2cc5a5641f78366059d9d19c091fbbb09eea1869549706e52cdaf3d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii"], "description": "staging pd applications data", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/staging/dashboard_pii/_dashboard_pii__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["contains_pii"]}, "created_at": 1705873847.0090387, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard_pii__pd_applications\"", "raw_code": "with\npd_applications as (\n    select * \n    from {{ ref('base_dashboard_pii__pd_applications') }}\n)\n\nselect * \nfrom pd_applications", "language": "sql", "refs": [{"name": "base_dashboard_pii__pd_applications", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_dashboard_pii__pd_applications"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/stg_dashboard_pii__pd_applications.sql", "compiled": true, "compiled_code": "with\n __dbt__cte__base_dashboard_pii__pd_applications as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_applications\"\n    where deleted_at is null\n),\n\nrenamed as (\n    select\n        id  as pd_application_id,\n        user_id,\n        type,\n        application_year,\n        application_type,\n        regional_partner_id,\n        status,\n        locked_at,\n        -- notes,\n        -- form_data,\n        created_at,\n        updated_at,\n        course,\n        response_scores,\n        application_guid,\n        accepted_at,\n        -- properties,\n        status_timestamp_change_log,\n        applied_at\n    from source\n)\n\nselect * \nfrom renamed\n), pd_applications as (\n    select * \n    from __dbt__cte__base_dashboard_pii__pd_applications\n)\n\nselect * \nfrom pd_applications", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard_pii__pd_applications", "sql": " __dbt__cte__base_dashboard_pii__pd_applications as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_applications\"\n    where deleted_at is null\n),\n\nrenamed as (\n    select\n        id  as pd_application_id,\n        user_id,\n        type,\n        application_year,\n        application_type,\n        regional_partner_id,\n        status,\n        locked_at,\n        -- notes,\n        -- form_data,\n        created_at,\n        updated_at,\n        course,\n        response_scores,\n        application_guid,\n        accepted_at,\n        -- properties,\n        status_timestamp_change_log,\n        applied_at\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__pd_workshop_surveys": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__pd_workshop_surveys", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__pd_workshop_surveys.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__pd_workshop_surveys.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__pd_workshop_surveys", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__pd_workshop_surveys"], "alias": "base_dashboard_pii__pd_workshop_surveys", "checksum": {"name": "sha256", "checksum": "41abc42631d422cbc62437b7e5f8d9b940dc88e94f291065814e33f5eaae8ceb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.0570617, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'pd_workshop_surveys') }}\n),\n\nrenamed as (\n    select\n        id as pd_workshop_survey_id,\n        pd_enrollment_id,\n        -- form_data,\n        created_at,\n        updated_at,\n        type\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "pd_workshop_surveys"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.pd_workshop_surveys"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__pd_workshop_surveys.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_workshop_surveys\"\n),\n\nrenamed as (\n    select\n        id as pd_workshop_survey_id,\n        pd_enrollment_id,\n        -- form_data,\n        created_at,\n        updated_at,\n        type\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__teacher_feedbacks": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__teacher_feedbacks", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__teacher_feedbacks.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__teacher_feedbacks.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__teacher_feedbacks", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__teacher_feedbacks"], "alias": "base_dashboard_pii__teacher_feedbacks", "checksum": {"name": "sha256", "checksum": "f158eec3ecd26fe1daef20fe9b8fac81f1f49e2074329e054a6538c10fd9c948"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.0620003, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'teacher_feedbacks') }}\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id as teacher_feedback_id,\n        -- comment,\n        student_id,\n        level_id,\n        teacher_id,\n        created_at,\n        updated_at,\n        performance,\n        student_visit_count,\n        student_first_visited_at,\n        student_last_visited_at,\n        seen_on_feedback_page_at,\n        script_id,\n        analytics_section_id,\n        review_state\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "teacher_feedbacks"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.teacher_feedbacks"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__teacher_feedbacks.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"teacher_feedbacks\"\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id as teacher_feedback_id,\n        -- comment,\n        student_id,\n        level_id,\n        teacher_id,\n        created_at,\n        updated_at,\n        performance,\n        student_visit_count,\n        student_first_visited_at,\n        student_last_visited_at,\n        seen_on_feedback_page_at,\n        script_id,\n        analytics_section_id,\n        review_state\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__users": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__users", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__users.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__users.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__users", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__users"], "alias": "base_dashboard_pii__users", "checksum": {"name": "sha256", "checksum": "9e3b480dbb4cdf950f072651e2bc0b44a30cad5ee92e4b0c9bff36877869b717"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.066886, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'users') }}\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id                          as user_id,\n        studio_person_id,\n        sign_in_count,\n        current_sign_in_at,\n        last_sign_in_at,\n        created_at,\n        updated_at,\n        -- username,\n        provider,\n        uid,\n        admin,\n        -- gender,\n        -- name,\n        locale,\n        -- birthday,\n        user_type,\n        school,\n        full_address,\n        school_info_id,\n        total_lines,\n        active                      as is_active,\n        purged_at,\n        invited_by_id,\n        invited_by_type,\n        terms_of_service_version,\n        urm                         as is_urm,\n        -- races,\n        primary_contact_info_id\n\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "users"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.users"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__users.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"users\"\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id                          as user_id,\n        studio_person_id,\n        sign_in_count,\n        current_sign_in_at,\n        last_sign_in_at,\n        created_at,\n        updated_at,\n        -- username,\n        provider,\n        uid,\n        admin,\n        -- gender,\n        -- name,\n        locale,\n        -- birthday,\n        user_type,\n        school,\n        full_address,\n        school_info_id,\n        total_lines,\n        active                      as is_active,\n        purged_at,\n        invited_by_id,\n        invited_by_type,\n        terms_of_service_version,\n        urm                         as is_urm,\n        -- races,\n        primary_contact_info_id\n\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__pd_teacher_applications": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__pd_teacher_applications", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__pd_teacher_applications.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__pd_teacher_applications.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__pd_teacher_applications", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__pd_teacher_applications"], "alias": "base_dashboard_pii__pd_teacher_applications", "checksum": {"name": "sha256", "checksum": "91dc912b5326210a53e79bf5465c77f3dd87e95317cc1222f5a0a1cb2515b817"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.0725684, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'pd_teacher_applications') }}\n),\n\nrenamed as (\n    select\n        id as pd_teacher_application_id,\n        created_at,\n        updated_at,\n        user_id,\n        -- primary_email,\n        -- secondary_email,\n        application,\n        regional_partner_override,\n        program_registration_id\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "pd_teacher_applications"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.pd_teacher_applications"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__pd_teacher_applications.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_teacher_applications\"\n),\n\nrenamed as (\n    select\n        id as pd_teacher_application_id,\n        created_at,\n        updated_at,\n        user_id,\n        -- primary_email,\n        -- secondary_email,\n        application,\n        regional_partner_override,\n        program_registration_id\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__pd_regional_partner_mappings": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__pd_regional_partner_mappings", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__pd_regional_partner_mappings.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__pd_regional_partner_mappings.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__pd_regional_partner_mappings", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__pd_regional_partner_mappings"], "alias": "base_dashboard_pii__pd_regional_partner_mappings", "checksum": {"name": "sha256", "checksum": "ce2414b118131a65ec87f6b015041957d5254cccd8580bff495fbdc8c447f3b6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.077429, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'pd_regional_partner_mappings') }}\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id as pd_regional_partner_mapping_id,\n        regional_partner_id,\n        state,\n        zip_code,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "pd_regional_partner_mappings"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.pd_regional_partner_mappings"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__pd_regional_partner_mappings.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_regional_partner_mappings\"\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id as pd_regional_partner_mapping_id,\n        regional_partner_id,\n        state,\n        zip_code,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__pd_attendances": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__pd_attendances", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__pd_attendances.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__pd_attendances.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__pd_attendances", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__pd_attendances"], "alias": "base_dashboard_pii__pd_attendances", "checksum": {"name": "sha256", "checksum": "22db571ba3d6756887703c952c6b13ef8e16a573e8326a1c4d251fc3ece91b2a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.0822682, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'pd_attendances') }}\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id as pd_attendance_id,\n        pd_session_id,\n        teacher_id,\n        created_at,\n        updated_at,\n        pd_enrollment_id,\n        marked_by_user_id\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "pd_attendances"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.pd_attendances"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__pd_attendances.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_attendances\"\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id as pd_attendance_id,\n        pd_session_id,\n        teacher_id,\n        created_at,\n        updated_at,\n        pd_enrollment_id,\n        marked_by_user_id\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__pd_scholarship_infos": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__pd_scholarship_infos", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__pd_scholarship_infos.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__pd_scholarship_infos.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__pd_scholarship_infos", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__pd_scholarship_infos"], "alias": "base_dashboard_pii__pd_scholarship_infos", "checksum": {"name": "sha256", "checksum": "fbcee5d4c6c44b786dd58535b35ebd8b39b1c99ecc3cbad8c87560f2a37975a0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.087116, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'pd_scholarship_infos') }}\n),\n\nrenamed as (\n    select\n        id as pd_scholarship_info_id,\n        user_id,\n        application_year,\n        scholarship_status,\n        pd_application_id,\n        pd_enrollment_id,\n        created_at,\n        updated_at,\n        course\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "pd_scholarship_infos"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.pd_scholarship_infos"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__pd_scholarship_infos.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_scholarship_infos\"\n),\n\nrenamed as (\n    select\n        id as pd_scholarship_info_id,\n        user_id,\n        application_year,\n        scholarship_status,\n        pd_application_id,\n        pd_enrollment_id,\n        created_at,\n        updated_at,\n        course\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__foorm_forms": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__foorm_forms", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__foorm_forms.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__foorm_forms.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__foorm_forms", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__foorm_forms"], "alias": "base_dashboard_pii__foorm_forms", "checksum": {"name": "sha256", "checksum": "d9a338d46e50cbef90c88024b86e06e3e6decb866e66f628d15130f7009b3132"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.0920563, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'foorm_forms') }}\n),\n\nrenamed as (\n    select\n        id          as foorm_foorm_id,\n        name,\n        version,\n        questions,\n        created_at,\n        updated_at,\n        published   as is_published\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "foorm_forms"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.foorm_forms"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__foorm_forms.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"foorm_forms\"\n),\n\nrenamed as (\n    select\n        id          as foorm_foorm_id,\n        name,\n        version,\n        questions,\n        created_at,\n        updated_at,\n        published   as is_published\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__user_school_infos": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__user_school_infos", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__user_school_infos.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__user_school_infos.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__user_school_infos", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__user_school_infos"], "alias": "base_dashboard_pii__user_school_infos", "checksum": {"name": "sha256", "checksum": "f8ed685f62d31610209b4f582f75587778b57864fc3cfd2f99062b926fe65769"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.0969098, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'user_school_infos') }}\n),\n\nrenamed as (\n    select\n        id                      as user_school_info_id,\n        user_id,\n        start_date              as started_at,\n        end_date                as ended_at,\n        school_info_id,\n        last_confirmation_date  as last_confirmation_at,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "user_school_infos"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.user_school_infos"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__user_school_infos.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"user_school_infos\"\n),\n\nrenamed as (\n    select\n        id                      as user_school_info_id,\n        user_id,\n        start_date              as started_at,\n        end_date                as ended_at,\n        school_info_id,\n        last_confirmation_date  as last_confirmation_at,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__peer_reviews": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__peer_reviews", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__peer_reviews.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__peer_reviews.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__peer_reviews", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__peer_reviews"], "alias": "base_dashboard_pii__peer_reviews", "checksum": {"name": "sha256", "checksum": "894833617cdfa9a0a3a8808c520105dac39aaebdd13e8ff3075de932a1b4c989"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.1025865, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'peer_reviews') }}\n),\n\nrenamed as (\n    select\n        id as peer_review_id,\n        submitter_id,\n        reviewer_id,\n        from_instructor,\n        script_id,\n        level_id,\n        level_source_id,\n        -- data,\n        status,\n        created_at,\n        updated_at,\n        audit_trail\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "peer_reviews"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.peer_reviews"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__peer_reviews.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"peer_reviews\"\n),\n\nrenamed as (\n    select\n        id as peer_review_id,\n        submitter_id,\n        reviewer_id,\n        from_instructor,\n        script_id,\n        level_id,\n        level_source_id,\n        -- data,\n        status,\n        created_at,\n        updated_at,\n        audit_trail\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__pd_teachercon1819_registrations": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__pd_teachercon1819_registrations", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__pd_teachercon1819_registrations.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__pd_teachercon1819_registrations.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__pd_teachercon1819_registrations", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__pd_teachercon1819_registrations"], "alias": "base_dashboard_pii__pd_teachercon1819_registrations", "checksum": {"name": "sha256", "checksum": "e22cdc7d220168500f2314974ffc2f1fd1b37e7fae4a00db92a53346ddcbc996"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.1072874, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'pd_teachercon1819_registrations') }}\n),\n\nrenamed as (\n    select\n        id as pd_teachercon1819_registration_id,\n        pd_application_id,\n        -- form_data,\n        created_at,\n        updated_at,\n        regional_partner_id,\n        user_id\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "pd_teachercon1819_registrations"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.pd_teachercon1819_registrations"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__pd_teachercon1819_registrations.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_teachercon1819_registrations\"\n),\n\nrenamed as (\n    select\n        id as pd_teachercon1819_registration_id,\n        pd_application_id,\n        -- form_data,\n        created_at,\n        updated_at,\n        regional_partner_id,\n        user_id\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__pd_teachercon_surveys": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__pd_teachercon_surveys", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__pd_teachercon_surveys.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__pd_teachercon_surveys.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__pd_teachercon_surveys", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__pd_teachercon_surveys"], "alias": "base_dashboard_pii__pd_teachercon_surveys", "checksum": {"name": "sha256", "checksum": "b5b4a185c8eec7251d75b74fac73ab98714034f8aef9bfdab8a7d61ec563a33d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.1120481, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'pd_teachercon_surveys') }}\n),\n\nrenamed as (\n    select\n        id as pd_teachercon_survey_id,\n        pd_enrollment_id,\n        -- form_data,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "pd_teachercon_surveys"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.pd_teachercon_surveys"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__pd_teachercon_surveys.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_teachercon_surveys\"\n),\n\nrenamed as (\n    select\n        id as pd_teachercon_survey_id,\n        pd_enrollment_id,\n        -- form_data,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__foorm_submissions": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__foorm_submissions", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__foorm_submissions.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__foorm_submissions.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__foorm_submissions", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__foorm_submissions"], "alias": "base_dashboard_pii__foorm_submissions", "checksum": {"name": "sha256", "checksum": "06c0a8a8a4029117f3a9529aef15c9d1c03f6a21b94d0f9a05d3954c2232636a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.1167934, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'foorm_submissions') }}\n),\n\nrenamed as (\n    select\n        id as foorm_submission_id,\n        form_name,\n        form_version,\n        -- answers,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "foorm_submissions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.foorm_submissions"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__foorm_submissions.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"foorm_submissions\"\n),\n\nrenamed as (\n    select\n        id as foorm_submission_id,\n        form_name,\n        form_version,\n        -- answers,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__foorm_libraries": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__foorm_libraries", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__foorm_libraries.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__foorm_libraries.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__foorm_libraries", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__foorm_libraries"], "alias": "base_dashboard_pii__foorm_libraries", "checksum": {"name": "sha256", "checksum": "352133c1f2bd5389e5e253cb02e2218f5f9fba365482c24bfaf467e0953f52df"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.121534, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'foorm_libraries') }}\n),\n\nrenamed as (\n    select\n        id          as foorm_library_id,\n        name,\n        version,\n        published   as is_published,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "foorm_libraries"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.foorm_libraries"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__foorm_libraries.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"foorm_libraries\"\n),\n\nrenamed as (\n    select\n        id          as foorm_library_id,\n        name,\n        version,\n        published   as is_published,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__foorm_simple_survey_forms": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__foorm_simple_survey_forms", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__foorm_simple_survey_forms.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__foorm_simple_survey_forms.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__foorm_simple_survey_forms", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__foorm_simple_survey_forms"], "alias": "base_dashboard_pii__foorm_simple_survey_forms", "checksum": {"name": "sha256", "checksum": "e0a6d27325c75a0615fba6ea565c8dd03fb2a84aa6e43d52750146237e86ab82"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.1273484, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'foorm_simple_survey_forms') }}\n),\n\nrenamed as (\n    select\n        id as foorm_simple_survey_form_id,\n        path,\n        kind,\n        form_name,\n        form_version,\n        -- properties, \n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "foorm_simple_survey_forms"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.foorm_simple_survey_forms"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__foorm_simple_survey_forms.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"foorm_simple_survey_forms\"\n),\n\nrenamed as (\n    select\n        id as foorm_simple_survey_form_id,\n        path,\n        kind,\n        form_name,\n        form_version,\n        -- properties, \n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__regional_partners": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__regional_partners", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__regional_partners.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__regional_partners.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__regional_partners", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__regional_partners"], "alias": "base_dashboard_pii__regional_partners", "checksum": {"name": "sha256", "checksum": "31b585f983fabd7030bb433269b1c88a5a8c0966aca0e71e9a4708a1e8846022"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.132126, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'regional_partners') }}\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id                  as regional_partner_id,\n        \"group\"             as regional_partner_group,\n        name                as regional_partner_name,\n        urban               as is_urban,\n        attention,\n        street,\n        apartment_or_suite,\n        city,\n        state,\n        zip_code,\n        -- phone_number,\n        -- notes,\n        created_at,\n        updated_at,\n        -- properties,\n        is_active\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "regional_partners"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.regional_partners"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__regional_partners.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"regional_partners\"\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id                  as regional_partner_id,\n        \"group\"             as regional_partner_group,\n        name                as regional_partner_name,\n        urban               as is_urban,\n        attention,\n        street,\n        apartment_or_suite,\n        city,\n        state,\n        zip_code,\n        -- phone_number,\n        -- notes,\n        created_at,\n        updated_at,\n        -- properties,\n        is_active\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__pd_misc_surveys": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__pd_misc_surveys", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__pd_misc_surveys.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__pd_misc_surveys.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__pd_misc_surveys", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__pd_misc_surveys"], "alias": "base_dashboard_pii__pd_misc_surveys", "checksum": {"name": "sha256", "checksum": "369fa1f0d9822943cac15fd996d724b2c766c5b0a4745f3af137168272e97394"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.1369529, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'pd_misc_surveys') }}\n),\n\nrenamed as (\n    select\n        id as pd_misc_survey_id,\n        form_id,\n        submission_id,\n        -- answers,\n        user_id,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "pd_misc_surveys"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.pd_misc_surveys"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__pd_misc_surveys.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_misc_surveys\"\n),\n\nrenamed as (\n    select\n        id as pd_misc_survey_id,\n        form_id,\n        submission_id,\n        -- answers,\n        user_id,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__pd_survey_questions": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__pd_survey_questions", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__pd_survey_questions.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__pd_survey_questions.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__pd_survey_questions", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__pd_survey_questions"], "alias": "base_dashboard_pii__pd_survey_questions", "checksum": {"name": "sha256", "checksum": "d17cf5f250bc7c921b46225d7747aa01a9e516d0709d5de37bfafb3977b044ad"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.1419923, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'pd_survey_questions') }}\n),\n\nrenamed as (\n    select\n        id as pd_survey_question_id,\n        form_id,\n        questions,\n        created_at,\n        updated_at,\n        last_submission_id\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "pd_survey_questions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.pd_survey_questions"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__pd_survey_questions.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_survey_questions\"\n),\n\nrenamed as (\n    select\n        id as pd_survey_question_id,\n        form_id,\n        questions,\n        created_at,\n        updated_at,\n        last_submission_id\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__foorm_simple_survey_submissions": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__foorm_simple_survey_submissions", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__foorm_simple_survey_submissions.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__foorm_simple_survey_submissions.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__foorm_simple_survey_submissions", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__foorm_simple_survey_submissions"], "alias": "base_dashboard_pii__foorm_simple_survey_submissions", "checksum": {"name": "sha256", "checksum": "1ddcf57e83ea5799936114fec47425f5d1aae83d23a3bf3046cb7271250c4d1b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.1469316, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'foorm_simple_survey_submissions') }}\n),\n\nrenamed as (\n    select\n        id as foorm_simple_survey_submission_id,\n        foorm_submission_id,\n        user_id,\n        simple_survey_form_id,\n        misc_form_path,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "foorm_simple_survey_submissions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.foorm_simple_survey_submissions"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__foorm_simple_survey_submissions.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"foorm_simple_survey_submissions\"\n),\n\nrenamed as (\n    select\n        id as foorm_simple_survey_submission_id,\n        foorm_submission_id,\n        user_id,\n        simple_survey_form_id,\n        misc_form_path,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__pd_international_opt_ins": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__pd_international_opt_ins", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__pd_international_opt_ins.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__pd_international_opt_ins.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__pd_international_opt_ins", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__pd_international_opt_ins"], "alias": "base_dashboard_pii__pd_international_opt_ins", "checksum": {"name": "sha256", "checksum": "9abd942b5719ec4258b9107fe8283b451ea22083502b6be72c153c67ce8c4672"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.1517587, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'pd_international_opt_ins')}}\n),\n\nrenamed as (\n    select \n        id as international_opt_in_id,\n        user_id,\n        form_data,\n        created_at,\n        updated_at\n    from source \n)\n\nselect *\nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "pd_international_opt_ins"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.pd_international_opt_ins"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__pd_international_opt_ins.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_international_opt_ins\"\n),\n\nrenamed as (\n    select \n        id as international_opt_in_id,\n        user_id,\n        form_data,\n        created_at,\n        updated_at\n    from source \n)\n\nselect *\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__pd_workshops": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__pd_workshops", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__pd_workshops.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__pd_workshops.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__pd_workshops", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__pd_workshops"], "alias": "base_dashboard_pii__pd_workshops", "checksum": {"name": "sha256", "checksum": "7ef87cc020ed72952a07b1e8f672f5a333b0e9ef19c78bcfbf9fb3ccc7cf38d6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.1574621, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'pd_workshops') }}\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id                  as pd_workshop_id,\n        organizer_id,\n        location_name,\n        location_address,\n        processed_location,\n        course,\n        subject,\n        capacity,\n        -- notes,\n        section_id,\n        started_at,\n        ended_at,\n        created_at,\n        updated_at,\n        processed_at,\n        regional_partner_id,\n        on_map              as is_on_map,\n        funded              as is_funded,\n        funding_type,\n        -- properties,\n        module -- (js) new col added (see: https://github.com/code-dot-org/code-dot-org/pull/53949/files)\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "pd_workshops"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.pd_workshops"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__pd_workshops.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_workshops\"\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id                  as pd_workshop_id,\n        organizer_id,\n        location_name,\n        location_address,\n        processed_location,\n        course,\n        subject,\n        capacity,\n        -- notes,\n        section_id,\n        started_at,\n        ended_at,\n        created_at,\n        updated_at,\n        processed_at,\n        regional_partner_id,\n        on_map              as is_on_map,\n        funded              as is_funded,\n        funding_type,\n        -- properties,\n        module -- (js) new col added (see: https://github.com/code-dot-org/code-dot-org/pull/53949/files)\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__pd_workshop_facilitator_daily_surveys": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__pd_workshop_facilitator_daily_surveys", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__pd_workshop_facilitator_daily_surveys.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__pd_workshop_facilitator_daily_surveys.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__pd_workshop_facilitator_daily_surveys", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__pd_workshop_facilitator_daily_surveys"], "alias": "base_dashboard_pii__pd_workshop_facilitator_daily_surveys", "checksum": {"name": "sha256", "checksum": "8ddac671980426317fd46238703277f6b61f001a2dc8f5dd8b8440fe23ac9209"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.1623511, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'pd_workshop_facilitator_daily_surveys') }}\n),\n\nrenamed as (\n    select\n        id as pd_workshop_facilitator_daily_survey_id,\n        form_id,\n        submission_id,\n        user_id,\n        pd_session_id,\n        pd_workshop_id,\n        facilitator_id,\n        -- answers,\n        day,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "pd_workshop_facilitator_daily_surveys"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.pd_workshop_facilitator_daily_surveys"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__pd_workshop_facilitator_daily_surveys.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_workshop_facilitator_daily_surveys\"\n),\n\nrenamed as (\n    select\n        id as pd_workshop_facilitator_daily_survey_id,\n        form_id,\n        submission_id,\n        user_id,\n        pd_session_id,\n        pd_workshop_id,\n        facilitator_id,\n        -- answers,\n        day,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__pd_workshops_facilitators": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__pd_workshops_facilitators", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__pd_workshops_facilitators.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__pd_workshops_facilitators.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__pd_workshops_facilitators", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__pd_workshops_facilitators"], "alias": "base_dashboard_pii__pd_workshops_facilitators", "checksum": {"name": "sha256", "checksum": "a5cc90c87e54b89669b972ebcd1e58383c90decad65f0140ca4583111d90dd90"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.1673512, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'pd_workshops_facilitators') }}\n),\n\nrenamed as (\n    select\n        pd_workshop_id,\n        user_id\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "pd_workshops_facilitators"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.pd_workshops_facilitators"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__pd_workshops_facilitators.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_workshops_facilitators\"\n),\n\nrenamed as (\n    select\n        pd_workshop_id,\n        user_id\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__pd_workshop_survey_foorm_submissions": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__pd_workshop_survey_foorm_submissions", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__pd_workshop_survey_foorm_submissions.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__pd_workshop_survey_foorm_submissions.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__pd_workshop_survey_foorm_submissions", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__pd_workshop_survey_foorm_submissions"], "alias": "base_dashboard_pii__pd_workshop_survey_foorm_submissions", "checksum": {"name": "sha256", "checksum": "59c5119f76547d52590838e9b32717d535ce6965437a88b921bfc94bce20e40c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.1721969, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'pd_workshop_survey_foorm_submissions') }}\n),\n\nrenamed as (\n    select\n        id as pd_workshop_survey_foorm_submission_id,\n        foorm_submission_id,\n        user_id,\n        pd_session_id,\n        pd_workshop_id,\n        day,\n        created_at,\n        updated_at,\n        facilitator_id,\n        workshop_agenda\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "pd_workshop_survey_foorm_submissions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.pd_workshop_survey_foorm_submissions"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__pd_workshop_survey_foorm_submissions.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_workshop_survey_foorm_submissions\"\n),\n\nrenamed as (\n    select\n        id as pd_workshop_survey_foorm_submission_id,\n        foorm_submission_id,\n        user_id,\n        pd_session_id,\n        pd_workshop_id,\n        day,\n        created_at,\n        updated_at,\n        facilitator_id,\n        workshop_agenda\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__pd_workshop_daily_surveys": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__pd_workshop_daily_surveys", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__pd_workshop_daily_surveys.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__pd_workshop_daily_surveys.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__pd_workshop_daily_surveys", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__pd_workshop_daily_surveys"], "alias": "base_dashboard_pii__pd_workshop_daily_surveys", "checksum": {"name": "sha256", "checksum": "0a10f3dd44209aa84765b59dc9fabd84e145a7765604f4d6291ea86694b2cabc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.1769888, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'pd_workshop_daily_surveys') }}\n),\n\nrenamed as (\n    select\n        id as pd_workshop_daily_survey_id,\n        form_id,\n        submission_id,\n        user_id,\n        pd_session_id,\n        pd_workshop_id,\n        -- answers,\n        day,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "pd_workshop_daily_surveys"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.pd_workshop_daily_surveys"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__pd_workshop_daily_surveys.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_workshop_daily_surveys\"\n),\n\nrenamed as (\n    select\n        id as pd_workshop_daily_survey_id,\n        form_id,\n        submission_id,\n        user_id,\n        pd_session_id,\n        pd_workshop_id,\n        -- answers,\n        day,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__pd_pre_workshop_surveys": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__pd_pre_workshop_surveys", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__pd_pre_workshop_surveys.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__pd_pre_workshop_surveys.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__pd_pre_workshop_surveys", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__pd_pre_workshop_surveys"], "alias": "base_dashboard_pii__pd_pre_workshop_surveys", "checksum": {"name": "sha256", "checksum": "40450700e3e827de4355128b7a0a084b054506a6a857d7ef7c4dc23923a36d62"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.181829, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'pd_pre_workshop_surveys') }}\n),\n\nrenamed as (\n    select\n        id as pd_pre_workshop_survey_id,\n        pd_enrollment_id,\n        -- form_data,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "pd_pre_workshop_surveys"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.pd_pre_workshop_surveys"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__pd_pre_workshop_surveys.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_pre_workshop_surveys\"\n),\n\nrenamed as (\n    select\n        id as pd_pre_workshop_survey_id,\n        pd_enrollment_id,\n        -- form_data,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__pd_regional_partner_program_registrations": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__pd_regional_partner_program_registrations", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__pd_regional_partner_program_registrations.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__pd_regional_partner_program_registrations.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__pd_regional_partner_program_registrations", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__pd_regional_partner_program_registrations"], "alias": "base_dashboard_pii__pd_regional_partner_program_registrations", "checksum": {"name": "sha256", "checksum": "85aa58249ebabeb3ef052d0d9b84aebd9b225a2aa9424eda7093f77cfc1af570"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.187674, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'pd_regional_partner_program_registrations') }}\n),\n\nrenamed as (\n    select\n        id          as pd_regional_partner_program_registration_id,\n        user_id,\n        -- form_data,\n        teachercon,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "pd_regional_partner_program_registrations"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.pd_regional_partner_program_registrations"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__pd_regional_partner_program_registrations.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_regional_partner_program_registrations\"\n),\n\nrenamed as (\n    select\n        id          as pd_regional_partner_program_registration_id,\n        user_id,\n        -- form_data,\n        teachercon,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__pd_regional_partner_contacts": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__pd_regional_partner_contacts", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__pd_regional_partner_contacts.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__pd_regional_partner_contacts.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__pd_regional_partner_contacts", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__pd_regional_partner_contacts"], "alias": "base_dashboard_pii__pd_regional_partner_contacts", "checksum": {"name": "sha256", "checksum": "cb48f3ce49d5a2cea622677bc8b7ab7215f635ba30c38aa0c9d9cd6477d18b19"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.1924858, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'pd_regional_partner_contacts') }}\n),\n\nrenamed as (\n    select\n        id as pd_regional_partner_contact_id,\n        user_id,\n        regional_partner_id,\n        -- form_data,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "pd_regional_partner_contacts"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.pd_regional_partner_contacts"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__pd_regional_partner_contacts.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_regional_partner_contacts\"\n),\n\nrenamed as (\n    select\n        id as pd_regional_partner_contact_id,\n        user_id,\n        regional_partner_id,\n        -- form_data,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__pd_applications": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__pd_applications", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__pd_applications.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__pd_applications.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__pd_applications", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__pd_applications"], "alias": "base_dashboard_pii__pd_applications", "checksum": {"name": "sha256", "checksum": "d3d65488abdabf3ca469874b980f8f5037d205b4e3332bfa1f76c57b7d12d942"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.197349, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'pd_applications') }}\n    where deleted_at is null\n),\n\nrenamed as (\n    select\n        id  as pd_application_id,\n        user_id,\n        type,\n        application_year,\n        application_type,\n        regional_partner_id,\n        status,\n        locked_at,\n        -- notes,\n        -- form_data,\n        created_at,\n        updated_at,\n        course,\n        response_scores,\n        application_guid,\n        accepted_at,\n        -- properties,\n        status_timestamp_change_log,\n        applied_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "pd_applications"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.pd_applications"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__pd_applications.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_applications\"\n    where deleted_at is null\n),\n\nrenamed as (\n    select\n        id  as pd_application_id,\n        user_id,\n        type,\n        application_year,\n        application_type,\n        regional_partner_id,\n        status,\n        locked_at,\n        -- notes,\n        -- form_data,\n        created_at,\n        updated_at,\n        course,\n        response_scores,\n        application_guid,\n        accepted_at,\n        -- properties,\n        status_timestamp_change_log,\n        applied_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__projects": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__projects", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__projects.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__projects.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__projects", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__projects"], "alias": "base_dashboard_pii__projects", "checksum": {"name": "sha256", "checksum": "7b8bac11447523fdb4633ca33222779e7f66d505f8f55256ade680393133e2c8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.2023382, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'projects') }}\n),\n\nrenamed as (\n    select\n        id                      as project_id,\n        storage_id,\n        value,\n        updated_at,\n        -- updated_ip,\n        state,\n        created_at,\n        abuse_score,\n        project_type,\n        published_at,\n        standalone              as is_standalone,\n        remix_parent_id,\n        skip_content_moderation as is_skip_content_moderation\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "projects"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.projects"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__projects.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"projects\"\n),\n\nrenamed as (\n    select\n        id                      as project_id,\n        storage_id,\n        value,\n        updated_at,\n        -- updated_ip,\n        state,\n        created_at,\n        abuse_score,\n        project_type,\n        published_at,\n        standalone              as is_standalone,\n        remix_parent_id,\n        skip_content_moderation as is_skip_content_moderation\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__pd_enrollments": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__pd_enrollments", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__pd_enrollments.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__pd_enrollments.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__pd_enrollments", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__pd_enrollments"], "alias": "base_dashboard_pii__pd_enrollments", "checksum": {"name": "sha256", "checksum": "9b8fa9f510ab906bff4b67bae3c85e3d01786b1e213672e418737dfe68a061d7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.207188, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'pd_enrollments') }}\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id as pd_enrollment_id,\n        pd_workshop_id,\n        name,\n        -- first_name,\n        -- last_name,\n        -- email,\n        created_at,\n        updated_at,\n        school,\n        code,\n        user_id,\n        survey_sent_at,\n        completed_survey_id,\n        school_info_id,\n        -- properties,\n        application_id\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "pd_enrollments"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.pd_enrollments"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__pd_enrollments.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_enrollments\"\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id as pd_enrollment_id,\n        pd_workshop_id,\n        name,\n        -- first_name,\n        -- last_name,\n        -- email,\n        created_at,\n        updated_at,\n        school,\n        code,\n        user_id,\n        survey_sent_at,\n        completed_survey_id,\n        school_info_id,\n        -- properties,\n        application_id\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__pd_sessions": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__pd_sessions", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__pd_sessions.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__pd_sessions.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__pd_sessions", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__pd_sessions"], "alias": "base_dashboard_pii__pd_sessions", "checksum": {"name": "sha256", "checksum": "3ff8dad4ad0eb439f75f1b074148d77a0a70783c1924daf53819308bd44a4cfc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.21302, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'pd_sessions') }}\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id                  as pd_session_id,\n        pd_workshop_id,\n        \"start\"             as started_at,\n        \"end\"               as ended_at,\n        created_at,\n        updated_at,\n        code\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "pd_sessions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.pd_sessions"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__pd_sessions.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_sessions\"\n    where not deleted_at\n),\n\nrenamed as (\n    select\n        id                  as pd_session_id,\n        pd_workshop_id,\n        \"start\"             as started_at,\n        \"end\"               as ended_at,\n        created_at,\n        updated_at,\n        code\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__pd_post_course_surveys": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__pd_post_course_surveys", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__pd_post_course_surveys.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__pd_post_course_surveys.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__pd_post_course_surveys", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__pd_post_course_surveys"], "alias": "base_dashboard_pii__pd_post_course_surveys", "checksum": {"name": "sha256", "checksum": "cfd3d732556d59a5c2216f79f74dbd1aa5eb52dca2f72a2f6f5bcfe0d164fb0e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.2178469, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'pd_post_course_surveys') }}\n),\n\nrenamed as (\n    select\n        id,\n        form_id,\n        submission_id,\n        -- answers,\n        year,\n        user_id,\n        course,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "pd_post_course_surveys"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.pd_post_course_surveys"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__pd_post_course_surveys.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_post_course_surveys\"\n),\n\nrenamed as (\n    select\n        id,\n        form_id,\n        submission_id,\n        -- answers,\n        year,\n        user_id,\n        course,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__foorm_library_questions": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__foorm_library_questions", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__foorm_library_questions.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__foorm_library_questions.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__foorm_library_questions", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__foorm_library_questions"], "alias": "base_dashboard_pii__foorm_library_questions", "checksum": {"name": "sha256", "checksum": "48e177050bba42fcaf9a681db4d6c68afd14e4bbfb5edaa00a6bfcaa818b04bb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.222653, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'foorm_library_questions') }}\n),\n\nrenamed as (\n    select\n        id          as foorm_library_question_id,\n        library_name,\n        library_version,\n        question_name,\n        question,\n        created_at,\n        updated_at,\n        published   as is_published\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "foorm_library_questions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.foorm_library_questions"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__foorm_library_questions.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"foorm_library_questions\"\n),\n\nrenamed as (\n    select\n        id          as foorm_library_question_id,\n        library_name,\n        library_version,\n        question_name,\n        question,\n        created_at,\n        updated_at,\n        published   as is_published\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard_pii__pd_regional_partner_mini_contacts": {"database": "dev", "schema": "analytics", "name": "base_dashboard_pii__pd_regional_partner_mini_contacts", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard_pii/base/base_dashboard_pii__pd_regional_partner_mini_contacts.sql", "original_file_path": "models/staging/dashboard_pii/base/base_dashboard_pii__pd_regional_partner_mini_contacts.sql", "unique_id": "model.cdo_analytics.base_dashboard_pii__pd_regional_partner_mini_contacts", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "base", "base_dashboard_pii__pd_regional_partner_mini_contacts"], "alias": "base_dashboard_pii__pd_regional_partner_mini_contacts", "checksum": {"name": "sha256", "checksum": "fcb37aa482a738e48b2c1272969171836e13f296bd92f36a7117779f5eedd69a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.2274952, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard_pii', 'pd_regional_partner_mini_contacts') }}\n),\n\nrenamed as (\n    select \n        id as pd_regional_partner_mini_contact_id,\n        user_id,\n        regional_partner_id,\n        -- form_data,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard_pii", "pd_regional_partner_mini_contacts"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard_pii.pd_regional_partner_mini_contacts"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard_pii/base/base_dashboard_pii__pd_regional_partner_mini_contacts.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production_pii\".\"pd_regional_partner_mini_contacts\"\n),\n\nrenamed as (\n    select \n        id as pd_regional_partner_mini_contact_id,\n        user_id,\n        regional_partner_id,\n        -- form_data,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_pegasus_pii__hoc_activity": {"database": "dev", "schema": "analytics", "name": "stg_pegasus_pii__hoc_activity", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/pegasus_pii/stg_pegasus_pii__hoc_activity.sql", "original_file_path": "models/staging/pegasus_pii/stg_pegasus_pii__hoc_activity.sql", "unique_id": "model.cdo_analytics.stg_pegasus_pii__hoc_activity", "fqn": ["cdo_analytics", "staging", "pegasus_pii", "stg_pegasus_pii__hoc_activity"], "alias": "stg_pegasus_pii__hoc_activity", "checksum": {"name": "sha256", "checksum": "965e408db7fe2cc67abb7abcdb1bcae030020e0605f9ebd449fccf25ee33dab2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "hoc_activity_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii"], "description": "staging model for `hoc_activity` source data", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/staging/pegasus_pii/_pegasus_pii__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "incremental", "tags": ["contains_pii"], "unique_key": "hoc_activity_id"}, "created_at": 1705873847.0814629, "relation_name": "\"dev\".\"analytics\".\"stg_pegasus_pii__hoc_activity\"", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key='hoc_activity_id'\n    )\n}}\n\nwith\nhoc_activity as (\n    select\n        hoc_activity_id,\n        referer,\n        company,\n        tutorial,\n        coalesce(started_at, pixel_started_at)                      as started_at,\n        case when pixel_started_at is not null then 1 else 0 end    as is_third_party,\n        country_code,\n        state_code,\n        city,\n        country,\n        state\n    from {{ ref(\"base_pegasus_pii__hoc_activity\") }}\n    {% if is_incremental() %}\n\n    where started_at > (select max(started_at) from {{ this }} )\n    \n    {% endif %}\n)\n\nselect *\nfrom hoc_activity", "language": "sql", "refs": [{"name": "base_pegasus_pii__hoc_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.cdo_analytics.base_pegasus_pii__hoc_activity"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/pegasus_pii/stg_pegasus_pii__hoc_activity.sql", "compiled": true, "compiled_code": "\n\nwith\n __dbt__cte__base_pegasus_pii__hoc_activity as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"pegasus_pii\".\"hoc_activity\"\n),\n\nrenamed as (\n    select\n        id                                      as hoc_activity_id,\n        referer,\n        company,\n        tutorial,\n        started_at,\n        pixel_started_at,\n        country_code,\n        state_code,\n        city,\n        country,\n        state\n    from source\n)\n\nselect * \nfrom renamed\n), hoc_activity as (\n    select\n        hoc_activity_id,\n        referer,\n        company,\n        tutorial,\n        coalesce(started_at, pixel_started_at)                      as started_at,\n        case when pixel_started_at is not null then 1 else 0 end    as is_third_party,\n        country_code,\n        state_code,\n        city,\n        country,\n        state\n    from __dbt__cte__base_pegasus_pii__hoc_activity\n    \n\n    where started_at > (select max(started_at) from \"dev\".\"analytics\".\"stg_pegasus_pii__hoc_activity\" )\n    \n    \n)\n\nselect *\nfrom hoc_activity", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_pegasus_pii__hoc_activity", "sql": " __dbt__cte__base_pegasus_pii__hoc_activity as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"pegasus_pii\".\"hoc_activity\"\n),\n\nrenamed as (\n    select\n        id                                      as hoc_activity_id,\n        referer,\n        company,\n        tutorial,\n        started_at,\n        pixel_started_at,\n        country_code,\n        state_code,\n        city,\n        country,\n        state\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_pegasus_pii__form_geos": {"database": "dev", "schema": "analytics", "name": "stg_pegasus_pii__form_geos", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/pegasus_pii/stg_pegasus_pii__form_geos.sql", "original_file_path": "models/staging/pegasus_pii/stg_pegasus_pii__form_geos.sql", "unique_id": "model.cdo_analytics.stg_pegasus_pii__form_geos", "fqn": ["cdo_analytics", "staging", "pegasus_pii", "stg_pegasus_pii__form_geos"], "alias": "stg_pegasus_pii__form_geos", "checksum": {"name": "sha256", "checksum": "bae820fbfbb78456b0b6a58c5e3b6ec26a5d6a86f20683e86b891a59e88f122c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii"], "description": "staging model for 'form_geos' source data", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/staging/pegasus_pii/_pegasus_pii__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["contains_pii"]}, "created_at": 1705873847.0810628, "relation_name": "\"dev\".\"analytics\".\"stg_pegasus_pii__form_geos\"", "raw_code": "with \nform_geos as (\n    select *\n    from {{ ref('base_pegasus_pii__form_geos') }}\n)\n\nselect * \nfrom form_geos", "language": "sql", "refs": [{"name": "base_pegasus_pii__form_geos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_pegasus_pii__form_geos"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/pegasus_pii/stg_pegasus_pii__form_geos.sql", "compiled": true, "compiled_code": "with \n __dbt__cte__base_pegasus_pii__form_geos as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"pegasus_pii\".\"form_geos\"\n),\n\nrenamed as (\n    select\n        id as form_geo_id,\n        form_id,\n        created_at,\n        updated_at,\n        \n        city,\n        state,\n        country,\n        postal_code\n        \n    from source\n)\n\nselect * \nfrom renamed\n), form_geos as (\n    select *\n    from __dbt__cte__base_pegasus_pii__form_geos\n)\n\nselect * \nfrom form_geos", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_pegasus_pii__form_geos", "sql": " __dbt__cte__base_pegasus_pii__form_geos as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"pegasus_pii\".\"form_geos\"\n),\n\nrenamed as (\n    select\n        id as form_geo_id,\n        form_id,\n        created_at,\n        updated_at,\n        \n        city,\n        state,\n        country,\n        postal_code\n        \n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_pegasus_pii__forms": {"database": "dev", "schema": "analytics", "name": "stg_pegasus_pii__forms", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/pegasus_pii/stg_pegasus_pii__forms.sql", "original_file_path": "models/staging/pegasus_pii/stg_pegasus_pii__forms.sql", "unique_id": "model.cdo_analytics.stg_pegasus_pii__forms", "fqn": ["cdo_analytics", "staging", "pegasus_pii", "stg_pegasus_pii__forms"], "alias": "stg_pegasus_pii__forms", "checksum": {"name": "sha256", "checksum": "cad46bfee9918e2aef71579b512f78f0fd63b1616daa687665d4d6615efa676a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii"], "description": "staging model for 'forms' source data", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/staging/pegasus_pii/_pegasus_pii__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["contains_pii"]}, "created_at": 1705873847.0806198, "relation_name": "\"dev\".\"analytics\".\"stg_pegasus_pii__forms\"", "raw_code": "with \nforms as (\n    select \n        form_id,\n        case\n            when lower(form_kind) like 'hocsignup%' then 'hoc'\n            when lower(form_kind) = 'professionaldevelopmentworkshop' then 'pd'\n            else lower(form_kind)\n        end                                                             as form_category,\n        case \n            when lower(form_kind) like 'hocsignup%' \n            then right(form_kind,4) \n            else null \n        end                                                             as hoc_year,\n        email,\n        name,\n        form_kind,\n        -- form_data,\n        created_at,\n        updated_at,\n        indexed_at,\n        review,\n        reviewed_by,\n        reviewed_at,\n        processed_at,\n        -- processed_data, \n        notified_at,\n        user_id,\n        parent_id,\n        location_country_code,\n        -- form_data_text,  \n        -- processed_data_text,\n        nullif(json_extract_path_text(processed_data_text, 'location_city_s', true), '')      as city,\n        nullif(json_extract_path_text(processed_data_text, 'location_state_s', true), '')     as state,\n        nullif(json_extract_path_text(processed_data_text, 'location_country_s', true), '')   as country,\n        nullif(json_extract_path_text(form_data_text, 'event_type_s', true), '')              as event_type,\n        nullif(json_extract_path_text(form_data_text, 'email_preference_opt_in_s', true), '') as email_pref\n    from {{ ref('base_pegasus_pii__forms') }}\n)\n\nselect * \nfrom forms", "language": "sql", "refs": [{"name": "base_pegasus_pii__forms", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_pegasus_pii__forms"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/pegasus_pii/stg_pegasus_pii__forms.sql", "compiled": true, "compiled_code": "with \n __dbt__cte__base_pegasus_pii__forms as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"pegasus_pii\".\"forms\"\n),\n\nrenamed as (\n    select\n        id                      as form_id,\n        source_id,\n        email,\n        name,\n        kind                    as form_kind,\n        -- data                    as form_data,\n        created_at,\n        updated_at,\n        indexed_at,\n        review,\n        reviewed_by,\n        reviewed_at,\n        processed_at,\n        -- processed_data, \n        notified_at,\n        user_id,\n        parent_id,\n        location_country_code_s as location_country_code,\n        data_text               as form_data_text,  \n        processed_data_text\n    from source\n)\n\nselect * \nfrom renamed\n), forms as (\n    select \n        form_id,\n        case\n            when lower(form_kind) like 'hocsignup%' then 'hoc'\n            when lower(form_kind) = 'professionaldevelopmentworkshop' then 'pd'\n            else lower(form_kind)\n        end                                                             as form_category,\n        case \n            when lower(form_kind) like 'hocsignup%' \n            then right(form_kind,4) \n            else null \n        end                                                             as hoc_year,\n        email,\n        name,\n        form_kind,\n        -- form_data,\n        created_at,\n        updated_at,\n        indexed_at,\n        review,\n        reviewed_by,\n        reviewed_at,\n        processed_at,\n        -- processed_data, \n        notified_at,\n        user_id,\n        parent_id,\n        location_country_code,\n        -- form_data_text,  \n        -- processed_data_text,\n        nullif(json_extract_path_text(processed_data_text, 'location_city_s', true), '')      as city,\n        nullif(json_extract_path_text(processed_data_text, 'location_state_s', true), '')     as state,\n        nullif(json_extract_path_text(processed_data_text, 'location_country_s', true), '')   as country,\n        nullif(json_extract_path_text(form_data_text, 'event_type_s', true), '')              as event_type,\n        nullif(json_extract_path_text(form_data_text, 'email_preference_opt_in_s', true), '') as email_pref\n    from __dbt__cte__base_pegasus_pii__forms\n)\n\nselect * \nfrom forms", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_pegasus_pii__forms", "sql": " __dbt__cte__base_pegasus_pii__forms as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"pegasus_pii\".\"forms\"\n),\n\nrenamed as (\n    select\n        id                      as form_id,\n        source_id,\n        email,\n        name,\n        kind                    as form_kind,\n        -- data                    as form_data,\n        created_at,\n        updated_at,\n        indexed_at,\n        review,\n        reviewed_by,\n        reviewed_at,\n        processed_at,\n        -- processed_data, \n        notified_at,\n        user_id,\n        parent_id,\n        location_country_code_s as location_country_code,\n        data_text               as form_data_text,  \n        processed_data_text\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_pegasus_pii__form_geos": {"database": "dev", "schema": "analytics", "name": "base_pegasus_pii__form_geos", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/pegasus_pii/base/base_pegasus_pii__form_geos.sql", "original_file_path": "models/staging/pegasus_pii/base/base_pegasus_pii__form_geos.sql", "unique_id": "model.cdo_analytics.base_pegasus_pii__form_geos", "fqn": ["cdo_analytics", "staging", "pegasus_pii", "base", "base_pegasus_pii__form_geos"], "alias": "base_pegasus_pii__form_geos", "checksum": {"name": "sha256", "checksum": "ceeb88fb5c77b1062a0fa9e365cf2bafe52bd1f0263cc0eafaf3f435965f34a2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.2522342, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('pegasus_pii', 'form_geos') }}\n),\n\nrenamed as (\n    select\n        id as form_geo_id,\n        form_id,\n        created_at,\n        updated_at,\n        {# ip_address, #}\n        city,\n        state,\n        country,\n        postal_code\n        {# latitude,\n        longitude,\n        indexed_at #}\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["pegasus_pii", "form_geos"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.pegasus_pii.form_geos"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/pegasus_pii/base/base_pegasus_pii__form_geos.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"pegasus_pii\".\"form_geos\"\n),\n\nrenamed as (\n    select\n        id as form_geo_id,\n        form_id,\n        created_at,\n        updated_at,\n        \n        city,\n        state,\n        country,\n        postal_code\n        \n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_pegasus_pii__forms": {"database": "dev", "schema": "analytics", "name": "base_pegasus_pii__forms", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/pegasus_pii/base/base_pegasus_pii__forms.sql", "original_file_path": "models/staging/pegasus_pii/base/base_pegasus_pii__forms.sql", "unique_id": "model.cdo_analytics.base_pegasus_pii__forms", "fqn": ["cdo_analytics", "staging", "pegasus_pii", "base", "base_pegasus_pii__forms"], "alias": "base_pegasus_pii__forms", "checksum": {"name": "sha256", "checksum": "7f90063da6709981cc3e59c36b6f31d31c71597cde5893231e5943ce225b8a10"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.2570662, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('pegasus_pii', 'forms') }}\n),\n\nrenamed as (\n    select\n        id                      as form_id,\n        source_id,\n        email,\n        name,\n        kind                    as form_kind,\n        -- data                    as form_data,\n        created_at,\n        updated_at,\n        indexed_at,\n        review,\n        reviewed_by,\n        reviewed_at,\n        processed_at,\n        -- processed_data, \n        notified_at,\n        user_id,\n        parent_id,\n        location_country_code_s as location_country_code,\n        data_text               as form_data_text,  \n        processed_data_text\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["pegasus_pii", "forms"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.pegasus_pii.forms"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/pegasus_pii/base/base_pegasus_pii__forms.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"pegasus_pii\".\"forms\"\n),\n\nrenamed as (\n    select\n        id                      as form_id,\n        source_id,\n        email,\n        name,\n        kind                    as form_kind,\n        -- data                    as form_data,\n        created_at,\n        updated_at,\n        indexed_at,\n        review,\n        reviewed_by,\n        reviewed_at,\n        processed_at,\n        -- processed_data, \n        notified_at,\n        user_id,\n        parent_id,\n        location_country_code_s as location_country_code,\n        data_text               as form_data_text,  \n        processed_data_text\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_pegasus_pii__hoc_activity": {"database": "dev", "schema": "analytics", "name": "base_pegasus_pii__hoc_activity", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/pegasus_pii/base/base_pegasus_pii__hoc_activity.sql", "original_file_path": "models/staging/pegasus_pii/base/base_pegasus_pii__hoc_activity.sql", "unique_id": "model.cdo_analytics.base_pegasus_pii__hoc_activity", "fqn": ["cdo_analytics", "staging", "pegasus_pii", "base", "base_pegasus_pii__hoc_activity"], "alias": "base_pegasus_pii__hoc_activity", "checksum": {"name": "sha256", "checksum": "d33fdfac318aacd96b695feb8ce4e6fa14fed98271d4f6ef1bed56e50dd9a463"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.2618687, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('pegasus_pii', 'hoc_activity') }}\n),\n\nrenamed as (\n    select\n        id                                      as hoc_activity_id,\n        referer,\n        company,\n        tutorial,\n        started_at,\n        pixel_started_at,\n        country_code,\n        state_code,\n        city,\n        country,\n        state\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["pegasus_pii", "hoc_activity"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.pegasus_pii.hoc_activity"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/pegasus_pii/base/base_pegasus_pii__hoc_activity.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"pegasus_pii\".\"hoc_activity\"\n),\n\nrenamed as (\n    select\n        id                                      as hoc_activity_id,\n        referer,\n        company,\n        tutorial,\n        started_at,\n        pixel_started_at,\n        country_code,\n        state_code,\n        city,\n        country,\n        state\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_legacy_pii__international_partners": {"database": "dev", "schema": "analytics", "name": "stg_legacy_pii__international_partners", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/legacy_pii/stg_legacy_pii__international_partners.sql", "original_file_path": "models/staging/legacy_pii/stg_legacy_pii__international_partners.sql", "unique_id": "model.cdo_analytics.stg_legacy_pii__international_partners", "fqn": ["cdo_analytics", "staging", "legacy_pii", "stg_legacy_pii__international_partners"], "alias": "stg_legacy_pii__international_partners", "checksum": {"name": "sha256", "checksum": "3fff10d3ae9d6c4bf49b92e8048f12bb31130b6bf6836fdd94f450a68b571b63"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii"], "description": "seed file for international partners hosted in s3 (contains pii)", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/staging/legacy_pii/_legacy_pii__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["contains_pii"]}, "created_at": 1705873847.08461, "relation_name": "\"dev\".\"analytics\".\"stg_legacy_pii__international_partners\"", "raw_code": "with \ninternational_partners as (\n    select * \n    from {{ ref('base_legacy_pii__international_partners')}}\n),\n\nrenamed as (\n    select         \n        -- partner data\n        partner_id,\n        partner                                                                             as partner_name,\n        case when partner_type = '' then 'public' else partner_type end                     as partner_type,\n\n        -- country data \n        country_cd                                                                          as country_code,\n        lower(display_name)                                                                 as country_name,\n        lower(alt_name)                                                                     as alt_country_name,\n        region,\n\n        --contact info\n        case when workshop_organizers = '' \n            then 'no partner' \n            else lower(workshop_organizers) end                                             as workshop_organizers,\n        contact_name,\n        contact_email -- @allison is this approved as well? (js) \n        -- exceptions -- unclear if needed, removing for now (js)\n    from international_partners\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [{"name": "base_legacy_pii__international_partners", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_legacy_pii__international_partners"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/legacy_pii/stg_legacy_pii__international_partners.sql", "compiled": true, "compiled_code": "with \n __dbt__cte__base_legacy_pii__international_partners as (\nwith \nsource as (\n      select * \n      from \"dev\".\"analytics_pii\".\"seed_international_partners\"\n)\n\nselect * \nfrom source\n), international_partners as (\n    select * \n    from __dbt__cte__base_legacy_pii__international_partners\n),\n\nrenamed as (\n    select         \n        -- partner data\n        partner_id,\n        partner                                                                             as partner_name,\n        case when partner_type = '' then 'public' else partner_type end                     as partner_type,\n\n        -- country data \n        country_cd                                                                          as country_code,\n        lower(display_name)                                                                 as country_name,\n        lower(alt_name)                                                                     as alt_country_name,\n        region,\n\n        --contact info\n        case when workshop_organizers = '' \n            then 'no partner' \n            else lower(workshop_organizers) end                                             as workshop_organizers,\n        contact_name,\n        contact_email -- @allison is this approved as well? (js) \n        -- exceptions -- unclear if needed, removing for now (js)\n    from international_partners\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_legacy_pii__international_partners", "sql": " __dbt__cte__base_legacy_pii__international_partners as (\nwith \nsource as (\n      select * \n      from \"dev\".\"analytics_pii\".\"seed_international_partners\"\n)\n\nselect * \nfrom source\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_legacy_pii__international_partners": {"database": "dev", "schema": "analytics", "name": "base_legacy_pii__international_partners", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/legacy_pii/base/base_legacy_pii__international_partners.sql", "original_file_path": "models/staging/legacy_pii/base/base_legacy_pii__international_partners.sql", "unique_id": "model.cdo_analytics.base_legacy_pii__international_partners", "fqn": ["cdo_analytics", "staging", "legacy_pii", "base", "base_legacy_pii__international_partners"], "alias": "base_legacy_pii__international_partners", "checksum": {"name": "sha256", "checksum": "09c3ca12a300f2f5017c0aa91c67436c119cfbb239a3cba06212706215705132"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "contains_pii", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "contains_pii", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.2721846, "relation_name": null, "raw_code": "with \nsource as (\n      select * \n      from {{ source('legacy_pii', 'seed_international_partners') }}\n)\n\nselect * \nfrom source", "language": "sql", "refs": [], "sources": [["legacy_pii", "seed_international_partners"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.legacy_pii.seed_international_partners"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/legacy_pii/base/base_legacy_pii__international_partners.sql", "compiled": true, "compiled_code": "with \nsource as (\n      select * \n      from \"dev\".\"analytics_pii\".\"seed_international_partners\"\n)\n\nselect * \nfrom source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard__scripts": {"database": "dev", "schema": "analytics", "name": "stg_dashboard__scripts", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/stg_dashboard__scripts.sql", "original_file_path": "models/staging/dashboard/stg_dashboard__scripts.sql", "unique_id": "model.cdo_analytics.stg_dashboard__scripts", "fqn": ["cdo_analytics", "staging", "dashboard", "stg_dashboard__scripts"], "alias": "stg_dashboard__scripts", "checksum": {"name": "sha256", "checksum": "78976d4468cc3d453a00a2ba28840b3b4d77d668f0dc4cc961479c365da79821"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["staging"]}, "created_at": 1705873846.2768133, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard__scripts\"", "raw_code": "with\nscripts as (\n    select\n        script_id,\n        script_name,\n        created_at,\n        updated_at,\n        wrapup_video_id,\n        user_id,\n        login_required,\n        new_name,\n        family_name,\n        published_state,\n        instruction_type,\n        instructor_audience,\n        participant_audience,\n        case\n            when lower(script_name) like 'devices-20__'                         then 'csd'\n            when lower(script_name) like 'microbit%'                            then 'csd'\n            when lower(script_name) like '%hello%'                              then 'hoc'\n            when lower(script_name) like 'csd-post-survey-20__'                 then 'csd'\n            when lower(script_name) like 'csp-post-survey-20__'                 then 'csp'\n            when\n                json_extract_path_text(properties, 'curriculum_umbrella') = ''  then 'other'\n            else\n                lower(json_extract_path_text(properties, 'curriculum_umbrella'))\n        end as course_name_true,\n        json_extract_path_text(properties, 'supported_locales') as supported_locales\n    from {{ ref('base_dashboard__scripts') }}\n)\nselect * from scripts", "language": "sql", "refs": [{"name": "base_dashboard__scripts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_dashboard__scripts"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/stg_dashboard__scripts.sql", "compiled": true, "compiled_code": "with\n __dbt__cte__base_dashboard__scripts as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"scripts\"\n),\n\nrenamed as (\n    select\n        id as script_id,\n        name as script_name,\n        created_at,\n        updated_at,\n        wrapup_video_id,\n        user_id,\n        login_required,\n        properties,\n        new_name,\n        family_name,\n        published_state,\n        instruction_type,\n        instructor_audience,\n        participant_audience\n    from source\n)\n\nselect * \nfrom renamed\n), scripts as (\n    select\n        script_id,\n        script_name,\n        created_at,\n        updated_at,\n        wrapup_video_id,\n        user_id,\n        login_required,\n        new_name,\n        family_name,\n        published_state,\n        instruction_type,\n        instructor_audience,\n        participant_audience,\n        case\n            when lower(script_name) like 'devices-20__'                         then 'csd'\n            when lower(script_name) like 'microbit%'                            then 'csd'\n            when lower(script_name) like '%hello%'                              then 'hoc'\n            when lower(script_name) like 'csd-post-survey-20__'                 then 'csd'\n            when lower(script_name) like 'csp-post-survey-20__'                 then 'csp'\n            when\n                json_extract_path_text(properties, 'curriculum_umbrella') = ''  then 'other'\n            else\n                lower(json_extract_path_text(properties, 'curriculum_umbrella'))\n        end as course_name_true,\n        json_extract_path_text(properties, 'supported_locales') as supported_locales\n    from __dbt__cte__base_dashboard__scripts\n)\nselect * from scripts", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard__scripts", "sql": " __dbt__cte__base_dashboard__scripts as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"scripts\"\n),\n\nrenamed as (\n    select\n        id as script_id,\n        name as script_name,\n        created_at,\n        updated_at,\n        wrapup_video_id,\n        user_id,\n        login_required,\n        properties,\n        new_name,\n        family_name,\n        published_state,\n        instruction_type,\n        instructor_audience,\n        participant_audience\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard__school_stats_by_years": {"database": "dev", "schema": "analytics", "name": "stg_dashboard__school_stats_by_years", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/stg_dashboard__school_stats_by_years.sql", "original_file_path": "models/staging/dashboard/stg_dashboard__school_stats_by_years.sql", "unique_id": "model.cdo_analytics.stg_dashboard__school_stats_by_years", "fqn": ["cdo_analytics", "staging", "dashboard", "stg_dashboard__school_stats_by_years"], "alias": "stg_dashboard__school_stats_by_years", "checksum": {"name": "sha256", "checksum": "df0a535c14ad1df2cb3e6c5aaf33a84f51c3f01640eb3e32bd116030786b50dd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging"], "description": "staging model for `school_stats_by_years` source data", "columns": {"school_id": {"name": "school_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/staging/dashboard/_dashboard__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["staging"]}, "created_at": 1705873847.0887923, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard__school_stats_by_years\"", "raw_code": "with \nschool_stats_by_years as (\n    select * \n    from {{ ref('base_dashboard__school_stats_by_years') }}\n),\n\nsurvey_years as (\n    select school_id,\n        min(school_year) as first_survey_year,\n        max(school_year) as survey_year\n    from school_stats_by_years  \n{{ dbt_utils.group_by(1) }}\n),\n\nschool_stats_2019_2020 as (\n    select school_id,\n        total_students,\n        total_frl_eligible_students\n    from school_stats_by_years\n    where school_year = '2019-2020'\n),\n\nschool_stats_by_years_adjusted as (\n    select \n        ssby.school_id,\n        school_year,\n        survey_year,\n        first_survey_year,\n        grades_offered_lo,\n        grades_offered_hi,\n        is_grade_pk,\n        is_grade_kg,\n        is_grade_01,\n        is_grade_02,\n        is_grade_03,\n        is_grade_04,\n        is_grade_05,\n        is_grade_06,\n        is_grade_07,\n        is_grade_08,\n        is_grade_09,\n        is_grade_10,\n        is_grade_11,\n        is_grade_12,\n        is_grade_13,\n        virtual_status,\n        title_i_status,\n\n        -- adjust for frl stop-gap logic\n        nullif(\n            case when survey_years.survey_year = '2020-2021'\n                and ssby.total_students is null \n                    then ssby2.total_students\n                else ssby.total_students\n        end, 0) as total_students,\n\n        count_student_am,\n        count_student_as,\n        count_student_hi,\n        count_student_bl,\n        count_student_wh,\n        count_student_hp,\n        count_student_tr,\n\n        -- adjustment for FRL logic\n        case when survey_year = '2020-2021'\n             and ssby.total_frl_eligible_students is null \n                then ssby2.total_frl_eligible_students\n            else ssby.total_frl_eligible_students \n        end as total_frl_eligible_students,\n\n        created_at,\n        updated_at,\n        community_type,\n\n        case when title_i_status in (1,2,3,4,5) \n                then 1\n            when title_i_status = 6 \n                then 0\n        end as is_title_i,\n\n        case when community_type in (\n                    'rural_fringe',\n                    'rural_distant',\n                    'rural_remote',\n                    'town_remote',\n                    'town_distant')\n                then 1 \n            when community_type is not null \n                then 0\n        end as is_rural,\n\n        case when grades_offered_lo is null then null \n             when grades_offered_lo in (\n                    '01',\n                    '02',\n                    '03',\n                    '04',\n                    '05',\n                    'PK',\n                    'KG')\n                then 1\n             when coalesce(\n                is_grade_pk,\n                is_grade_kg,\n                is_grade_01,\n                is_grade_02,\n                is_grade_03,\n                is_grade_04,\n                is_grade_04,\n                is_grade_05\n                ) = 1 then 1\n            else 0 \n        end as is_stage_el,\n        \n        case when grades_offered_lo = 'pk'\n              and grades_offered_hi = '06'\n                then 0\n             when grades_offered_lo = 'kg'\n              and grades_offered_hi = '06'\n                then 0\n             when coalesce(is_grade_06,is_grade_07,is_grade_08) = 1\n                then 1\n             when (grades_offered_lo in ('06','07','08')\n                or grades_offered_hi in ('06','07','08'))\n                then 1\n             when grades_offered_lo is null then null \n            else 0 \n        end as is_stage_mi,\n        \n        case when coalesce(\n                is_grade_09,\n                is_grade_10,\n                is_grade_11,\n                is_grade_12,\n                is_grade_13\n                ) = 1 then 1 \n             when grades_offered_hi in (\n                '09',\n                '10',\n                '11',\n                '12'\n             ) then 1 \n             when grades_offered_hi is null then null \n            else 0 \n        end as is_stage_hi \n\n    from school_stats_by_years as ssby\n    left join school_stats_2019_2020 as ssby2 \n        on ssby.school_id = ssby2.school_id\n    left join survey_years \n        on ssby.school_id = survey_years.school_id\n)\n\nselect * \nfrom school_stats_by_years_adjusted", "language": "sql", "refs": [{"name": "base_dashboard__school_stats_by_years", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.cdo_analytics.base_dashboard__school_stats_by_years"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/stg_dashboard__school_stats_by_years.sql", "compiled": true, "compiled_code": "with \n __dbt__cte__base_dashboard__school_stats_by_years as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"school_stats_by_years\"\n),\n\nrenamed as (\n    select\n        school_id,\n        school_year,\n\n        lower(grades_offered_lo) as grades_offered_lo,\n        lower(grades_offered_hi) as grades_offered_hi,\n        \n        grade_pk_offered    as is_grade_pk,\n        grade_kg_offered    as is_grade_kg,\n        grade_01_offered    as is_grade_01,\n        grade_02_offered    as is_grade_02,\n        grade_03_offered    as is_grade_03,\n        grade_04_offered    as is_grade_04,\n        grade_05_offered    as is_grade_05,\n        grade_06_offered    as is_grade_06,\n        grade_07_offered    as is_grade_07,\n        grade_08_offered    as is_grade_08,\n        grade_09_offered    as is_grade_09,\n        grade_10_offered    as is_grade_10,\n        grade_11_offered    as is_grade_11,\n        grade_12_offered    as is_grade_12,\n        grade_13_offered    as is_grade_13,\n        \n        community_type,\n        virtual_status,\n        title_i_status,\n        \n        coalesce(students_total,0)      as total_students,\n        coalesce(student_am_count,0)    as count_student_am,\n        coalesce(student_as_count,0)    as count_student_as,\n        coalesce(student_hi_count,0)    as count_student_hi,\n        coalesce(student_bl_count,0)    as count_student_bl,\n        coalesce(student_wh_count,0)    as count_student_wh,\n        coalesce(student_hp_count,0)    as count_student_hp,\n        coalesce(student_tr_count,0)    as count_student_tr,\n        coalesce(frl_eligible_total,0)  as total_frl_eligible_students,\n        \n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed\n), school_stats_by_years as (\n    select * \n    from __dbt__cte__base_dashboard__school_stats_by_years\n),\n\nsurvey_years as (\n    select school_id,\n        min(school_year) as first_survey_year,\n        max(school_year) as survey_year\n    from school_stats_by_years  \ngroup by 1\n),\n\nschool_stats_2019_2020 as (\n    select school_id,\n        total_students,\n        total_frl_eligible_students\n    from school_stats_by_years\n    where school_year = '2019-2020'\n),\n\nschool_stats_by_years_adjusted as (\n    select \n        ssby.school_id,\n        school_year,\n        survey_year,\n        first_survey_year,\n        grades_offered_lo,\n        grades_offered_hi,\n        is_grade_pk,\n        is_grade_kg,\n        is_grade_01,\n        is_grade_02,\n        is_grade_03,\n        is_grade_04,\n        is_grade_05,\n        is_grade_06,\n        is_grade_07,\n        is_grade_08,\n        is_grade_09,\n        is_grade_10,\n        is_grade_11,\n        is_grade_12,\n        is_grade_13,\n        virtual_status,\n        title_i_status,\n\n        -- adjust for frl stop-gap logic\n        nullif(\n            case when survey_years.survey_year = '2020-2021'\n                and ssby.total_students is null \n                    then ssby2.total_students\n                else ssby.total_students\n        end, 0) as total_students,\n\n        count_student_am,\n        count_student_as,\n        count_student_hi,\n        count_student_bl,\n        count_student_wh,\n        count_student_hp,\n        count_student_tr,\n\n        -- adjustment for FRL logic\n        case when survey_year = '2020-2021'\n             and ssby.total_frl_eligible_students is null \n                then ssby2.total_frl_eligible_students\n            else ssby.total_frl_eligible_students \n        end as total_frl_eligible_students,\n\n        created_at,\n        updated_at,\n        community_type,\n\n        case when title_i_status in (1,2,3,4,5) \n                then 1\n            when title_i_status = 6 \n                then 0\n        end as is_title_i,\n\n        case when community_type in (\n                    'rural_fringe',\n                    'rural_distant',\n                    'rural_remote',\n                    'town_remote',\n                    'town_distant')\n                then 1 \n            when community_type is not null \n                then 0\n        end as is_rural,\n\n        case when grades_offered_lo is null then null \n             when grades_offered_lo in (\n                    '01',\n                    '02',\n                    '03',\n                    '04',\n                    '05',\n                    'PK',\n                    'KG')\n                then 1\n             when coalesce(\n                is_grade_pk,\n                is_grade_kg,\n                is_grade_01,\n                is_grade_02,\n                is_grade_03,\n                is_grade_04,\n                is_grade_04,\n                is_grade_05\n                ) = 1 then 1\n            else 0 \n        end as is_stage_el,\n        \n        case when grades_offered_lo = 'pk'\n              and grades_offered_hi = '06'\n                then 0\n             when grades_offered_lo = 'kg'\n              and grades_offered_hi = '06'\n                then 0\n             when coalesce(is_grade_06,is_grade_07,is_grade_08) = 1\n                then 1\n             when (grades_offered_lo in ('06','07','08')\n                or grades_offered_hi in ('06','07','08'))\n                then 1\n             when grades_offered_lo is null then null \n            else 0 \n        end as is_stage_mi,\n        \n        case when coalesce(\n                is_grade_09,\n                is_grade_10,\n                is_grade_11,\n                is_grade_12,\n                is_grade_13\n                ) = 1 then 1 \n             when grades_offered_hi in (\n                '09',\n                '10',\n                '11',\n                '12'\n             ) then 1 \n             when grades_offered_hi is null then null \n            else 0 \n        end as is_stage_hi \n\n    from school_stats_by_years as ssby\n    left join school_stats_2019_2020 as ssby2 \n        on ssby.school_id = ssby2.school_id\n    left join survey_years \n        on ssby.school_id = survey_years.school_id\n)\n\nselect * \nfrom school_stats_by_years_adjusted", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard__school_stats_by_years", "sql": " __dbt__cte__base_dashboard__school_stats_by_years as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"school_stats_by_years\"\n),\n\nrenamed as (\n    select\n        school_id,\n        school_year,\n\n        lower(grades_offered_lo) as grades_offered_lo,\n        lower(grades_offered_hi) as grades_offered_hi,\n        \n        grade_pk_offered    as is_grade_pk,\n        grade_kg_offered    as is_grade_kg,\n        grade_01_offered    as is_grade_01,\n        grade_02_offered    as is_grade_02,\n        grade_03_offered    as is_grade_03,\n        grade_04_offered    as is_grade_04,\n        grade_05_offered    as is_grade_05,\n        grade_06_offered    as is_grade_06,\n        grade_07_offered    as is_grade_07,\n        grade_08_offered    as is_grade_08,\n        grade_09_offered    as is_grade_09,\n        grade_10_offered    as is_grade_10,\n        grade_11_offered    as is_grade_11,\n        grade_12_offered    as is_grade_12,\n        grade_13_offered    as is_grade_13,\n        \n        community_type,\n        virtual_status,\n        title_i_status,\n        \n        coalesce(students_total,0)      as total_students,\n        coalesce(student_am_count,0)    as count_student_am,\n        coalesce(student_as_count,0)    as count_student_as,\n        coalesce(student_hi_count,0)    as count_student_hi,\n        coalesce(student_bl_count,0)    as count_student_bl,\n        coalesce(student_wh_count,0)    as count_student_wh,\n        coalesce(student_hp_count,0)    as count_student_hp,\n        coalesce(student_tr_count,0)    as count_student_tr,\n        coalesce(frl_eligible_total,0)  as total_frl_eligible_students,\n        \n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard__sections": {"database": "dev", "schema": "analytics", "name": "stg_dashboard__sections", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/stg_dashboard__sections.sql", "original_file_path": "models/staging/dashboard/stg_dashboard__sections.sql", "unique_id": "model.cdo_analytics.stg_dashboard__sections", "fqn": ["cdo_analytics", "staging", "dashboard", "stg_dashboard__sections"], "alias": "stg_dashboard__sections", "checksum": {"name": "sha256", "checksum": "ebdeda187a8aeb8c8f6035814ec46409e71904f8f3f44ab1a508313300e7274f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging"], "description": "staging model for `sections` source data", "columns": {"section_id": {"name": "section_id", "description": "unique id for each section", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/staging/dashboard/_dashboard__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["staging"]}, "created_at": 1705873847.0874906, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard__sections\"", "raw_code": "with \nsections as (\n    select *\n    from {{ ref('base_dashboard__sections') }}\n)\n\nselect * \nfrom sections", "language": "sql", "refs": [{"name": "base_dashboard__sections", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_dashboard__sections"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/stg_dashboard__sections.sql", "compiled": true, "compiled_code": "with \n __dbt__cte__base_dashboard__sections as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"sections\"\n    where deleted_at is null  \n),\n\nrenamed as (\n    select\n        -- section data\n        id                      as section_id,\n        name                    as section_name,\n        section_type,\n\n        user_id,\n        login_type,\n        code,\n        script_id,\n        course_id,\n        grade,\n        \n        -- flags \n        stage_extras            as is_stage_extras,\n        pairing_allowed         as is_pairing_allowed,\n        sharing_disabled        as is_sharing_disabled,\n        hidden                  as is_hidden,\n        tts_autoplay_enabled    as is_tts_autoplay_enabled,\n        restrict_section        as is_restrict_section,\n        participant_type,\n        -- properties,\n        \n        -- timestamps\n        created_at,\n        updated_at,\n        first_activity_at\n    from source\n)\n\nselect * \nfrom renamed\n), sections as (\n    select *\n    from __dbt__cte__base_dashboard__sections\n)\n\nselect * \nfrom sections", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard__sections", "sql": " __dbt__cte__base_dashboard__sections as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"sections\"\n    where deleted_at is null  \n),\n\nrenamed as (\n    select\n        -- section data\n        id                      as section_id,\n        name                    as section_name,\n        section_type,\n\n        user_id,\n        login_type,\n        code,\n        script_id,\n        course_id,\n        grade,\n        \n        -- flags \n        stage_extras            as is_stage_extras,\n        pairing_allowed         as is_pairing_allowed,\n        sharing_disabled        as is_sharing_disabled,\n        hidden                  as is_hidden,\n        tts_autoplay_enabled    as is_tts_autoplay_enabled,\n        restrict_section        as is_restrict_section,\n        participant_type,\n        -- properties,\n        \n        -- timestamps\n        created_at,\n        updated_at,\n        first_activity_at\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard__stages": {"database": "dev", "schema": "analytics", "name": "stg_dashboard__stages", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/stg_dashboard__stages.sql", "original_file_path": "models/staging/dashboard/stg_dashboard__stages.sql", "unique_id": "model.cdo_analytics.stg_dashboard__stages", "fqn": ["cdo_analytics", "staging", "dashboard", "stg_dashboard__stages"], "alias": "stg_dashboard__stages", "checksum": {"name": "sha256", "checksum": "0cf2f718376c7311341cec9e1498105b788912fea3ac1dffe095e42f831f97e2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["staging"]}, "created_at": 1705873846.2948403, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard__stages\"", "raw_code": "with \nstages as (\n    select \n        stage_id,\n        stage_name,\n        case when is_lockable = 1 then absolute_position else relative_position end as stage_number,\n        absolute_position,\n        script_id,\n        created_at,\n        updated_at,\n        is_lockable,\n        relative_position,\n        -- properties,\n        lesson_group_id,\n        key,\n        has_lesson_plan        \n    from {{ ref('base_dashboard__stages') }}\n)\n\nselect * \nfrom stages", "language": "sql", "refs": [{"name": "base_dashboard__stages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_dashboard__stages"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/stg_dashboard__stages.sql", "compiled": true, "compiled_code": "with \n __dbt__cte__base_dashboard__stages as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"stages\"\n),\n\nrenamed as (\n    select\n        id                  as stage_id,\n        name                as stage_name,\n        absolute_position,\n        script_id,\n        created_at,\n        updated_at,\n        lockable            as is_lockable,\n        relative_position,\n        -- properties,\n        lesson_group_id,\n        key,\n        has_lesson_plan\n    from source\n)\n\nselect * \nfrom renamed\n), stages as (\n    select \n        stage_id,\n        stage_name,\n        case when is_lockable = 1 then absolute_position else relative_position end as stage_number,\n        absolute_position,\n        script_id,\n        created_at,\n        updated_at,\n        is_lockable,\n        relative_position,\n        -- properties,\n        lesson_group_id,\n        key,\n        has_lesson_plan        \n    from __dbt__cte__base_dashboard__stages\n)\n\nselect * \nfrom stages", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard__stages", "sql": " __dbt__cte__base_dashboard__stages as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"stages\"\n),\n\nrenamed as (\n    select\n        id                  as stage_id,\n        name                as stage_name,\n        absolute_position,\n        script_id,\n        created_at,\n        updated_at,\n        lockable            as is_lockable,\n        relative_position,\n        -- properties,\n        lesson_group_id,\n        key,\n        has_lesson_plan\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard__school_infos": {"database": "dev", "schema": "analytics", "name": "stg_dashboard__school_infos", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/stg_dashboard__school_infos.sql", "original_file_path": "models/staging/dashboard/stg_dashboard__school_infos.sql", "unique_id": "model.cdo_analytics.stg_dashboard__school_infos", "fqn": ["cdo_analytics", "staging", "dashboard", "stg_dashboard__school_infos"], "alias": "stg_dashboard__school_infos", "checksum": {"name": "sha256", "checksum": "0622a7537206713ecae1a52dc6fdc21d199d0ae4893688c75b93b2bd4af6cf6f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["staging"]}, "created_at": 1705873846.299696, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard__school_infos\"", "raw_code": "with \nschool_infos as (\n    select * \n    from {{ ref('base_dashboard__school_infos')}}\n)\n\nselect * \nfrom school_infos", "language": "sql", "refs": [{"name": "base_dashboard__school_infos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_dashboard__school_infos"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/stg_dashboard__school_infos.sql", "compiled": true, "compiled_code": "with \n __dbt__cte__base_dashboard__school_infos as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"school_infos\"\n),\n\nrenamed as (\n    select\n        id as school_info_id,\n        country,\n        school_type,\n        zip,\n        state,\n        school_district_id,\n        school_district_other,\n        school_district_name,\n        school_id,\n        school_other,\n        school_name,\n        full_address,\n        created_at,\n        updated_at,\n        validation_type\n    from source\n)\n\nselect * \nfrom renamed\n), school_infos as (\n    select * \n    from __dbt__cte__base_dashboard__school_infos\n)\n\nselect * \nfrom school_infos", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard__school_infos", "sql": " __dbt__cte__base_dashboard__school_infos as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"school_infos\"\n),\n\nrenamed as (\n    select\n        id as school_info_id,\n        country,\n        school_type,\n        zip,\n        state,\n        school_district_id,\n        school_district_other,\n        school_district_name,\n        school_id,\n        school_other,\n        school_name,\n        full_address,\n        created_at,\n        updated_at,\n        validation_type\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard__users": {"database": "dev", "schema": "analytics", "name": "stg_dashboard__users", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/stg_dashboard__users.sql", "original_file_path": "models/staging/dashboard/stg_dashboard__users.sql", "unique_id": "model.cdo_analytics.stg_dashboard__users", "fqn": ["cdo_analytics", "staging", "dashboard", "stg_dashboard__users"], "alias": "stg_dashboard__users", "checksum": {"name": "sha256", "checksum": "f799902bf15afcae70e4a75721a77fe5d6d2d80449366517e7925d46bed42dc8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "user_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "incremental", "tags": ["staging"], "unique_key": "user_id"}, "created_at": 1705873846.3053935, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard__users\"", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key='user_id')\n}}\n\nwith \nusers as (\n    select *\n    from {{ ref('base_dashboard__users') }}\n    where is_active\n\n    {% if is_incremental() %}\n\n    and updated_at > (select max(updated_at) from {{ this }} )\n    \n    {% endif %}\n),\n\nrenamed as (\n    select \n        -- PK\n        user_id,\n\n        -- FK's\n        case when user_type = 'student' then user_id end as student_id,\n        case when user_type = 'teacher' then user_id end as teacher_id,\n        studio_person_id,\n\n        -- user info\n        user_type,\n        datediff(year,birthday,current_date ) as age_years,\n        nullif(lower(gender),'') as gender,\n        is_urg,\n\n        -- misc.\n        locale,\n        sign_in_count,\n        school_info_id,\n        total_lines,\n\n        -- dates         \n        current_sign_in_at,\n        last_sign_in_at,\n        created_at,\n        updated_at,  \n        deleted_at,   \n        purged_at\n    from users\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [{"name": "base_dashboard__users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.cdo_analytics.base_dashboard__users"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/stg_dashboard__users.sql", "compiled": true, "compiled_code": "\n\nwith \n __dbt__cte__base_dashboard__users as (\nwith \nsource as (\n      select * \n      from \"dashboard\".\"dashboard_production\".\"users\"\n      --where deleted_at is null \n),\n\nrenamed as (\n    select\n        id                          as user_id,\n        studio_person_id,\n        sign_in_count,\n        current_sign_in_at,\n        last_sign_in_at,\n        created_at,\n        updated_at,\n        deleted_at,        \n        gender,\n        locale,\n        birthday,\n        user_type,\n        school_info_id,\n        total_lines,\n        active                      as is_active,\n        purged_at,\n        urm                         as is_urg,\n        races,\n        primary_contact_info_id\n    from source\n)\n\nselect * \nfrom renamed\n), users as (\n    select *\n    from __dbt__cte__base_dashboard__users\n    where is_active\n\n    \n\n    and updated_at > (select max(updated_at) from \"dev\".\"analytics\".\"stg_dashboard__users\" )\n    \n    \n),\n\nrenamed as (\n    select \n        -- PK\n        user_id,\n\n        -- FK's\n        case when user_type = 'student' then user_id end as student_id,\n        case when user_type = 'teacher' then user_id end as teacher_id,\n        studio_person_id,\n\n        -- user info\n        user_type,\n        datediff(year,birthday,current_date ) as age_years,\n        nullif(lower(gender),'') as gender,\n        is_urg,\n\n        -- misc.\n        locale,\n        sign_in_count,\n        school_info_id,\n        total_lines,\n\n        -- dates         \n        current_sign_in_at,\n        last_sign_in_at,\n        created_at,\n        updated_at,  \n        deleted_at,   \n        purged_at\n    from users\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard__users", "sql": " __dbt__cte__base_dashboard__users as (\nwith \nsource as (\n      select * \n      from \"dashboard\".\"dashboard_production\".\"users\"\n      --where deleted_at is null \n),\n\nrenamed as (\n    select\n        id                          as user_id,\n        studio_person_id,\n        sign_in_count,\n        current_sign_in_at,\n        last_sign_in_at,\n        created_at,\n        updated_at,\n        deleted_at,        \n        gender,\n        locale,\n        birthday,\n        user_type,\n        school_info_id,\n        total_lines,\n        active                      as is_active,\n        purged_at,\n        urm                         as is_urg,\n        races,\n        primary_contact_info_id\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard__followers": {"database": "dev", "schema": "analytics", "name": "stg_dashboard__followers", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/stg_dashboard__followers.sql", "original_file_path": "models/staging/dashboard/stg_dashboard__followers.sql", "unique_id": "model.cdo_analytics.stg_dashboard__followers", "fqn": ["cdo_analytics", "staging", "dashboard", "stg_dashboard__followers"], "alias": "stg_dashboard__followers", "checksum": {"name": "sha256", "checksum": "133e1b884a828c625b18406fe32afbd49402f75ee1cd292d09918d0663e966c4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging"], "description": "staging model for followers source data", "columns": {"follower_id": {"name": "follower_id", "description": "unique id for table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "student_id": {"name": "student_id", "description": "fk for individual student user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/staging/dashboard/_dashboard__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["staging"]}, "created_at": 1705873847.0858996, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard__followers\"", "raw_code": "with \nfollowers as (\n    select * \n    from {{ref('base_dashboard__followers')}}\n)\n\nselect * \nfrom followers", "language": "sql", "refs": [{"name": "base_dashboard__followers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_dashboard__followers"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/stg_dashboard__followers.sql", "compiled": true, "compiled_code": "with \n __dbt__cte__base_dashboard__followers as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"followers\"\n    where deleted_at is null \n),\n\nrenamed as (\n    select\n        id as follower_id,\n        student_user_id as student_id,\n        section_id,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed\n), followers as (\n    select * \n    from __dbt__cte__base_dashboard__followers\n)\n\nselect * \nfrom followers", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard__followers", "sql": " __dbt__cte__base_dashboard__followers as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"followers\"\n    where deleted_at is null \n),\n\nrenamed as (\n    select\n        id as follower_id,\n        student_user_id as student_id,\n        section_id,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard__schools": {"database": "dev", "schema": "analytics", "name": "stg_dashboard__schools", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/stg_dashboard__schools.sql", "original_file_path": "models/staging/dashboard/stg_dashboard__schools.sql", "unique_id": "model.cdo_analytics.stg_dashboard__schools", "fqn": ["cdo_analytics", "staging", "dashboard", "stg_dashboard__schools"], "alias": "stg_dashboard__schools", "checksum": {"name": "sha256", "checksum": "737241dd2683149e01799bec1ce3d8ff2fe7a62cfb21d0361a2a54ae02ac7454"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging"], "description": "staging model for core school data, where len(school_id)=11 we are applying a LPAD to maintain school length convention", "columns": {"school_id": {"name": "school_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/staging/dashboard/_dashboard__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["staging"]}, "created_at": 1705873847.088252, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard__schools\"", "raw_code": "with schools as (\n    select *\n    from {{ ref('base_dashboard__schools') }}\n),\n\nfinal as (\n    select \n        case when len(school_id) = 11 \n             then lpad(school_id,12,'0') -- (js) adjustment to compensate for application dropping leading zeroes\n        else school_id \n        end as school_id,\n        school_district_id,\n        school_name,\n        city,\n        state,\n        zip,\n        school_type,\n        created_at,\n        updated_at,\n        address_line1,\n        address_line2,\n        address_line3,\n        latitude,\n        longitude,\n        school_category,\n        last_known_school_year_open\nfrom schools\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "base_dashboard__schools", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_dashboard__schools"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/stg_dashboard__schools.sql", "compiled": true, "compiled_code": "with  __dbt__cte__base_dashboard__schools as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"schools\"\n),\n\nrenamed as (\n    select\n        id                  as school_id,\n        school_district_id,\n        name                as school_name,\n        city,\n        state,\n        zip,\n        school_type,\n        created_at,\n        updated_at,\n        address_line1,\n        address_line2,\n        address_line3,\n        latitude,\n        longitude,\n        school_category,\n        last_known_school_year_open\n    from source\n)\n\nselect * \nfrom renamed\n), schools as (\n    select *\n    from __dbt__cte__base_dashboard__schools\n),\n\nfinal as (\n    select \n        case when len(school_id) = 11 \n             then lpad(school_id,12,'0') -- (js) adjustment to compensate for application dropping leading zeroes\n        else school_id \n        end as school_id,\n        school_district_id,\n        school_name,\n        city,\n        state,\n        zip,\n        school_type,\n        created_at,\n        updated_at,\n        address_line1,\n        address_line2,\n        address_line3,\n        latitude,\n        longitude,\n        school_category,\n        last_known_school_year_open\nfrom schools\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard__schools", "sql": " __dbt__cte__base_dashboard__schools as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"schools\"\n),\n\nrenamed as (\n    select\n        id                  as school_id,\n        school_district_id,\n        name                as school_name,\n        city,\n        state,\n        zip,\n        school_type,\n        created_at,\n        updated_at,\n        address_line1,\n        address_line2,\n        address_line3,\n        latitude,\n        longitude,\n        school_category,\n        last_known_school_year_open\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard__user_levels": {"database": "dev", "schema": "analytics", "name": "stg_dashboard__user_levels", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/stg_dashboard__user_levels.sql", "original_file_path": "models/staging/dashboard/stg_dashboard__user_levels.sql", "unique_id": "model.cdo_analytics.stg_dashboard__user_levels", "fqn": ["cdo_analytics", "staging", "dashboard", "stg_dashboard__user_levels"], "alias": "stg_dashboard__user_levels", "checksum": {"name": "sha256", "checksum": "0818a080636f33dce461fbc06a62196a313b2c9a0985bc12fc249ee983d24f5d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "user_level_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging"], "description": "staging model for `user_levels` source data", "columns": {"user_level_id": {"name": "user_level_id", "description": "unique id for for each user at each level", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/staging/dashboard/_dashboard__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "incremental", "tags": ["staging"], "unique_key": "user_level_id"}, "created_at": 1705873847.0867174, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard__user_levels\"", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key='user_level_id'\n    )\n}}\n\nwith \nuser_levels as (\n    select * \n    from {{ ref('base_dashboard__user_levels') }}\n\n    {% if is_incremental() %}\n\n    where updated_at > (select max(updated_at) from {{ this }} )\n    \n    {% endif %}\n)\n\nselect * \nfrom user_levels", "language": "sql", "refs": [{"name": "base_dashboard__user_levels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.cdo_analytics.base_dashboard__user_levels"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/stg_dashboard__user_levels.sql", "compiled": true, "compiled_code": "\n\nwith \n __dbt__cte__base_dashboard__user_levels as (\nwith \nsource as (\n      select * \n      from \"dashboard\".\"dashboard_production\".\"user_levels\"\n),\n\nrenamed as (\n    select\n        id                          as user_level_id,\n        user_id,\n        level_id,\n        script_id,\n        level_source_id,\n        attempts,\n        created_at,\n        updated_at,\n        best_result,\n        time_spent,\n        submitted                   as is_submitted,\n        readonly_answers            as is_read_only_answers,\n        unlocked_at\n        -- properties\n    from source\n)\n\nselect * \nfrom renamed\n), user_levels as (\n    select * \n    from __dbt__cte__base_dashboard__user_levels\n\n    \n\n    where updated_at > (select max(updated_at) from \"dev\".\"analytics\".\"stg_dashboard__user_levels\" )\n    \n    \n)\n\nselect * \nfrom user_levels", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard__user_levels", "sql": " __dbt__cte__base_dashboard__user_levels as (\nwith \nsource as (\n      select * \n      from \"dashboard\".\"dashboard_production\".\"user_levels\"\n),\n\nrenamed as (\n    select\n        id                          as user_level_id,\n        user_id,\n        level_id,\n        script_id,\n        level_source_id,\n        attempts,\n        created_at,\n        updated_at,\n        best_result,\n        time_spent,\n        submitted                   as is_submitted,\n        readonly_answers            as is_read_only_answers,\n        unlocked_at\n        -- properties\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard__levels_script_levels": {"database": "dev", "schema": "analytics", "name": "stg_dashboard__levels_script_levels", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/stg_dashboard__levels_script_levels.sql", "original_file_path": "models/staging/dashboard/stg_dashboard__levels_script_levels.sql", "unique_id": "model.cdo_analytics.stg_dashboard__levels_script_levels", "fqn": ["cdo_analytics", "staging", "dashboard", "stg_dashboard__levels_script_levels"], "alias": "stg_dashboard__levels_script_levels", "checksum": {"name": "sha256", "checksum": "feba594a12e2b765d45bda1e78f175db627bc13772890f3bdd2a841e48491527"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["staging"]}, "created_at": 1705873846.3280134, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard__levels_script_levels\"", "raw_code": "with \nlevel_script_levels as (\n    select * \n    from {{ ref('base_dashboard__levels_script_levels')}}\n)\n\nselect * \nfrom level_script_levels", "language": "sql", "refs": [{"name": "base_dashboard__levels_script_levels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_dashboard__levels_script_levels"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/stg_dashboard__levels_script_levels.sql", "compiled": true, "compiled_code": "with \n __dbt__cte__base_dashboard__levels_script_levels as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"levels_script_levels\"\n),\n\nrenamed as (\n    select\n        level_id,\n        script_level_id\n    from source\n)\n\nselect * \nfrom renamed\n), level_script_levels as (\n    select * \n    from __dbt__cte__base_dashboard__levels_script_levels\n)\n\nselect * \nfrom level_script_levels", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard__levels_script_levels", "sql": " __dbt__cte__base_dashboard__levels_script_levels as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"levels_script_levels\"\n),\n\nrenamed as (\n    select\n        level_id,\n        script_level_id\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard__unit_groups": {"database": "dev", "schema": "analytics", "name": "stg_dashboard__unit_groups", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/stg_dashboard__unit_groups.sql", "original_file_path": "models/staging/dashboard/stg_dashboard__unit_groups.sql", "unique_id": "model.cdo_analytics.stg_dashboard__unit_groups", "fqn": ["cdo_analytics", "staging", "dashboard", "stg_dashboard__unit_groups"], "alias": "stg_dashboard__unit_groups", "checksum": {"name": "sha256", "checksum": "c0d7c1ec816741c22299b55bb6eaa1fc806a8f02ba0e5acab1c0ce474abb564c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["staging"]}, "created_at": 1705873846.3346083, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard__unit_groups\"", "raw_code": "with \nunit_groups as (\n    select * \n    from {{ ref('base_dashboard__unit_groups')}}\n)\n\nselect * \nfrom unit_groups", "language": "sql", "refs": [{"name": "base_dashboard__unit_groups", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_dashboard__unit_groups"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/stg_dashboard__unit_groups.sql", "compiled": true, "compiled_code": "with \n __dbt__cte__base_dashboard__unit_groups as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"unit_groups\"\n),\n\nrenamed as (\n    select\n        id as unit_group_id,\n        name,\n        properties,\n        created_at,\n        updated_at,\n        published_state,\n        instruction_type,\n        instructor_audience,\n        participant_audience\n    from source\n)\n\nselect * \nfrom renamed\n), unit_groups as (\n    select * \n    from __dbt__cte__base_dashboard__unit_groups\n)\n\nselect * \nfrom unit_groups", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard__unit_groups", "sql": " __dbt__cte__base_dashboard__unit_groups as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"unit_groups\"\n),\n\nrenamed as (\n    select\n        id as unit_group_id,\n        name,\n        properties,\n        created_at,\n        updated_at,\n        published_state,\n        instruction_type,\n        instructor_audience,\n        participant_audience\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard__script_levels": {"database": "dev", "schema": "analytics", "name": "stg_dashboard__script_levels", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/stg_dashboard__script_levels.sql", "original_file_path": "models/staging/dashboard/stg_dashboard__script_levels.sql", "unique_id": "model.cdo_analytics.stg_dashboard__script_levels", "fqn": ["cdo_analytics", "staging", "dashboard", "stg_dashboard__script_levels"], "alias": "stg_dashboard__script_levels", "checksum": {"name": "sha256", "checksum": "268b3d394d9f7205eb6e45075fe2a649c0287cb1b25e5f4c259636def4710f74"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["staging"]}, "created_at": 1705873846.3394396, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard__script_levels\"", "raw_code": "with \nscript_levels as (\n    select * \n    from {{ ref('base_dashboard__script_levels')}}\n)\n\nselect * \nfrom script_levels", "language": "sql", "refs": [{"name": "base_dashboard__script_levels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_dashboard__script_levels"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/stg_dashboard__script_levels.sql", "compiled": true, "compiled_code": "with \n __dbt__cte__base_dashboard__script_levels as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"script_levels\"\n),\n\nrenamed as (\n    select\n        id                          as script_level_id,\n        script_id,\n        chapter,\n        created_at,\n        updated_at,\n        stage_id,\n        position,\n        assessment                  as is_assessment,\n        properties,\n        named_level                 as is_named_level,\n        bonus                       as is_bonus,\n        activity_section_id,\n        seed_key,\n        activity_section_position\n    from source\n)\n\nselect * \nfrom renamed\n), script_levels as (\n    select * \n    from __dbt__cte__base_dashboard__script_levels\n)\n\nselect * \nfrom script_levels", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard__script_levels", "sql": " __dbt__cte__base_dashboard__script_levels as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"script_levels\"\n),\n\nrenamed as (\n    select\n        id                          as script_level_id,\n        script_id,\n        chapter,\n        created_at,\n        updated_at,\n        stage_id,\n        position,\n        assessment                  as is_assessment,\n        properties,\n        named_level                 as is_named_level,\n        bonus                       as is_bonus,\n        activity_section_id,\n        seed_key,\n        activity_section_position\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard__levels": {"database": "dev", "schema": "analytics", "name": "stg_dashboard__levels", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/stg_dashboard__levels.sql", "original_file_path": "models/staging/dashboard/stg_dashboard__levels.sql", "unique_id": "model.cdo_analytics.stg_dashboard__levels", "fqn": ["cdo_analytics", "staging", "dashboard", "stg_dashboard__levels"], "alias": "stg_dashboard__levels", "checksum": {"name": "sha256", "checksum": "181ae2619f86b3c2c5708029ae140f3b66a7d61bef24391d8200bb3198781a1f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["staging"]}, "created_at": 1705873846.3441632, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard__levels\"", "raw_code": "with \nlevels as (\n    select * \n    from {{ ref('base_dashboard__levels')}}\n)\n\nselect * \nfrom levels", "language": "sql", "refs": [{"name": "base_dashboard__levels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_dashboard__levels"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/stg_dashboard__levels.sql", "compiled": true, "compiled_code": "with \n __dbt__cte__base_dashboard__levels as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"levels\"\n),\n\nrenamed as (\n    select\n        id                      as level_id,\n        game_id,\n        name,\n        created_at,\n        updated_at,\n        level_num,\n        ideal_level_source_id,\n        user_id,\n        properties,\n        type,\n        md5,\n        published               as is_published,\n        notes,\n        audit_log\n    from source\n)\n\nselect * \nfrom renamed\n), levels as (\n    select * \n    from __dbt__cte__base_dashboard__levels\n)\n\nselect * \nfrom levels", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard__levels", "sql": " __dbt__cte__base_dashboard__levels as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"levels\"\n),\n\nrenamed as (\n    select\n        id                      as level_id,\n        game_id,\n        name,\n        created_at,\n        updated_at,\n        level_num,\n        ideal_level_source_id,\n        user_id,\n        properties,\n        type,\n        md5,\n        published               as is_published,\n        notes,\n        audit_log\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard__school_districts": {"database": "dev", "schema": "analytics", "name": "stg_dashboard__school_districts", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/stg_dashboard__school_districts.sql", "original_file_path": "models/staging/dashboard/stg_dashboard__school_districts.sql", "unique_id": "model.cdo_analytics.stg_dashboard__school_districts", "fqn": ["cdo_analytics", "staging", "dashboard", "stg_dashboard__school_districts"], "alias": "stg_dashboard__school_districts", "checksum": {"name": "sha256", "checksum": "b6b0d61cb7446f98f1da048add86a04b615edcdd19482cc6327695080491e79f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["staging"]}, "created_at": 1705873846.3489196, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard__school_districts\"", "raw_code": "with \nschool_districts as (\n    select * \n    from {{ ref('base_dashboard__school_districts')}}\n)\n\nselect * \nfrom school_districts", "language": "sql", "refs": [{"name": "base_dashboard__school_districts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_dashboard__school_districts"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/stg_dashboard__school_districts.sql", "compiled": true, "compiled_code": "with \n __dbt__cte__base_dashboard__school_districts as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"school_districts\"\n),\n\nrenamed as (\n    select\n        id      as school_district_id,\n        name    as school_district_name,\n        city    as school_district_city,\n        state   as school_district_state,\n        zip     as school_district_zip,\n        last_known_school_year_open,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed\n), school_districts as (\n    select * \n    from __dbt__cte__base_dashboard__school_districts\n)\n\nselect * \nfrom school_districts", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard__school_districts", "sql": " __dbt__cte__base_dashboard__school_districts as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"school_districts\"\n),\n\nrenamed as (\n    select\n        id      as school_district_id,\n        name    as school_district_name,\n        city    as school_district_city,\n        state   as school_district_state,\n        zip     as school_district_zip,\n        last_known_school_year_open,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard__user_geos": {"database": "dev", "schema": "analytics", "name": "stg_dashboard__user_geos", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/stg_dashboard__user_geos.sql", "original_file_path": "models/staging/dashboard/stg_dashboard__user_geos.sql", "unique_id": "model.cdo_analytics.stg_dashboard__user_geos", "fqn": ["cdo_analytics", "staging", "dashboard", "stg_dashboard__user_geos"], "alias": "stg_dashboard__user_geos", "checksum": {"name": "sha256", "checksum": "f255457bb49d4afbcc64e744cf9f80980cc8d13734056b0af9fa5132cf36aa1a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["staging"]}, "created_at": 1705873846.3536625, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard__user_geos\"", "raw_code": "with \nuser_geos as (\n    select *,\n        row_number() over (partition by user_id order by user_geo_id desc) as row_number,\n        case when country = 'united states' then 0\n             when country <> 'united states' then 1 \n             else null \n        end as is_international\n    from {{ ref('base_dashboard__user_geos') }}\n),\n\nfinal as (\n    select\n        -- pk\n        user_id,\n\n        -- geos \n        city,\n        state,\n        postal_code,\n        country,\n        is_international,\n        \n        -- dates\n        created_at,\n        updated_at,\n        indexed_at\n    from user_geos\n    where row_number = 1\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "base_dashboard__user_geos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_dashboard__user_geos"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/stg_dashboard__user_geos.sql", "compiled": true, "compiled_code": "with \n __dbt__cte__base_dashboard__user_geos as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"user_geos\"\n),\n\nrenamed as (\n    select\n        id as user_geo_id,\n        user_id,\n        created_at,\n        updated_at,\n        indexed_at,\n        city,\n        state,\n        lower(country) as country,\n        postal_code\n    from source\n)\n\nselect * \nfrom renamed\n), user_geos as (\n    select *,\n        row_number() over (partition by user_id order by user_geo_id desc) as row_number,\n        case when country = 'united states' then 0\n             when country <> 'united states' then 1 \n             else null \n        end as is_international\n    from __dbt__cte__base_dashboard__user_geos\n),\n\nfinal as (\n    select\n        -- pk\n        user_id,\n\n        -- geos \n        city,\n        state,\n        postal_code,\n        country,\n        is_international,\n        \n        -- dates\n        created_at,\n        updated_at,\n        indexed_at\n    from user_geos\n    where row_number = 1\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard__user_geos", "sql": " __dbt__cte__base_dashboard__user_geos as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"user_geos\"\n),\n\nrenamed as (\n    select\n        id as user_geo_id,\n        user_id,\n        created_at,\n        updated_at,\n        indexed_at,\n        city,\n        state,\n        lower(country) as country,\n        postal_code\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.stg_dashboard__course_scripts": {"database": "dev", "schema": "analytics", "name": "stg_dashboard__course_scripts", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/stg_dashboard__course_scripts.sql", "original_file_path": "models/staging/dashboard/stg_dashboard__course_scripts.sql", "unique_id": "model.cdo_analytics.stg_dashboard__course_scripts", "fqn": ["cdo_analytics", "staging", "dashboard", "stg_dashboard__course_scripts"], "alias": "stg_dashboard__course_scripts", "checksum": {"name": "sha256", "checksum": "c465bf49a92aeaf8a3c4ee66a6750056425cb5cb1859d777037b682308fb552c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "view", "tags": ["staging"]}, "created_at": 1705873846.3584392, "relation_name": "\"dev\".\"analytics\".\"stg_dashboard__course_scripts\"", "raw_code": "with \ncourse_scripts as (\n    select * \n    from {{ ref('base_dashboard__course_scripts')}}\n)\n\nselect * \nfrom course_scripts", "language": "sql", "refs": [{"name": "base_dashboard__course_scripts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.base_dashboard__course_scripts"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/stg_dashboard__course_scripts.sql", "compiled": true, "compiled_code": "with \n __dbt__cte__base_dashboard__course_scripts as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"course_scripts\"\n),\n\nrenamed as (\n    select\n        id as course_script_id,\n        course_id,\n        script_id,\n        position,\n        experiment_name,\n        default_script_id\n    from source\n)\n\nselect * \nfrom renamed\n), course_scripts as (\n    select * \n    from __dbt__cte__base_dashboard__course_scripts\n)\n\nselect * \nfrom course_scripts", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.cdo_analytics.base_dashboard__course_scripts", "sql": " __dbt__cte__base_dashboard__course_scripts as (\nwith \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"course_scripts\"\n),\n\nrenamed as (\n    select\n        id as course_script_id,\n        course_id,\n        script_id,\n        position,\n        experiment_name,\n        default_script_id\n    from source\n)\n\nselect * \nfrom renamed\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__school_stats_by_years": {"database": "dev", "schema": "analytics", "name": "base_dashboard__school_stats_by_years", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__school_stats_by_years.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__school_stats_by_years.sql", "unique_id": "model.cdo_analytics.base_dashboard__school_stats_by_years", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__school_stats_by_years"], "alias": "base_dashboard__school_stats_by_years", "checksum": {"name": "sha256", "checksum": "3736eefcb1da96ff6e4283d956a422b948c3aca7f08e76984aaf6d9aac6c6a24"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.364167, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'school_stats_by_years') }}\n),\n\nrenamed as (\n    select\n        school_id,\n        school_year,\n\n        lower(grades_offered_lo) as grades_offered_lo,\n        lower(grades_offered_hi) as grades_offered_hi,\n        \n        grade_pk_offered    as is_grade_pk,\n        grade_kg_offered    as is_grade_kg,\n        grade_01_offered    as is_grade_01,\n        grade_02_offered    as is_grade_02,\n        grade_03_offered    as is_grade_03,\n        grade_04_offered    as is_grade_04,\n        grade_05_offered    as is_grade_05,\n        grade_06_offered    as is_grade_06,\n        grade_07_offered    as is_grade_07,\n        grade_08_offered    as is_grade_08,\n        grade_09_offered    as is_grade_09,\n        grade_10_offered    as is_grade_10,\n        grade_11_offered    as is_grade_11,\n        grade_12_offered    as is_grade_12,\n        grade_13_offered    as is_grade_13,\n        \n        community_type,\n        virtual_status,\n        title_i_status,\n        \n        coalesce(students_total,0)      as total_students,\n        coalesce(student_am_count,0)    as count_student_am,\n        coalesce(student_as_count,0)    as count_student_as,\n        coalesce(student_hi_count,0)    as count_student_hi,\n        coalesce(student_bl_count,0)    as count_student_bl,\n        coalesce(student_wh_count,0)    as count_student_wh,\n        coalesce(student_hp_count,0)    as count_student_hp,\n        coalesce(student_tr_count,0)    as count_student_tr,\n        coalesce(frl_eligible_total,0)  as total_frl_eligible_students,\n        \n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "school_stats_by_years"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.school_stats_by_years"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__school_stats_by_years.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"school_stats_by_years\"\n),\n\nrenamed as (\n    select\n        school_id,\n        school_year,\n\n        lower(grades_offered_lo) as grades_offered_lo,\n        lower(grades_offered_hi) as grades_offered_hi,\n        \n        grade_pk_offered    as is_grade_pk,\n        grade_kg_offered    as is_grade_kg,\n        grade_01_offered    as is_grade_01,\n        grade_02_offered    as is_grade_02,\n        grade_03_offered    as is_grade_03,\n        grade_04_offered    as is_grade_04,\n        grade_05_offered    as is_grade_05,\n        grade_06_offered    as is_grade_06,\n        grade_07_offered    as is_grade_07,\n        grade_08_offered    as is_grade_08,\n        grade_09_offered    as is_grade_09,\n        grade_10_offered    as is_grade_10,\n        grade_11_offered    as is_grade_11,\n        grade_12_offered    as is_grade_12,\n        grade_13_offered    as is_grade_13,\n        \n        community_type,\n        virtual_status,\n        title_i_status,\n        \n        coalesce(students_total,0)      as total_students,\n        coalesce(student_am_count,0)    as count_student_am,\n        coalesce(student_as_count,0)    as count_student_as,\n        coalesce(student_hi_count,0)    as count_student_hi,\n        coalesce(student_bl_count,0)    as count_student_bl,\n        coalesce(student_wh_count,0)    as count_student_wh,\n        coalesce(student_hp_count,0)    as count_student_hp,\n        coalesce(student_tr_count,0)    as count_student_tr,\n        coalesce(frl_eligible_total,0)  as total_frl_eligible_students,\n        \n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__courses": {"database": "dev", "schema": "analytics", "name": "base_dashboard__courses", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__courses.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__courses.sql", "unique_id": "model.cdo_analytics.base_dashboard__courses", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__courses"], "alias": "base_dashboard__courses", "checksum": {"name": "sha256", "checksum": "4815a8184bba3e834760f2ae8967a6ac3266be90fb9fd55a2761bc814650d4b0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.3690464, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'courses') }}\n),\n\nrenamed as (\n    select\n        id as course_id,\n        name,\n        properties,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "courses"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.courses"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__courses.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"courses\"\n),\n\nrenamed as (\n    select\n        id as course_id,\n        name,\n        properties,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__parent_levels_child_levels": {"database": "dev", "schema": "analytics", "name": "base_dashboard__parent_levels_child_levels", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__parent_levels_child_levels.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__parent_levels_child_levels.sql", "unique_id": "model.cdo_analytics.base_dashboard__parent_levels_child_levels", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__parent_levels_child_levels"], "alias": "base_dashboard__parent_levels_child_levels", "checksum": {"name": "sha256", "checksum": "cfd5a96842942948ea88a3ae0a0dd80e0c19e552327f9fc9cec96bbaa67b9ff1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.3744335, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'parent_levels_child_levels') }}\n),\n\nrenamed as (\n    select\n        id as parent_levels_child_level_id,\n        parent_level_id,\n        child_level_id,\n        position,\n        kind\n    from source\n)\n\nselect *\nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "parent_levels_child_levels"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.parent_levels_child_levels"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__parent_levels_child_levels.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"parent_levels_child_levels\"\n),\n\nrenamed as (\n    select\n        id as parent_levels_child_level_id,\n        parent_level_id,\n        child_level_id,\n        position,\n        kind\n    from source\n)\n\nselect *\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__regional_partners_school_districts": {"database": "dev", "schema": "analytics", "name": "base_dashboard__regional_partners_school_districts", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__regional_partners_school_districts.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__regional_partners_school_districts.sql", "unique_id": "model.cdo_analytics.base_dashboard__regional_partners_school_districts", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__regional_partners_school_districts"], "alias": "base_dashboard__regional_partners_school_districts", "checksum": {"name": "sha256", "checksum": "a57ca7984628ebd136ac6dedc8bcbe0984e42c2d08f2598263962e9b9a2cda4f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.379275, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'regional_partners_school_districts') }}\n),\n\nrenamed as (\n    select\n        regional_partner_id,\n        school_district_id,\n        course,\n        workshop_days\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "regional_partners_school_districts"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.regional_partners_school_districts"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__regional_partners_school_districts.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"regional_partners_school_districts\"\n),\n\nrenamed as (\n    select\n        regional_partner_id,\n        school_district_id,\n        course,\n        workshop_days\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__sign_ins": {"database": "dev", "schema": "analytics", "name": "base_dashboard__sign_ins", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__sign_ins.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__sign_ins.sql", "unique_id": "model.cdo_analytics.base_dashboard__sign_ins", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__sign_ins"], "alias": "base_dashboard__sign_ins", "checksum": {"name": "sha256", "checksum": "9fbc4188d42465f5f0a2b0ce36c71e5b19e02c37120a801044deb5d49c101277"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.3840702, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'sign_ins') }}\n),\n\nrenamed as (\n    select\n        id as sign_in_id,\n        user_id,\n        sign_in_at,\n        sign_in_count\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "sign_ins"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.sign_ins"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__sign_ins.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"sign_ins\"\n),\n\nrenamed as (\n    select\n        id as sign_in_id,\n        user_id,\n        sign_in_at,\n        sign_in_count\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__survey_results": {"database": "dev", "schema": "analytics", "name": "base_dashboard__survey_results", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__survey_results.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__survey_results.sql", "unique_id": "model.cdo_analytics.base_dashboard__survey_results", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__survey_results"], "alias": "base_dashboard__survey_results", "checksum": {"name": "sha256", "checksum": "a7c952066b8d0a922126edd9ee2cc0db83caba1a18352852f8dca91720841171"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.3889225, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'survey_results') }}\n),\n\nrenamed as (\n    select\n        id as survey_result_id,\n        user_id,\n        kind,\n        properties,\n        created_at,\n        updated_at\n\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "survey_results"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.survey_results"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__survey_results.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"survey_results\"\n),\n\nrenamed as (\n    select\n        id as survey_result_id,\n        user_id,\n        kind,\n        properties,\n        created_at,\n        updated_at\n\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__scripts": {"database": "dev", "schema": "analytics", "name": "base_dashboard__scripts", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__scripts.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__scripts.sql", "unique_id": "model.cdo_analytics.base_dashboard__scripts", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__scripts"], "alias": "base_dashboard__scripts", "checksum": {"name": "sha256", "checksum": "b4ba6187bbb2e638203c4314a31b89a098c535e0416d2d3c2b9c9bb0d4d0922c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.3947654, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'scripts') }}\n),\n\nrenamed as (\n    select\n        id as script_id,\n        name as script_name,\n        created_at,\n        updated_at,\n        wrapup_video_id,\n        user_id,\n        login_required,\n        properties,\n        new_name,\n        family_name,\n        published_state,\n        instruction_type,\n        instructor_audience,\n        participant_audience\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "scripts"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.scripts"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__scripts.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"scripts\"\n),\n\nrenamed as (\n    select\n        id as script_id,\n        name as script_name,\n        created_at,\n        updated_at,\n        wrapup_video_id,\n        user_id,\n        login_required,\n        properties,\n        new_name,\n        family_name,\n        published_state,\n        instruction_type,\n        instructor_audience,\n        participant_audience\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__school_infos": {"database": "dev", "schema": "analytics", "name": "base_dashboard__school_infos", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__school_infos.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__school_infos.sql", "unique_id": "model.cdo_analytics.base_dashboard__school_infos", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__school_infos"], "alias": "base_dashboard__school_infos", "checksum": {"name": "sha256", "checksum": "f403e8156f4a57d06c5ad5b6bfce2a9bbdf11d97c398a41b4f2c1dbea1df938d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.3995879, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'school_infos') }}\n),\n\nrenamed as (\n    select\n        id as school_info_id,\n        country,\n        school_type,\n        zip,\n        state,\n        school_district_id,\n        school_district_other,\n        school_district_name,\n        school_id,\n        school_other,\n        school_name,\n        full_address,\n        created_at,\n        updated_at,\n        validation_type\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "school_infos"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.school_infos"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__school_infos.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"school_infos\"\n),\n\nrenamed as (\n    select\n        id as school_info_id,\n        country,\n        school_type,\n        zip,\n        state,\n        school_district_id,\n        school_district_other,\n        school_district_name,\n        school_id,\n        school_other,\n        school_name,\n        full_address,\n        created_at,\n        updated_at,\n        validation_type\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__census_summaries": {"database": "dev", "schema": "analytics", "name": "base_dashboard__census_summaries", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__census_summaries.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__census_summaries.sql", "unique_id": "model.cdo_analytics.base_dashboard__census_summaries", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__census_summaries"], "alias": "base_dashboard__census_summaries", "checksum": {"name": "sha256", "checksum": "e22579d8c07f0d8bc39f530a143be4c79d05fd2a293c6af3a3c98ba7983ff252"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.4043932, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'census_summaries') }}\n),\n\nrenamed as (\n    select\n        id as census_sumarries_id,\n        school_id,\n        school_year,\n        teaches_cs,\n        audit_data,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "census_summaries"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.census_summaries"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__census_summaries.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"census_summaries\"\n),\n\nrenamed as (\n    select\n        id as census_sumarries_id,\n        school_id,\n        school_year,\n        teaches_cs,\n        audit_data,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__level_sources_multi_types": {"database": "dev", "schema": "analytics", "name": "base_dashboard__level_sources_multi_types", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__level_sources_multi_types.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__level_sources_multi_types.sql", "unique_id": "model.cdo_analytics.base_dashboard__level_sources_multi_types", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__level_sources_multi_types"], "alias": "base_dashboard__level_sources_multi_types", "checksum": {"name": "sha256", "checksum": "8c77de45a65f9abc0077f9b9eb2dcbfe21a4cb66427157c5acdfc10b576b8d4e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.409301, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'level_sources_multi_types') }}\n),\n\nrenamed as (\n    select\n        id              as level_sources_multi_type_id,\n        level_source_id,\n        level_id,\n        data,\n        md5,\n        hidden          as is_hidden\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "level_sources_multi_types"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.level_sources_multi_types"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__level_sources_multi_types.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"level_sources_multi_types\"\n),\n\nrenamed as (\n    select\n        id              as level_sources_multi_type_id,\n        level_source_id,\n        level_id,\n        data,\n        md5,\n        hidden          as is_hidden\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__level_sources": {"database": "dev", "schema": "analytics", "name": "base_dashboard__level_sources", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__level_sources.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__level_sources.sql", "unique_id": "model.cdo_analytics.base_dashboard__level_sources", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__level_sources"], "alias": "base_dashboard__level_sources", "checksum": {"name": "sha256", "checksum": "64edb1a751748359301f83a21bc773ca26ceb6188131ff501133df92d21706ee"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.4144511, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'level_sources') }}\n),\n\nrenamed as (\n    select\n        id          as level_source_id,\n        level_id,\n        md5,\n        data,\n        created_at,\n        updated_at,\n        hidden      as is_hidden\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "level_sources"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.level_sources"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__level_sources.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"level_sources\"\n),\n\nrenamed as (\n    select\n        id          as level_source_id,\n        level_id,\n        md5,\n        data,\n        created_at,\n        updated_at,\n        hidden      as is_hidden\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__user_scripts": {"database": "dev", "schema": "analytics", "name": "base_dashboard__user_scripts", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__user_scripts.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__user_scripts.sql", "unique_id": "model.cdo_analytics.base_dashboard__user_scripts", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__user_scripts"], "alias": "base_dashboard__user_scripts", "checksum": {"name": "sha256", "checksum": "7beebed0bc2cd189c76aabde3143d74a4752af12bf02f7112b90c9d32ef08b63"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.4201262, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'user_scripts') }}\n    where deleted_at is null \n),\n\nrenamed as (\n    select\n        id as user_script_id,\n        user_id,\n        script_id,\n        started_at,\n        completed_at,\n        assigned_at,\n        last_progress_at,\n        created_at,\n        updated_at\n        -- properties,\n    from source\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["dashboard", "user_scripts"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.user_scripts"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__user_scripts.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"user_scripts\"\n    where deleted_at is null \n),\n\nrenamed as (\n    select\n        id as user_script_id,\n        user_id,\n        script_id,\n        started_at,\n        completed_at,\n        assigned_at,\n        last_progress_at,\n        created_at,\n        updated_at\n        -- properties,\n    from source\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__ap_school_codes": {"database": "dev", "schema": "analytics", "name": "base_dashboard__ap_school_codes", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__ap_school_codes.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__ap_school_codes.sql", "unique_id": "model.cdo_analytics.base_dashboard__ap_school_codes", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__ap_school_codes"], "alias": "base_dashboard__ap_school_codes", "checksum": {"name": "sha256", "checksum": "5d2e8fdbd95bb90d8aef70740a71af6f5e4acedbff2b6d91e7c456af4a6d7709"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.4249208, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'ap_school_codes') }}\n),\n\nrenamed as (\n    select\n        school_id,\n        school_year,\n        school_code,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "ap_school_codes"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.ap_school_codes"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__ap_school_codes.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"ap_school_codes\"\n),\n\nrenamed as (\n    select\n        school_id,\n        school_year,\n        school_code,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__sections": {"database": "dev", "schema": "analytics", "name": "base_dashboard__sections", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__sections.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__sections.sql", "unique_id": "model.cdo_analytics.base_dashboard__sections", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__sections"], "alias": "base_dashboard__sections", "checksum": {"name": "sha256", "checksum": "734d8271f92cd04c2be4dd8fa83d1f96f23eb89171cd585a0b7f5f866f5536b1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.4297187, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'sections') }}\n    where deleted_at is null  \n),\n\nrenamed as (\n    select\n        -- section data\n        id                      as section_id,\n        name                    as section_name,\n        section_type,\n\n        user_id,\n        login_type,\n        code,\n        script_id,\n        course_id,\n        grade,\n        \n        -- flags \n        stage_extras            as is_stage_extras,\n        pairing_allowed         as is_pairing_allowed,\n        sharing_disabled        as is_sharing_disabled,\n        hidden                  as is_hidden,\n        tts_autoplay_enabled    as is_tts_autoplay_enabled,\n        restrict_section        as is_restrict_section,\n        participant_type,\n        -- properties,\n        \n        -- timestamps\n        created_at,\n        updated_at,\n        first_activity_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "sections"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.sections"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__sections.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"sections\"\n    where deleted_at is null  \n),\n\nrenamed as (\n    select\n        -- section data\n        id                      as section_id,\n        name                    as section_name,\n        section_type,\n\n        user_id,\n        login_type,\n        code,\n        script_id,\n        course_id,\n        grade,\n        \n        -- flags \n        stage_extras            as is_stage_extras,\n        pairing_allowed         as is_pairing_allowed,\n        sharing_disabled        as is_sharing_disabled,\n        hidden                  as is_hidden,\n        tts_autoplay_enabled    as is_tts_autoplay_enabled,\n        restrict_section        as is_restrict_section,\n        participant_type,\n        -- properties,\n        \n        -- timestamps\n        created_at,\n        updated_at,\n        first_activity_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__user_levels": {"database": "dev", "schema": "analytics", "name": "base_dashboard__user_levels", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__user_levels.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__user_levels.sql", "unique_id": "model.cdo_analytics.base_dashboard__user_levels", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__user_levels"], "alias": "base_dashboard__user_levels", "checksum": {"name": "sha256", "checksum": "a5ce593e4147df8bd90559706b2dd0c0d7222f54a05993231ab239bd740ca0f9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.4345124, "relation_name": null, "raw_code": "with \nsource as (\n      select * \n      from {{ source('dashboard', 'user_levels') }}\n),\n\nrenamed as (\n    select\n        id                          as user_level_id,\n        user_id,\n        level_id,\n        script_id,\n        level_source_id,\n        attempts,\n        created_at,\n        updated_at,\n        best_result,\n        time_spent,\n        submitted                   as is_submitted,\n        readonly_answers            as is_read_only_answers,\n        unlocked_at\n        -- properties\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "user_levels"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.user_levels"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__user_levels.sql", "compiled": true, "compiled_code": "with \nsource as (\n      select * \n      from \"dashboard\".\"dashboard_production\".\"user_levels\"\n),\n\nrenamed as (\n    select\n        id                          as user_level_id,\n        user_id,\n        level_id,\n        script_id,\n        level_source_id,\n        attempts,\n        created_at,\n        updated_at,\n        best_result,\n        time_spent,\n        submitted                   as is_submitted,\n        readonly_answers            as is_read_only_answers,\n        unlocked_at\n        -- properties\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__users": {"database": "dev", "schema": "analytics", "name": "base_dashboard__users", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__users.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__users.sql", "unique_id": "model.cdo_analytics.base_dashboard__users", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__users"], "alias": "base_dashboard__users", "checksum": {"name": "sha256", "checksum": "f54f4336df14471053502ce5d68e77d65585d654678167a3312066f1c240fb49"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.4393523, "relation_name": null, "raw_code": "with \nsource as (\n      select * \n      from {{ source('dashboard', 'users') }}\n      --where deleted_at is null \n),\n\nrenamed as (\n    select\n        id                          as user_id,\n        studio_person_id,\n        sign_in_count,\n        current_sign_in_at,\n        last_sign_in_at,\n        created_at,\n        updated_at,\n        deleted_at,        \n        gender,\n        locale,\n        birthday,\n        user_type,\n        school_info_id,\n        total_lines,\n        active                      as is_active,\n        purged_at,\n        urm                         as is_urg,\n        races,\n        primary_contact_info_id\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "users"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.users"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__users.sql", "compiled": true, "compiled_code": "with \nsource as (\n      select * \n      from \"dashboard\".\"dashboard_production\".\"users\"\n      --where deleted_at is null \n),\n\nrenamed as (\n    select\n        id                          as user_id,\n        studio_person_id,\n        sign_in_count,\n        current_sign_in_at,\n        last_sign_in_at,\n        created_at,\n        updated_at,\n        deleted_at,        \n        gender,\n        locale,\n        birthday,\n        user_type,\n        school_info_id,\n        total_lines,\n        active                      as is_active,\n        purged_at,\n        urm                         as is_urg,\n        races,\n        primary_contact_info_id\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__followers": {"database": "dev", "schema": "analytics", "name": "base_dashboard__followers", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__followers.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__followers.sql", "unique_id": "model.cdo_analytics.base_dashboard__followers", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__followers"], "alias": "base_dashboard__followers", "checksum": {"name": "sha256", "checksum": "5bbf22a2f4cf4033bffd9c1814fcba44d938182b8482c7706e2e5b6724c1514a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.4443133, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'followers') }}\n    where deleted_at is null \n),\n\nrenamed as (\n    select\n        id as follower_id,\n        student_user_id as student_id,\n        section_id,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "followers"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.followers"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__followers.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"followers\"\n    where deleted_at is null \n),\n\nrenamed as (\n    select\n        id as follower_id,\n        student_user_id as student_id,\n        section_id,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__schools": {"database": "dev", "schema": "analytics", "name": "base_dashboard__schools", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__schools.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__schools.sql", "unique_id": "model.cdo_analytics.base_dashboard__schools", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__schools"], "alias": "base_dashboard__schools", "checksum": {"name": "sha256", "checksum": "c68662b07d29b3ab88a5447a5fb7f9b7bb79b8548da80ff994c31b6ca9e3cc7a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.4503644, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'schools') }}\n),\n\nrenamed as (\n    select\n        id                  as school_id,\n        school_district_id,\n        name                as school_name,\n        city,\n        state,\n        zip,\n        school_type,\n        created_at,\n        updated_at,\n        address_line1,\n        address_line2,\n        address_line3,\n        latitude,\n        longitude,\n        school_category,\n        last_known_school_year_open\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "schools"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.schools"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__schools.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"schools\"\n),\n\nrenamed as (\n    select\n        id                  as school_id,\n        school_district_id,\n        name                as school_name,\n        city,\n        state,\n        zip,\n        school_type,\n        created_at,\n        updated_at,\n        address_line1,\n        address_line2,\n        address_line3,\n        latitude,\n        longitude,\n        school_category,\n        last_known_school_year_open\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__course_scripts": {"database": "dev", "schema": "analytics", "name": "base_dashboard__course_scripts", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__course_scripts.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__course_scripts.sql", "unique_id": "model.cdo_analytics.base_dashboard__course_scripts", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__course_scripts"], "alias": "base_dashboard__course_scripts", "checksum": {"name": "sha256", "checksum": "726481b8909a9c1bc64e363464ae56836ed0ac2de3163a346d77e6059eaa2220"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.4551418, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'course_scripts') }}\n),\n\nrenamed as (\n    select\n        id as course_script_id,\n        course_id,\n        script_id,\n        position,\n        experiment_name,\n        default_script_id\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "course_scripts"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.course_scripts"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__course_scripts.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"course_scripts\"\n),\n\nrenamed as (\n    select\n        id as course_script_id,\n        course_id,\n        script_id,\n        position,\n        experiment_name,\n        default_script_id\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__level_concept_difficulties": {"database": "dev", "schema": "analytics", "name": "base_dashboard__level_concept_difficulties", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__level_concept_difficulties.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__level_concept_difficulties.sql", "unique_id": "model.cdo_analytics.base_dashboard__level_concept_difficulties", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__level_concept_difficulties"], "alias": "base_dashboard__level_concept_difficulties", "checksum": {"name": "sha256", "checksum": "d0173fffc7d4b2ad84bd7358b96a0f006ecc3c023fd4188bf552bf5ac6f87044"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.459913, "relation_name": null, "raw_code": "with source as (\n    select * \n    from {{ source('dashboard', 'level_concept_difficulties') }}\n),\n\nrenamed as (\n    select\n        id as level_concept_difficulty_id,\n        level_id,\n        created_at,\n        updated_at,\n        sequencing,\n        debugging,\n        repeat_loops,\n        repeat_until_while,\n        for_loops,\n        events,\n        variables,\n        functions,\n        functions_with_params,\n        conditionals\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "level_concept_difficulties"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.level_concept_difficulties"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__level_concept_difficulties.sql", "compiled": true, "compiled_code": "with source as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"level_concept_difficulties\"\n),\n\nrenamed as (\n    select\n        id as level_concept_difficulty_id,\n        level_id,\n        created_at,\n        updated_at,\n        sequencing,\n        debugging,\n        repeat_loops,\n        repeat_until_while,\n        for_loops,\n        events,\n        variables,\n        functions,\n        functions_with_params,\n        conditionals\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__school_districts": {"database": "dev", "schema": "analytics", "name": "base_dashboard__school_districts", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__school_districts.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__school_districts.sql", "unique_id": "model.cdo_analytics.base_dashboard__school_districts", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__school_districts"], "alias": "base_dashboard__school_districts", "checksum": {"name": "sha256", "checksum": "26fc1bdf0417995943b297d8efc4d77eee4779f1219a209b7fbc806a3a33e239"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.4646835, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard','school_districts')}}\n),\n\nrenamed as (\n    select\n        id      as school_district_id,\n        name    as school_district_name,\n        city    as school_district_city,\n        state   as school_district_state,\n        zip     as school_district_zip,\n        last_known_school_year_open,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "school_districts"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.school_districts"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__school_districts.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"school_districts\"\n),\n\nrenamed as (\n    select\n        id      as school_district_id,\n        name    as school_district_name,\n        city    as school_district_city,\n        state   as school_district_state,\n        zip     as school_district_zip,\n        last_known_school_year_open,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__stages": {"database": "dev", "schema": "analytics", "name": "base_dashboard__stages", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__stages.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__stages.sql", "unique_id": "model.cdo_analytics.base_dashboard__stages", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__stages"], "alias": "base_dashboard__stages", "checksum": {"name": "sha256", "checksum": "93bb466dab2e294aca711c0f90b78459b11d1cebb726485853fc206c66a8a452"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.4694157, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'stages') }}\n),\n\nrenamed as (\n    select\n        id                  as stage_id,\n        name                as stage_name,\n        absolute_position,\n        script_id,\n        created_at,\n        updated_at,\n        lockable            as is_lockable,\n        relative_position,\n        -- properties,\n        lesson_group_id,\n        key,\n        has_lesson_plan\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "stages"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.stages"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__stages.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"stages\"\n),\n\nrenamed as (\n    select\n        id                  as stage_id,\n        name                as stage_name,\n        absolute_position,\n        script_id,\n        created_at,\n        updated_at,\n        lockable            as is_lockable,\n        relative_position,\n        -- properties,\n        lesson_group_id,\n        key,\n        has_lesson_plan\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__user_project_storage_ids": {"database": "dev", "schema": "analytics", "name": "base_dashboard__user_project_storage_ids", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__user_project_storage_ids.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__user_project_storage_ids.sql", "unique_id": "model.cdo_analytics.base_dashboard__user_project_storage_ids", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__user_project_storage_ids"], "alias": "base_dashboard__user_project_storage_ids", "checksum": {"name": "sha256", "checksum": "126ed13f0c41c546093b5309eb74bdaf86118d9fdc09adf0467cd5d1ebe84ca6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.474249, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'user_project_storage_ids') }}\n),\n\nrenamed as (\n    select\n        id as user_project_storage_id,\n        user_id\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "user_project_storage_ids"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.user_project_storage_ids"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__user_project_storage_ids.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"user_project_storage_ids\"\n),\n\nrenamed as (\n    select\n        id as user_project_storage_id,\n        user_id\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__unit_groups": {"database": "dev", "schema": "analytics", "name": "base_dashboard__unit_groups", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__unit_groups.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__unit_groups.sql", "unique_id": "model.cdo_analytics.base_dashboard__unit_groups", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__unit_groups"], "alias": "base_dashboard__unit_groups", "checksum": {"name": "sha256", "checksum": "fe0f63a5da6dcc3dacccc7980fea42d8abb39efa404efd71bf44322a072765b9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.4801238, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'unit_groups') }}\n),\n\nrenamed as (\n    select\n        id as unit_group_id,\n        name,\n        properties,\n        created_at,\n        updated_at,\n        published_state,\n        instruction_type,\n        instructor_audience,\n        participant_audience\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "unit_groups"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.unit_groups"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__unit_groups.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"unit_groups\"\n),\n\nrenamed as (\n    select\n        id as unit_group_id,\n        name,\n        properties,\n        created_at,\n        updated_at,\n        published_state,\n        instruction_type,\n        instructor_audience,\n        participant_audience\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__studio_people": {"database": "dev", "schema": "analytics", "name": "base_dashboard__studio_people", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__studio_people.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__studio_people.sql", "unique_id": "model.cdo_analytics.base_dashboard__studio_people", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__studio_people"], "alias": "base_dashboard__studio_people", "checksum": {"name": "sha256", "checksum": "c7d991cc7b0f7feb32833e7a9ab63101f8e4ac7b179d8ccda74719e73b2814d9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.484872, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'studio_people') }}\n),\n\nrenamed as (\n    select\n        id as studio_people_id,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "studio_people"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.studio_people"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__studio_people.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"studio_people\"\n),\n\nrenamed as (\n    select\n        id as studio_people_id,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__contained_levels": {"database": "dev", "schema": "analytics", "name": "base_dashboard__contained_levels", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__contained_levels.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__contained_levels.sql", "unique_id": "model.cdo_analytics.base_dashboard__contained_levels", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__contained_levels"], "alias": "base_dashboard__contained_levels", "checksum": {"name": "sha256", "checksum": "82c7da2a1528de451ddeef668de3f7da06cbfad55cdd959349ec27d84680d37d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.4896367, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'contained_levels') }}\n),\n\nrenamed as (\n    select\n        id as contained_levels_id,\n        created_at,\n        updated_at,\n        level_group_level_id,\n        contained_level_id,\n        contained_level_type,\n        contained_level_page,\n        contained_level_position,\n        contained_level_text\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "contained_levels"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.contained_levels"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__contained_levels.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"contained_levels\"\n),\n\nrenamed as (\n    select\n        id as contained_levels_id,\n        created_at,\n        updated_at,\n        level_group_level_id,\n        contained_level_id,\n        contained_level_type,\n        contained_level_page,\n        contained_level_position,\n        contained_level_text\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__levels_script_levels": {"database": "dev", "schema": "analytics", "name": "base_dashboard__levels_script_levels", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__levels_script_levels.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__levels_script_levels.sql", "unique_id": "model.cdo_analytics.base_dashboard__levels_script_levels", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__levels_script_levels"], "alias": "base_dashboard__levels_script_levels", "checksum": {"name": "sha256", "checksum": "80a4529867f8bc70f3af1494253589b51adf711bc4de53b933190a515cb3b8d8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.494389, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'levels_script_levels') }}\n),\n\nrenamed as (\n    select\n        level_id,\n        script_level_id\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "levels_script_levels"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.levels_script_levels"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__levels_script_levels.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"levels_script_levels\"\n),\n\nrenamed as (\n    select\n        level_id,\n        script_level_id\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__script_levels": {"database": "dev", "schema": "analytics", "name": "base_dashboard__script_levels", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__script_levels.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__script_levels.sql", "unique_id": "model.cdo_analytics.base_dashboard__script_levels", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__script_levels"], "alias": "base_dashboard__script_levels", "checksum": {"name": "sha256", "checksum": "4d94d7775e7a5d20d59170d2d961a60314fd035d5d20676e05d9011d89526678"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.499184, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'script_levels') }}\n),\n\nrenamed as (\n    select\n        id                          as script_level_id,\n        script_id,\n        chapter,\n        created_at,\n        updated_at,\n        stage_id,\n        position,\n        assessment                  as is_assessment,\n        properties,\n        named_level                 as is_named_level,\n        bonus                       as is_bonus,\n        activity_section_id,\n        seed_key,\n        activity_section_position\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "script_levels"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.script_levels"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__script_levels.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"script_levels\"\n),\n\nrenamed as (\n    select\n        id                          as script_level_id,\n        script_id,\n        chapter,\n        created_at,\n        updated_at,\n        stage_id,\n        position,\n        assessment                  as is_assessment,\n        properties,\n        named_level                 as is_named_level,\n        bonus                       as is_bonus,\n        activity_section_id,\n        seed_key,\n        activity_section_position\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__census_submissions": {"database": "dev", "schema": "analytics", "name": "base_dashboard__census_submissions", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__census_submissions.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__census_submissions.sql", "unique_id": "model.cdo_analytics.base_dashboard__census_submissions", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__census_submissions"], "alias": "base_dashboard__census_submissions", "checksum": {"name": "sha256", "checksum": "5c6933ea7296d3b90a76b82d0f158983b352d3fc1a96e92653540904c891a8fe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.5048702, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'census_submissions') }}\n),\n\nrenamed as (\n    select\n        id                                      as census_submissions_id,\n        type                                    as census_submissions_type,\n        submitter_role,\n        school_year,\n        how_many_do_hoc,\n        how_many_after_school,\n        how_many_10_hours,\n        how_many_20_hours,\n        other_classes_under_20_hours,\n        topic_blocks                            as is_topic_blocks,\n        topic_text                              as is_topic_text,\n        topic_robots                            as is_topic_robots,\n        topic_internet                          as is_topic_internet,\n        topic_security                          as is_topic_security,\n        topic_data                              as is_topic_data,\n        topic_web_design                        as is_topic_web_design,\n        topic_game_design                       as is_topic_game_design,\n        topic_other                             as is_topic_other,\n        topic_other_description,\n        topic_do_not_know                       as is_topic_do_not_know,\n        class_frequency,\n        pledged                                 as is_pledged,\n        created_at,\n        updated_at,\n        share_with_regional_partners            as is_shared_with_regional_partners,\n        topic_ethical_social                    as is_topic_ethical_social,\n        inaccuracy_reported                     as is_inaccuracy_reported\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "census_submissions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.census_submissions"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__census_submissions.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"census_submissions\"\n),\n\nrenamed as (\n    select\n        id                                      as census_submissions_id,\n        type                                    as census_submissions_type,\n        submitter_role,\n        school_year,\n        how_many_do_hoc,\n        how_many_after_school,\n        how_many_10_hours,\n        how_many_20_hours,\n        other_classes_under_20_hours,\n        topic_blocks                            as is_topic_blocks,\n        topic_text                              as is_topic_text,\n        topic_robots                            as is_topic_robots,\n        topic_internet                          as is_topic_internet,\n        topic_security                          as is_topic_security,\n        topic_data                              as is_topic_data,\n        topic_web_design                        as is_topic_web_design,\n        topic_game_design                       as is_topic_game_design,\n        topic_other                             as is_topic_other,\n        topic_other_description,\n        topic_do_not_know                       as is_topic_do_not_know,\n        class_frequency,\n        pledged                                 as is_pledged,\n        created_at,\n        updated_at,\n        share_with_regional_partners            as is_shared_with_regional_partners,\n        topic_ethical_social                    as is_topic_ethical_social,\n        inaccuracy_reported                     as is_inaccuracy_reported\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__user_geos": {"database": "dev", "schema": "analytics", "name": "base_dashboard__user_geos", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__user_geos.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__user_geos.sql", "unique_id": "model.cdo_analytics.base_dashboard__user_geos", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__user_geos"], "alias": "base_dashboard__user_geos", "checksum": {"name": "sha256", "checksum": "6a859243b9e048820d772497b68c0fab9bb1765e5c1ddca238ef05311c7ded0e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.509627, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'user_geos') }}\n),\n\nrenamed as (\n    select\n        id as user_geo_id,\n        user_id,\n        created_at,\n        updated_at,\n        indexed_at,\n        city,\n        state,\n        lower(country) as country,\n        postal_code\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "user_geos"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.user_geos"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__user_geos.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"user_geos\"\n),\n\nrenamed as (\n    select\n        id as user_geo_id,\n        user_id,\n        created_at,\n        updated_at,\n        indexed_at,\n        city,\n        state,\n        lower(country) as country,\n        postal_code\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__user_proficiencies": {"database": "dev", "schema": "analytics", "name": "base_dashboard__user_proficiencies", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__user_proficiencies.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__user_proficiencies.sql", "unique_id": "model.cdo_analytics.base_dashboard__user_proficiencies", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__user_proficiencies"], "alias": "base_dashboard__user_proficiencies", "checksum": {"name": "sha256", "checksum": "6bd65cea5dbe15519565b3ec24da7a2b34c16505322d4993cfbf2581ae0de70e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.5144045, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'user_proficiencies') }}\n),\n\nrenamed as (\n    select\n        id as user_proficiency_id,\n        user_id,\n        created_at,\n        updated_at,\n        last_progress_at,\n        sequencing_d1_count,\n        sequencing_d2_count,\n        sequencing_d3_count,\n        sequencing_d4_count,\n        sequencing_d5_count,\n        debugging_d1_count,\n        debugging_d2_count,\n        debugging_d3_count,\n        debugging_d4_count,\n        debugging_d5_count,\n        repeat_loops_d1_count,\n        repeat_loops_d2_count,\n        repeat_loops_d3_count,\n        repeat_loops_d4_count,\n        repeat_loops_d5_count,\n        repeat_until_while_d1_count,\n        repeat_until_while_d2_count,\n        repeat_until_while_d3_count,\n        repeat_until_while_d4_count,\n        repeat_until_while_d5_count,\n        for_loops_d1_count,\n        for_loops_d2_count,\n        for_loops_d3_count,\n        for_loops_d4_count,\n        for_loops_d5_count,\n        events_d1_count,\n        events_d2_count,\n        events_d3_count,\n        events_d4_count,\n        events_d5_count,\n        variables_d1_count,\n        variables_d2_count,\n        variables_d3_count,\n        variables_d4_count,\n        variables_d5_count,\n        functions_d1_count,\n        functions_d2_count,\n        functions_d3_count,\n        functions_d4_count,\n        functions_d5_count,\n        functions_with_params_d1_count,\n        functions_with_params_d2_count,\n        functions_with_params_d3_count,\n        functions_with_params_d4_count,\n        functions_with_params_d5_count,\n        conditionals_d1_count,\n        conditionals_d2_count,\n        conditionals_d3_count,\n        conditionals_d4_count,\n        conditionals_d5_count,\n        basic_proficiency_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "user_proficiencies"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.user_proficiencies"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__user_proficiencies.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"user_proficiencies\"\n),\n\nrenamed as (\n    select\n        id as user_proficiency_id,\n        user_id,\n        created_at,\n        updated_at,\n        last_progress_at,\n        sequencing_d1_count,\n        sequencing_d2_count,\n        sequencing_d3_count,\n        sequencing_d4_count,\n        sequencing_d5_count,\n        debugging_d1_count,\n        debugging_d2_count,\n        debugging_d3_count,\n        debugging_d4_count,\n        debugging_d5_count,\n        repeat_loops_d1_count,\n        repeat_loops_d2_count,\n        repeat_loops_d3_count,\n        repeat_loops_d4_count,\n        repeat_loops_d5_count,\n        repeat_until_while_d1_count,\n        repeat_until_while_d2_count,\n        repeat_until_while_d3_count,\n        repeat_until_while_d4_count,\n        repeat_until_while_d5_count,\n        for_loops_d1_count,\n        for_loops_d2_count,\n        for_loops_d3_count,\n        for_loops_d4_count,\n        for_loops_d5_count,\n        events_d1_count,\n        events_d2_count,\n        events_d3_count,\n        events_d4_count,\n        events_d5_count,\n        variables_d1_count,\n        variables_d2_count,\n        variables_d3_count,\n        variables_d4_count,\n        variables_d5_count,\n        functions_d1_count,\n        functions_d2_count,\n        functions_d3_count,\n        functions_d4_count,\n        functions_d5_count,\n        functions_with_params_d1_count,\n        functions_with_params_d2_count,\n        functions_with_params_d3_count,\n        functions_with_params_d4_count,\n        functions_with_params_d5_count,\n        conditionals_d1_count,\n        conditionals_d2_count,\n        conditionals_d3_count,\n        conditionals_d4_count,\n        conditionals_d5_count,\n        basic_proficiency_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__ap_cs_offerings": {"database": "dev", "schema": "analytics", "name": "base_dashboard__ap_cs_offerings", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__ap_cs_offerings.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__ap_cs_offerings.sql", "unique_id": "model.cdo_analytics.base_dashboard__ap_cs_offerings", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__ap_cs_offerings"], "alias": "base_dashboard__ap_cs_offerings", "checksum": {"name": "sha256", "checksum": "51d4b5f041fb9e754f6a63199791c99118b9eb33114fb68658ec6526cfd653e5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.519349, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'ap_cs_offerings') }}\n),\n\nrenamed as (\n    select\n        id as ap_cs_offerings_id,\n        school_code,\n        course,\n        school_year,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "ap_cs_offerings"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.ap_cs_offerings"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__ap_cs_offerings.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"ap_cs_offerings\"\n),\n\nrenamed as (\n    select\n        id as ap_cs_offerings_id,\n        school_code,\n        course,\n        school_year,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__contained_level_answers": {"database": "dev", "schema": "analytics", "name": "base_dashboard__contained_level_answers", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__contained_level_answers.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__contained_level_answers.sql", "unique_id": "model.cdo_analytics.base_dashboard__contained_level_answers", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__contained_level_answers"], "alias": "base_dashboard__contained_level_answers", "checksum": {"name": "sha256", "checksum": "72ff30631d3aefe8bf8a36452cb85a1770ac1dcc4d348bbb8d775889bd1b4671"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.524077, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'contained_level_answers') }}\n),\n\nrenamed as (\n    select\n        id              as contained_level_answers_id,\n        created_at,\n        updated_at,\n        level_id,\n        answer_number,\n        answer_text,\n        correct         as is_correct\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "contained_level_answers"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.contained_level_answers"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__contained_level_answers.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"contained_level_answers\"\n),\n\nrenamed as (\n    select\n        id              as contained_level_answers_id,\n        created_at,\n        updated_at,\n        level_id,\n        answer_number,\n        answer_text,\n        correct         as is_correct\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.base_dashboard__levels": {"database": "dev", "schema": "analytics", "name": "base_dashboard__levels", "resource_type": "model", "package_name": "cdo_analytics", "path": "staging/dashboard/base/base_dashboard__levels.sql", "original_file_path": "models/staging/dashboard/base/base_dashboard__levels.sql", "unique_id": "model.cdo_analytics.base_dashboard__levels", "fqn": ["cdo_analytics", "staging", "dashboard", "base", "base_dashboard__levels"], "alias": "base_dashboard__levels", "checksum": {"name": "sha256", "checksum": "5a331a9a18fbc59ae494003f4fdf49cd3ebe51b6f8d7ef8e85126f0337160efe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "base"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["staging", "base"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "ephemeral", "tags": ["base"]}, "created_at": 1705873846.5288534, "relation_name": null, "raw_code": "with \nsource as (\n    select * \n    from {{ source('dashboard', 'levels') }}\n),\n\nrenamed as (\n    select\n        id                      as level_id,\n        game_id,\n        name,\n        created_at,\n        updated_at,\n        level_num,\n        ideal_level_source_id,\n        user_id,\n        properties,\n        type,\n        md5,\n        published               as is_published,\n        notes,\n        audit_log\n    from source\n)\n\nselect * \nfrom renamed", "language": "sql", "refs": [], "sources": [["dashboard", "levels"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.cdo_analytics.dashboard.levels"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/base/base_dashboard__levels.sql", "compiled": true, "compiled_code": "with \nsource as (\n    select * \n    from \"dashboard\".\"dashboard_production\".\"levels\"\n),\n\nrenamed as (\n    select\n        id                      as level_id,\n        game_id,\n        name,\n        created_at,\n        updated_at,\n        level_num,\n        ideal_level_source_id,\n        user_id,\n        properties,\n        type,\n        md5,\n        published               as is_published,\n        notes,\n        audit_log\n    from source\n)\n\nselect * \nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.int_school_weeks": {"database": "dev", "schema": "analytics", "name": "int_school_weeks", "resource_type": "model", "package_name": "cdo_analytics", "path": "intermediate/int_school_weeks.sql", "original_file_path": "models/intermediate/int_school_weeks.sql", "unique_id": "model.cdo_analytics.int_school_weeks", "fqn": ["cdo_analytics", "intermediate", "int_school_weeks"], "alias": "int_school_weeks", "checksum": {"name": "sha256", "checksum": "907ae8f6653f6e8fa375d22f77031e9ffab74ee811402f2e23cd4bd35a262efe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["int"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["int"], "description": "This model allows us to report metrics on a weekly basis based on timestamps.  We want to do this using ISO weeks to the greatest extent possible because our school year is defined to start on July 1 and end June 30. This means that the start of the school year can start either in ISO week 26 or 27 depending on the year. Some years have 52 weeks and some bleed into a 53rd week. This table numbers the \"school year weeks\" with week 1 possibly being a fragment (less than 7 days) of a week that starts with July 1, and stops at the first ISO week boundary that comes after july 1. Weeks 2 through 51 fall on standard ISO week boundaries. Week 52 (or 53, depending on the year) is another possible fragment of a week running from the ISO week boundary that is closest to June 30, and running up through and including June 30. As a result, for example, the end of one school year (june 30) and the start of another (july 1) may fall entirely within ISO week 27, but in this table you might see ISO week 27 split between \"school year week\" 52 (being 4 days) and school year week 1 of the next year being 3 days.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/intermediate/_intermediate__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "table", "tags": ["int"]}, "created_at": 1705873847.2026432, "relation_name": "\"dev\".\"analytics\".\"int_school_weeks\"", "raw_code": "{# NOTES:\n\nThis creates a corallary to int_school_years, but for weeks of the school year in SCHOOL YEAR ORDER.\n\nWe frequently need to Report metrics on a weekly basis based on timestamps.  We want to do this using\nISO weeks to the greatest extent possible, however, because our school year is defined to start on July 1 and end June 30.\nIt means that the start of the school year can start either in ISO week 26 or 27 depending on the year.\nFurthermore, some years have 52 weeks and some bleed into a 53rd week.\n\nWhen reporting YoY metrics based on school year, we want to line up the beginning of the year with July 1, but \nadhere to standard iso week boundaries as much as possible, since it's likely that other metrics might be grouped the same way.\n\nThe SOLUTION. \n\n1. This table numbers the \"school year weeks\" with week 1 possibly being a fragment (less than 7 days) of a week that starts with July 1,\nand stops at the frist ISO week boundary that comes after july 1.\n\n2. Weeks 2 through 51 fall on standard ISO week boundaries.\n\n3. Week 52 (or 53, depending on the year) is another possible fragment of a week running from the ISO week boundary that is closest to June 30,\nand running up through and including June 30.\n\nAs a result, for example, the end of one school year (june 30) and the start of another (july 1) may fall entirely within ISO week 27, but in\nthis table you might see ISO week 27 split between \"school year week\" 52 (being 4 days) and school year week 1 of the next year being 3 days.\n\nThe final table includes `started_at` and `ended_at` fields for joining (to align to our traditional practice with int_school_years).\nAnd for each school year week it also includes an ISO week reference.  Again, ISO week boundaries match up 1:1 with school_year week boundaries \nEXCEPT for the school_year week 52/week 1 boundaries.  \n\nMETHOD:\n1. Generate all possible dates (literally all the days) and their ISO weeks from the beginning of Code.org time (~July 1, 2013)\n2. Flag all the weeks where either the ISO week changes between days OR the school year changes\n3. The \"school year week\" is the sum/count of all the flags up to that date WITHIN (partitioned by) that school year. \n\n#}\n\n-- Next 3 CTEs are SQL-y way of generating all the days (dates) from the beginning of code.org\n-- time, culminating in the CTE 'date_range'\nwith \n\nschool_years as (\n    select * \n    from {{ ref('seed_school_years') }}\n),\n\nnumbers_small as (\n    select 0 as num\n    union all\n    select 1\n    union all\n    select 2\n    union all\n    select 3\n    union all\n    select 4\n    union all\n    select 5\n    union all\n    select 6\n    union all\n    select 7\n    union all\n    select 8\n    union all\n    select 9\n),\n\nnumbers_large as (\n    select a.num + 10 * b.num + 100 * c.num + 1000 * d.num + 10000 * e.num as num\n    from numbers_small as a\n    cross join numbers_small as b\n    cross join numbers_small as c\n    cross join numbers_small as d\n    cross join numbers_small as e\n),\n\ndate_range as (\n    select\n        sy.school_year,\n        '2013-07-01'::date + num as date,\n        date_part(week, date) as iso_week\n    from numbers_large\n    left join school_years sy\n        on\n            '2013-07-01'::date\n            + num between sy.started_at::date and sy.ended_at::date\n    where '2013-07-01'::date + num <= '2030-06-30'::date\n),\n\nflagged_week_changes as (\n    select\n        dr.*,\n        lag(iso_week) over (order by date) as prev_iso_week,\n\n        -- 'flag' dates where an iso week changes, or the school year changes (july 1)\n        case\n            when\n                iso_week != prev_iso_week\n                or (date_part(month, date) = 7 and date_part(day, date) = 1)\n            then 'flag'\n        end as week_change\n    from date_range dr\n),\n\nschool_week_calc as (\n    select\n        *,\n        -- the school year week is the sum of all the \"flagged\" iso_week changes, including july 1, partition by school year so counting starts over each july 1\n        sum(\n            case \n                when week_change = 'flag' \n                then 1 \n                else 0 \n            end)\n            over (\n                partition by school_year\n                order by date rows between unbounded preceding and current row\n            ) as school_year_week\n    from flagged_week_changes\n)\n\nselect\n    school_year,\n    iso_week::integer,\n    school_year_week::integer,\n    min(date)::timestamp as started_at,     --0:0:0 on start date\n    dateadd(s, -1, max(date)+1) as ended_at,  --subtract 1 second from the next day to give 23:59:59 on end date\n    datediff('day',started_at,ended_at)+1 as days_interval\nfrom school_week_calc\ngroup by\n    school_year,\n    iso_week,\n    school_year_week", "language": "sql", "refs": [{"name": "seed_school_years", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.cdo_analytics.seed_school_years"]}, "compiled_path": "target/compiled/cdo_analytics/models/intermediate/int_school_weeks.sql", "compiled": true, "compiled_code": "\n\n-- Next 3 CTEs are SQL-y way of generating all the days (dates) from the beginning of code.org\n-- time, culminating in the CTE 'date_range'\nwith \n\nschool_years as (\n    select * \n    from \"dev\".\"analytics\".\"seed_school_years\"\n),\n\nnumbers_small as (\n    select 0 as num\n    union all\n    select 1\n    union all\n    select 2\n    union all\n    select 3\n    union all\n    select 4\n    union all\n    select 5\n    union all\n    select 6\n    union all\n    select 7\n    union all\n    select 8\n    union all\n    select 9\n),\n\nnumbers_large as (\n    select a.num + 10 * b.num + 100 * c.num + 1000 * d.num + 10000 * e.num as num\n    from numbers_small as a\n    cross join numbers_small as b\n    cross join numbers_small as c\n    cross join numbers_small as d\n    cross join numbers_small as e\n),\n\ndate_range as (\n    select\n        sy.school_year,\n        '2013-07-01'::date + num as date,\n        date_part(week, date) as iso_week\n    from numbers_large\n    left join school_years sy\n        on\n            '2013-07-01'::date\n            + num between sy.started_at::date and sy.ended_at::date\n    where '2013-07-01'::date + num <= '2030-06-30'::date\n),\n\nflagged_week_changes as (\n    select\n        dr.*,\n        lag(iso_week) over (order by date) as prev_iso_week,\n\n        -- 'flag' dates where an iso week changes, or the school year changes (july 1)\n        case\n            when\n                iso_week != prev_iso_week\n                or (date_part(month, date) = 7 and date_part(day, date) = 1)\n            then 'flag'\n        end as week_change\n    from date_range dr\n),\n\nschool_week_calc as (\n    select\n        *,\n        -- the school year week is the sum of all the \"flagged\" iso_week changes, including july 1, partition by school year so counting starts over each july 1\n        sum(\n            case \n                when week_change = 'flag' \n                then 1 \n                else 0 \n            end)\n            over (\n                partition by school_year\n                order by date rows between unbounded preceding and current row\n            ) as school_year_week\n    from flagged_week_changes\n)\n\nselect\n    school_year,\n    iso_week::integer,\n    school_year_week::integer,\n    min(date)::timestamp as started_at,     --0:0:0 on start date\n    dateadd(s, -1, max(date)+1) as ended_at,  --subtract 1 second from the next day to give 23:59:59 on end date\n    datediff('day',started_at,ended_at)+1 as days_interval\nfrom school_week_calc\ngroup by\n    school_year,\n    iso_week,\n    school_year_week", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.int_school_years": {"database": "dev", "schema": "analytics", "name": "int_school_years", "resource_type": "model", "package_name": "cdo_analytics", "path": "intermediate/int_school_years.sql", "original_file_path": "models/intermediate/int_school_years.sql", "unique_id": "model.cdo_analytics.int_school_years", "fqn": ["cdo_analytics", "intermediate", "int_school_years"], "alias": "int_school_years", "checksum": {"name": "sha256", "checksum": "655c578747801d9bc971195868a20e28637b55b9d82a1c97f8dfe8d2e42cf431"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["int"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["int"], "description": "1 row per school year in different formats", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/intermediate/_intermediate__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "table", "tags": ["int"]}, "created_at": 1705873847.2009096, "relation_name": "\"dev\".\"analytics\".\"int_school_years\"", "raw_code": "{#\nCasting data types to match analysis.school_years\n\nREFERENCE:\n> DESCRIBE analysis.school_years\nCOLUMN_NAME\tDATA_TYPE\nschool_year\tvarchar(256)\nschool_year_int\tinteger\nstarted_at\ttimestamp\nended_at\ttimestamp\nschool_year_long\tvarchar(256)\n\n\n#}\n\nwith \nschool_years as (\n    select\n        school_year::varchar,\n        school_year_int::integer,\n        started_at::timestamp,\n        ended_at::timestamp,\n        school_year_long::varchar\n    from {{ ref('seed_school_years') }}\n)\n\n\nselect *\nfrom school_years\nwhere current_date >= started_at", "language": "sql", "refs": [{"name": "seed_school_years", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.cdo_analytics.seed_school_years"]}, "compiled_path": "target/compiled/cdo_analytics/models/intermediate/int_school_years.sql", "compiled": true, "compiled_code": "\n\nwith \nschool_years as (\n    select\n        school_year::varchar,\n        school_year_int::integer,\n        started_at::timestamp,\n        ended_at::timestamp,\n        school_year_long::varchar\n    from \"dev\".\"analytics\".\"seed_school_years\"\n)\n\n\nselect *\nfrom school_years\nwhere current_date >= started_at", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.int_user_levels": {"database": "dev", "schema": "analytics", "name": "int_user_levels", "resource_type": "model", "package_name": "cdo_analytics", "path": "intermediate/int_user_levels.sql", "original_file_path": "models/intermediate/int_user_levels.sql", "unique_id": "model.cdo_analytics.int_user_levels", "fqn": ["cdo_analytics", "intermediate", "int_user_levels"], "alias": "int_user_levels", "checksum": {"name": "sha256", "checksum": "fefd7a48c3b15f6949a5b25a40f51b99395c52ec37c4d9184e4fcf830690dd0c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["int"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["int"], "description": "xref model for user_level foreign keys (could also be a fact table with a few more columns...)", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/intermediate/_intermediate__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "table", "tags": ["int"]}, "created_at": 1705873847.20222, "relation_name": "\"dev\".\"analytics\".\"int_user_levels\"", "raw_code": "-- int_user_levels\n\nwith \nuser_levels as (\n    select * \n    from {{ ref('stg_dashboard__user_levels') }}\n),\n\nstudents as (\n    select * \n    from {{ ref('dim_students') }}\n    where student_id in (select user_id from user_levels)\n),\n\nfinal as (\n    select \n        distinct user_levels.user_id,\n        students.is_international,\n        user_levels.level_id,\n        user_levels.script_id\n    from user_levels \n    join students \n        on user_levels.user_id = students.student_id \n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_dashboard__user_levels", "package": null, "version": null}, {"name": "dim_students", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.stg_dashboard__user_levels", "model.cdo_analytics.dim_students"]}, "compiled_path": "target/compiled/cdo_analytics/models/intermediate/int_user_levels.sql", "compiled": true, "compiled_code": "-- int_user_levels\n\nwith \nuser_levels as (\n    select * \n    from \"dev\".\"analytics\".\"stg_dashboard__user_levels\"\n),\n\nstudents as (\n    select * \n    from \"dev\".\"analytics\".\"dim_students\"\n    where student_id in (select user_id from user_levels)\n),\n\nfinal as (\n    select \n        distinct user_levels.user_id,\n        students.is_international,\n        user_levels.level_id,\n        user_levels.script_id\n    from user_levels \n    join students \n        on user_levels.user_id = students.student_id \n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.int_active_sections": {"database": "dev", "schema": "analytics", "name": "int_active_sections", "resource_type": "model", "package_name": "cdo_analytics", "path": "intermediate/int_active_sections.sql", "original_file_path": "models/intermediate/int_active_sections.sql", "unique_id": "model.cdo_analytics.int_active_sections", "fqn": ["cdo_analytics", "intermediate", "int_active_sections"], "alias": "int_active_sections", "checksum": {"name": "sha256", "checksum": "d0430e47434b42f100684f23a2c3381e9803e33598bcc43e707a57c65cc9a5e9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["int"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["int"], "description": "all sections passing the \"active\" threshold in a given school year (5+ students completing 1+ levels of same course)", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/intermediate/_intermediate__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "table", "tags": ["int"]}, "created_at": 1705873847.2004228, "relation_name": "\"dev\".\"analytics\".\"int_active_sections\"", "raw_code": "{# Ref: dataops-316 #}\r\n\r\nwith\r\nstudent_section as (\r\n    select *\r\n    from {{ ref('int_section_mapping') }}\r\n),\r\n\r\nstudent_course_starts as (\r\n    select *\r\n    from {{ ref('dim_student_courses') }}\r\n    where student_id in (select student_id from student_section)\r\n),\r\n\r\ncombined as (\r\n    select \r\n         ss.teacher_id\r\n\t\t,ss.school_year\r\n\t\t,scs.course_name\r\n\t\t,ss.section_id\r\n        ,min(scs.first_activity_at) as section_started_at\r\n\t\t,count(distinct ss.student_id) as num_students \r\n\tfrom student_course_starts scs\r\n\tjoin student_section ss \r\n\ton scs.student_id = ss.student_id \r\n    and scs.school_year = ss.school_year \r\n\tgroup by 1,2,3,4\r\n),\r\n\r\nfinal as (\r\n    select \r\n         teacher_id\r\n        ,school_year\r\n        ,course_name\r\n        ,section_id\r\n        ,section_started_at\r\n        ,num_students\r\n    from combined\r\n    where num_students >= 5\r\n)\r\n\r\nselect *\r\nfrom final", "language": "sql", "refs": [{"name": "int_section_mapping", "package": null, "version": null}, {"name": "dim_student_courses", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.int_section_mapping", "model.cdo_analytics.dim_student_courses"]}, "compiled_path": "target/compiled/cdo_analytics/models/intermediate/int_active_sections.sql", "compiled": true, "compiled_code": "\n\nwith\nstudent_section as (\n    select *\n    from \"dev\".\"analytics\".\"int_section_mapping\"\n),\n\nstudent_course_starts as (\n    select *\n    from \"dev\".\"analytics\".\"dim_student_courses\"\n    where student_id in (select student_id from student_section)\n),\n\ncombined as (\n    select \n         ss.teacher_id\n\t\t,ss.school_year\n\t\t,scs.course_name\n\t\t,ss.section_id\n        ,min(scs.first_activity_at) as section_started_at\n\t\t,count(distinct ss.student_id) as num_students \n\tfrom student_course_starts scs\n\tjoin student_section ss \n\ton scs.student_id = ss.student_id \n    and scs.school_year = ss.school_year \n\tgroup by 1,2,3,4\n),\n\nfinal as (\n    select \n         teacher_id\n        ,school_year\n        ,course_name\n        ,section_id\n        ,section_started_at\n        ,num_students\n    from combined\n    where num_students >= 5\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.int_section_mapping": {"database": "dev", "schema": "analytics", "name": "int_section_mapping", "resource_type": "model", "package_name": "cdo_analytics", "path": "intermediate/int_section_mapping.sql", "original_file_path": "models/intermediate/int_section_mapping.sql", "unique_id": "model.cdo_analytics.int_section_mapping", "fqn": ["cdo_analytics", "intermediate", "int_section_mapping"], "alias": "int_section_mapping", "checksum": {"name": "sha256", "checksum": "818deaa3df5b3dfdecaac649ed423ec48b8bfe7524c8c667c6826db1429dd1fd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["int"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["int"], "description": "xref table to pull together these FK's for reference", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/intermediate/_intermediate__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "table", "tags": ["int"]}, "created_at": 1705873847.2013743, "relation_name": "\"dev\".\"analytics\".\"int_section_mapping\"", "raw_code": "/* \n1. Design:\n    school_year\n    student_id\n    teacher_id\n    section_id\n\n2. Definitions:\n    this table provides mapping across these foreign keys, \n    serving as an intermediary (xref) model\n\n3. Sources:\n\nRef: DATAOPS-321 */\n\nwith \nschool_years as (\n    select *\n    from {{ ref('int_school_years') }}\n),\n\nfollowers as (\n    select *\n    from {{ ref('stg_dashboard__followers') }}\n),\n\nteachers as (\n    select distinct \n        teacher_id,\n        school_id\n    from {{ ref('dim_teachers') }}\n),\n\nsections as (\n    select distinct \n        user_id,\n        section_id\n    from {{ ref('stg_dashboard__sections') }}\n),\n\ncombined as (\n    select \n        sy.school_year, \n        followers.student_id,\n        sections.user_id            as teacher_id,\n        sections.section_id         as section_id,\n        teachers.school_id,\n        row_number() over(\n            partition by \n                followers.student_id, \n                sy.school_year\n                order by \n                    followers.created_at\n        ) as row_num\n\n    from followers  \n    left join sections \n        on followers.section_id = sections.section_id\n    left join teachers \n        on sections.user_id = teachers.teacher_id\n    join school_years as sy \n        on followers.created_at \n            between sy.started_at and sy.ended_at\n),\n\nfinal as (\n    select \n        student_id,\n        school_year,\n        section_id,\n        teacher_id,\n        school_id\n    from combined\n    where row_num = 1\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "int_school_years", "package": null, "version": null}, {"name": "stg_dashboard__followers", "package": null, "version": null}, {"name": "dim_teachers", "package": null, "version": null}, {"name": "stg_dashboard__sections", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.int_school_years", "model.cdo_analytics.stg_dashboard__followers", "model.cdo_analytics.dim_teachers", "model.cdo_analytics.stg_dashboard__sections"]}, "compiled_path": "target/compiled/cdo_analytics/models/intermediate/int_section_mapping.sql", "compiled": true, "compiled_code": "/* \n1. Design:\n    school_year\n    student_id\n    teacher_id\n    section_id\n\n2. Definitions:\n    this table provides mapping across these foreign keys, \n    serving as an intermediary (xref) model\n\n3. Sources:\n\nRef: DATAOPS-321 */\n\nwith \nschool_years as (\n    select *\n    from \"dev\".\"analytics\".\"int_school_years\"\n),\n\nfollowers as (\n    select *\n    from \"dev\".\"analytics\".\"stg_dashboard__followers\"\n),\n\nteachers as (\n    select distinct \n        teacher_id,\n        school_id\n    from \"dev\".\"analytics\".\"dim_teachers\"\n),\n\nsections as (\n    select distinct \n        user_id,\n        section_id\n    from \"dev\".\"analytics\".\"stg_dashboard__sections\"\n),\n\ncombined as (\n    select \n        sy.school_year, \n        followers.student_id,\n        sections.user_id            as teacher_id,\n        sections.section_id         as section_id,\n        teachers.school_id,\n        row_number() over(\n            partition by \n                followers.student_id, \n                sy.school_year\n                order by \n                    followers.created_at\n        ) as row_num\n\n    from followers  \n    left join sections \n        on followers.section_id = sections.section_id\n    left join teachers \n        on sections.user_id = teachers.teacher_id\n    join school_years as sy \n        on followers.created_at \n            between sy.started_at and sy.ended_at\n),\n\nfinal as (\n    select \n        student_id,\n        school_year,\n        section_id,\n        teacher_id,\n        school_id\n    from combined\n    where row_num = 1\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.int_teacher_schools_historical": {"database": "dev", "schema": "analytics", "name": "int_teacher_schools_historical", "resource_type": "model", "package_name": "cdo_analytics", "path": "intermediate/int_teacher_schools_historical.sql", "original_file_path": "models/intermediate/int_teacher_schools_historical.sql", "unique_id": "model.cdo_analytics.int_teacher_schools_historical", "fqn": ["cdo_analytics", "intermediate", "int_teacher_schools_historical"], "alias": "int_teacher_schools_historical", "checksum": {"name": "sha256", "checksum": "85627ec0b1fd5e97e7d63a7a0a775c616527f8afb2dc52ffb26ed8a5024a2a95"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["int"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["int"], "description": "all historical school associations made by teachers-- for a given school year, it takes their most recent school selection", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/intermediate/_intermediate__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "table", "tags": ["int"]}, "created_at": 1705873847.2017746, "relation_name": "\"dev\".\"analytics\".\"int_teacher_schools_historical\"", "raw_code": "{# Notes:\nDesign: 1 row per teacher, school year\nLogic: For every school year, assign the latest school the teacher was associated with in that school year. \n#}\n\nwith \nuser_school_infos as (\n    select * \n    from {{ ref('stg_dashboard_pii__user_school_infos') }}\n),\n\nschool_infos as (\n    select * \n    from {{ ref('stg_dashboard__school_infos') }}\n),\n\nschool_years as (\n    select *\n    from {{ ref('int_school_years') }}\n),\n\nuser_school_infos_sy as (\n    select \n        usi.user_id,\n        sy.school_year as started_at_sy,\n        row_number() over (partition by usi.user_id, sy.school_year order by usi.started_at desc) as row_num,\n        usi.school_info_id,\n        si.school_id,\n        usi.started_at,\n        usi.ended_at\n    from user_school_infos usi\n    left join school_infos si \n        on usi.school_info_id = si.school_info_id\n    join school_years sy \n        on usi.started_at between sy.started_at and sy.ended_at\n),\n\nfinal as (\n    select \n        usi_sy.user_id as teacher_id,\n        usi_sy.started_at_sy,\n        usi_sy.started_at, \n        usi_sy.ended_at,\n        usi_sy.school_info_id,\n        usi_sy.school_id\n    from user_school_infos_sy as usi_sy \n    where row_num = 1\n    order by started_at_sy\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_dashboard_pii__user_school_infos", "package": null, "version": null}, {"name": "stg_dashboard__school_infos", "package": null, "version": null}, {"name": "int_school_years", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.stg_dashboard_pii__user_school_infos", "model.cdo_analytics.stg_dashboard__school_infos", "model.cdo_analytics.int_school_years"]}, "compiled_path": "target/compiled/cdo_analytics/models/intermediate/int_teacher_schools_historical.sql", "compiled": true, "compiled_code": "\n\nwith \nuser_school_infos as (\n    select * \n    from \"dev\".\"analytics\".\"stg_dashboard_pii__user_school_infos\"\n),\n\nschool_infos as (\n    select * \n    from \"dev\".\"analytics\".\"stg_dashboard__school_infos\"\n),\n\nschool_years as (\n    select *\n    from \"dev\".\"analytics\".\"int_school_years\"\n),\n\nuser_school_infos_sy as (\n    select \n        usi.user_id,\n        sy.school_year as started_at_sy,\n        row_number() over (partition by usi.user_id, sy.school_year order by usi.started_at desc) as row_num,\n        usi.school_info_id,\n        si.school_id,\n        usi.started_at,\n        usi.ended_at\n    from user_school_infos usi\n    left join school_infos si \n        on usi.school_info_id = si.school_info_id\n    join school_years sy \n        on usi.started_at between sy.started_at and sy.ended_at\n),\n\nfinal as (\n    select \n        usi_sy.user_id as teacher_id,\n        usi_sy.started_at_sy,\n        usi_sy.started_at, \n        usi_sy.ended_at,\n        usi_sy.school_info_id,\n        usi_sy.school_id\n    from user_school_infos_sy as usi_sy \n    where row_num = 1\n    order by started_at_sy\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.dim_user_stages": {"database": "dev", "schema": "analytics", "name": "dim_user_stages", "resource_type": "model", "package_name": "cdo_analytics", "path": "marts/users/dim_user_stages.sql", "original_file_path": "models/marts/users/dim_user_stages.sql", "unique_id": "model.cdo_analytics.dim_user_stages", "fqn": ["cdo_analytics", "marts", "users", "dim_user_stages"], "alias": "dim_user_stages", "checksum": {"name": "sha256", "checksum": "1c6a698738a6e33c52740bc055d3cf6b064a8b01485fb3125bb448efbb418ec5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["mart"], "description": "1 row for every time a user has activity within a stage, aggregates number of levels touched within stage", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/marts/users/_users_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "table", "tags": ["mart"]}, "created_at": 1705873847.2219741, "relation_name": "\"dev\".\"analytics\".\"dim_user_stages\"", "raw_code": "with\nuser_levels as (\n    select *\n    from {{ ref('stg_dashboard__user_levels') }}\n),\n\nlevels_script_levels as (\n    select * \n    from {{ ref('stg_dashboard__levels_script_levels') }}\n),\n\nscript_levels as (\n    select * \n    from {{ ref('stg_dashboard__script_levels') }}\n),\n\nstages as (\n    select * \n    from {{ ref('stg_dashboard__stages') }}\n),\n\nlevels as (\n    select * \n    from {{ ref('stg_dashboard__levels') }}\n    where type != 'StandaloneVideo'\n    -- excludes problematic levels shared across the multiple stages in the same script, which we can't differentiate\n),\n\ncourse_scripts as (\n    select * \n    from {{ ref('stg_dashboard__course_scripts') }}\n),\n\nfinal as (\n    select \n        ul.user_id, \n        cs.course_id, \n        sl.script_id, \n        st.stage_id, \n        st.absolute_position      as stage_number, \n        count(*)                  as levels_attempted,\n        min(ul.created_at)::date  as stage_started_at,\n        max(ul.updated_at)        as updated_at\n    from user_levels ul\n    join levels_script_levels lsl on lsl.level_id = ul.level_id\n    join script_levels sl on sl.script_level_id = lsl.script_level_id and sl.script_id = ul.script_id\n    join stages st on st.stage_id = sl.stage_id\n    join levels le on le.level_id = lsl.level_id\n    left join course_scripts cs on cs.script_id = ul.script_id\n    group by 1,2,3,4,5\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_dashboard__user_levels", "package": null, "version": null}, {"name": "stg_dashboard__levels_script_levels", "package": null, "version": null}, {"name": "stg_dashboard__script_levels", "package": null, "version": null}, {"name": "stg_dashboard__stages", "package": null, "version": null}, {"name": "stg_dashboard__levels", "package": null, "version": null}, {"name": "stg_dashboard__course_scripts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.stg_dashboard__user_levels", "model.cdo_analytics.stg_dashboard__levels_script_levels", "model.cdo_analytics.stg_dashboard__script_levels", "model.cdo_analytics.stg_dashboard__stages", "model.cdo_analytics.stg_dashboard__levels", "model.cdo_analytics.stg_dashboard__course_scripts"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/users/dim_user_stages.sql", "compiled": true, "compiled_code": "with\nuser_levels as (\n    select *\n    from \"dev\".\"analytics\".\"stg_dashboard__user_levels\"\n),\n\nlevels_script_levels as (\n    select * \n    from \"dev\".\"analytics\".\"stg_dashboard__levels_script_levels\"\n),\n\nscript_levels as (\n    select * \n    from \"dev\".\"analytics\".\"stg_dashboard__script_levels\"\n),\n\nstages as (\n    select * \n    from \"dev\".\"analytics\".\"stg_dashboard__stages\"\n),\n\nlevels as (\n    select * \n    from \"dev\".\"analytics\".\"stg_dashboard__levels\"\n    where type != 'StandaloneVideo'\n    -- excludes problematic levels shared across the multiple stages in the same script, which we can't differentiate\n),\n\ncourse_scripts as (\n    select * \n    from \"dev\".\"analytics\".\"stg_dashboard__course_scripts\"\n),\n\nfinal as (\n    select \n        ul.user_id, \n        cs.course_id, \n        sl.script_id, \n        st.stage_id, \n        st.absolute_position      as stage_number, \n        count(*)                  as levels_attempted,\n        min(ul.created_at)::date  as stage_started_at,\n        max(ul.updated_at)        as updated_at\n    from user_levels ul\n    join levels_script_levels lsl on lsl.level_id = ul.level_id\n    join script_levels sl on sl.script_level_id = lsl.script_level_id and sl.script_id = ul.script_id\n    join stages st on st.stage_id = sl.stage_id\n    join levels le on le.level_id = lsl.level_id\n    left join course_scripts cs on cs.script_id = ul.script_id\n    group by 1,2,3,4,5\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.dim_school_status": {"database": "dev", "schema": "analytics", "name": "dim_school_status", "resource_type": "model", "package_name": "cdo_analytics", "path": "marts/schools/dim_school_status.sql", "original_file_path": "models/marts/schools/dim_school_status.sql", "unique_id": "model.cdo_analytics.dim_school_status", "fqn": ["cdo_analytics", "marts", "schools", "dim_school_status"], "alias": "dim_school_status", "checksum": {"name": "sha256", "checksum": "e210f6758fcde4f574410c8dcb7e236300086755c21c20568f62d9a9e8774567"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["mart"], "description": "This model categorizes schools based on their activity status across different school years. It provides insights into user engagement by assigning a status that reflects their activity in the current, previous, and any earlier school years.", "columns": {"school_id": {"name": "school_id", "description": "NCES school ID (this school must have been selected by teacher via NCES dropdown in account setup)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "school year in which an activity status is assigned", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "### Active status of a school in a given school year. Can be one of the following: \n- Market- The school is not currently active and has never been active.\n- Inactive Churn- The school is not currently active, was not active in the previous year, but has been active in the past.\n- Inactive This Year- The school is not currently active but was active in the previous year.\n- Active New- The school is currently active, was not active in the previous year, and has never been active before.\n- Active Reacquired- The school is currently active, was not active in the previous year, but has been active in some previous years.\n- Active Retained- The school is currently active and has been active in the previous year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_started_at": {"name": "school_started_at", "description": "time of first activity from an active section at this school in this school year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_courses": {"name": "active_courses", "description": "comma separated list of courses associated with active sections at this school in this school year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/marts/schools/_schools__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "table", "tags": ["mart"]}, "created_at": 1705873847.2305086, "relation_name": "\"dev\".\"analytics\".\"dim_school_status\"", "raw_code": "{# Notes:\nDesign: 1 row per school, school_year, churn_status\nLogic: we can determine status based on three properties we can compute for every user|school_year as a binary:\n    - 0/1 they are active this school_year - (A)ctive\n    - 0/1 they were active in the previous school_year - (P)rev year\n    - 0/1 they have ever been active in ANY school_year prior, incl. prev year - (E)ver before\n\n    These 3 values can be combined into an ordered 3-char string representing the concatenated true/false combinations \n    for Active|Prev|Ever e.g. \"101\" means: ( Active = true AND Prev year = false AND Ever before = true )\n\n    - '000' (0) = 'market'              -- Not active now + never been active\n    - '001' (1) = 'inactive churn'      -- NOT active + NOT active prev year + active ever before\n    - '010' (2) = '<impossible status>' -- should not be possible, active in the prev year should imply active ever before\n    - '011' (3) = 'inactive this year'  -- NOT active + active prev year + (active ever before implied)\n    - '100' (4) = 'active new'          -- active this year + NOT active last year + NOT active ever before\n    - '101' (5) = 'active reacquired'   -- Active this year + NOT active last year + active in the past\n    - '110' (6) = '<impossible status>' -- impossible for same reason as status (2)\n    - '111' (7) = 'active retained'     -- active this year + active last year + (active ever before implied) \n#}\n\nwith \n\nall_schools as (\n    select school_id\n    from {{ ref('dim_schools') }}\n),\n\nschool_years as (\n    select * \n    from {{ ref('int_school_years') }}\n),\n\nall_schools_sy as (\n    select \n        all_schools.school_id,\n        school_years.school_year\n    from all_schools \n    cross join school_years\n),\n\nteacher_school_changes as (\n    select *\n    from {{ ref('int_teacher_schools_historical') }}\n),\n\nteacher_active_courses as (\n    select \n        distinct teacher_id,\n        school_year,\n        course_name,\n        section_started_at\n    from {{ref('int_active_sections')}}\n),\n\nteacher_active_courses_with_sy as (\n\n    select\n        tac.teacher_id,\n        tac.school_year,\n        tac.course_name,\n        tac.section_started_at,\n        tsc.school_id\n    from teacher_active_courses tac \n    join school_years sy\n        on tac.school_year = sy.school_year\n    join teacher_school_changes tsc \n        on tac.teacher_id = tsc.teacher_id \n        and sy.ended_at between tsc.started_at and tsc.ended_at \n),\n\nstarted_schools as (\n    select \n        school_id,\n        school_year,\n        min(section_started_at) as school_started_at,\n        listagg( distinct course_name, ', ') within group (order by course_name) active_courses\n    from teacher_active_courses_with_sy\n    group by 1, 2\n),\n\nactive_status_simple as (\n    select \n        all_schools_sy.school_id,\n        all_schools_sy.school_year,\n        case when started_schools.school_id is null then 0 else 1 end as is_active,\n        started_schools.school_started_at,\n        started_schools.active_courses\n    from all_schools_sy \n    left join started_schools\n        on started_schools.school_id = all_schools_sy.school_id \n        and started_schools.school_year = all_schools_sy.school_year\n),\n\nfull_status as (\n    -- Determine the active status for each school in each school year\n\n    select\n        school_id,\n        school_year,\n        is_active,\n        coalesce(\n            lag(is_active, 1) \n                over (partition by school_id order by school_year) \n            , 0\n        ) as prev_year_active,\n        coalesce( --force any NULL to be 0 for this function\n            max(is_active) \n                over (partition by school_id order by school_year rows between unbounded preceding and 1 preceding)\n            , 0\n        ) as ever_active_before,\n        (is_active || prev_year_active || ever_active_before) status_code,\n        school_started_at,\n        active_courses\n    from\n        active_status_simple\n\n), \n\nfinal as (\n\n    select\n        school_id,\n        school_year,\n        case \n            when status_code = '000' then 'market'\n            when status_code = '001' then 'inactive churn'\n            when status_code = '010' then '<impossible status>'\n            when status_code = '011' then 'inactive this year'\n            when status_code = '100' then 'active new'\n            when status_code = '101' then 'active reacquired'\n            when status_code = '110' then '<impossible status>'\n            when status_code = '111' then 'active retained'\n        end as status,\n        school_started_at,\n        active_courses\n        from full_status\n    order by\n        school_id, school_year\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "dim_schools", "package": null, "version": null}, {"name": "int_school_years", "package": null, "version": null}, {"name": "int_teacher_schools_historical", "package": null, "version": null}, {"name": "int_active_sections", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.dim_schools", "model.cdo_analytics.int_school_years", "model.cdo_analytics.int_teacher_schools_historical", "model.cdo_analytics.int_active_sections"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/schools/dim_school_status.sql", "compiled": true, "compiled_code": "\n\nwith \n\nall_schools as (\n    select school_id\n    from \"dev\".\"analytics\".\"dim_schools\"\n),\n\nschool_years as (\n    select * \n    from \"dev\".\"analytics\".\"int_school_years\"\n),\n\nall_schools_sy as (\n    select \n        all_schools.school_id,\n        school_years.school_year\n    from all_schools \n    cross join school_years\n),\n\nteacher_school_changes as (\n    select *\n    from \"dev\".\"analytics\".\"int_teacher_schools_historical\"\n),\n\nteacher_active_courses as (\n    select \n        distinct teacher_id,\n        school_year,\n        course_name,\n        section_started_at\n    from \"dev\".\"analytics\".\"int_active_sections\"\n),\n\nteacher_active_courses_with_sy as (\n\n    select\n        tac.teacher_id,\n        tac.school_year,\n        tac.course_name,\n        tac.section_started_at,\n        tsc.school_id\n    from teacher_active_courses tac \n    join school_years sy\n        on tac.school_year = sy.school_year\n    join teacher_school_changes tsc \n        on tac.teacher_id = tsc.teacher_id \n        and sy.ended_at between tsc.started_at and tsc.ended_at \n),\n\nstarted_schools as (\n    select \n        school_id,\n        school_year,\n        min(section_started_at) as school_started_at,\n        listagg( distinct course_name, ', ') within group (order by course_name) active_courses\n    from teacher_active_courses_with_sy\n    group by 1, 2\n),\n\nactive_status_simple as (\n    select \n        all_schools_sy.school_id,\n        all_schools_sy.school_year,\n        case when started_schools.school_id is null then 0 else 1 end as is_active,\n        started_schools.school_started_at,\n        started_schools.active_courses\n    from all_schools_sy \n    left join started_schools\n        on started_schools.school_id = all_schools_sy.school_id \n        and started_schools.school_year = all_schools_sy.school_year\n),\n\nfull_status as (\n    -- Determine the active status for each school in each school year\n\n    select\n        school_id,\n        school_year,\n        is_active,\n        coalesce(\n            lag(is_active, 1) \n                over (partition by school_id order by school_year) \n            , 0\n        ) as prev_year_active,\n        coalesce( --force any NULL to be 0 for this function\n            max(is_active) \n                over (partition by school_id order by school_year rows between unbounded preceding and 1 preceding)\n            , 0\n        ) as ever_active_before,\n        (is_active || prev_year_active || ever_active_before) status_code,\n        school_started_at,\n        active_courses\n    from\n        active_status_simple\n\n), \n\nfinal as (\n\n    select\n        school_id,\n        school_year,\n        case \n            when status_code = '000' then 'market'\n            when status_code = '001' then 'inactive churn'\n            when status_code = '010' then '<impossible status>'\n            when status_code = '011' then 'inactive this year'\n            when status_code = '100' then 'active new'\n            when status_code = '101' then 'active reacquired'\n            when status_code = '110' then '<impossible status>'\n            when status_code = '111' then 'active retained'\n        end as status,\n        school_started_at,\n        active_courses\n        from full_status\n    order by\n        school_id, school_year\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.dim_school_districts": {"database": "dev", "schema": "analytics", "name": "dim_school_districts", "resource_type": "model", "package_name": "cdo_analytics", "path": "marts/schools/dim_school_districts.sql", "original_file_path": "models/marts/schools/dim_school_districts.sql", "unique_id": "model.cdo_analytics.dim_school_districts", "fqn": ["cdo_analytics", "marts", "schools", "dim_school_districts"], "alias": "dim_school_districts", "checksum": {"name": "sha256", "checksum": "44897f1158ac065cff02c374283e3ce65e68f6c8ec5c7833844e2df63332230f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["mart"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "table", "tags": ["mart"]}, "created_at": 1705873846.5731761, "relation_name": "\"dev\".\"analytics\".\"dim_school_districts\"", "raw_code": "-- model: dim_school_districts\n-- scope: all dimensions currently available for school districts\n-- author: AG\n-- date: 2024-01-01 \n\nwith\nschools as (\n    select \n        school_district_id,\n        -- aggregations at level of district\n        count(distinct dim_schools.school_id)           as num_schools,\n        sum(dim_schools.is_stage_el)                    as num_schools_stage_el,\n        sum(dim_schools.is_stage_mi)                    as num_schools_stage_mi,\n        sum(dim_schools.is_stage_hi)                    as num_schools_stage_hi,\n        sum(dim_schools.is_rural)                       as num_schools_rural,\n        sum(dim_schools.is_title_i)                     as num_schools_title_i,\n        sum(dim_schools.is_high_needs)                  as num_schools_high_needs,\n        sum(dim_schools.total_students)                 as num_students,\n        sum(dim_schools.total_frl_eligible_students)    as num_students_frl_eligible,\n        sum(total_urg_students)                         as num_students_urg\n    from {{ ref('dim_schools') }}\n    where school_district_id is not null\n    {{ dbt_utils.group_by(1) }}\n),\n\nschool_districts as (\n    select * \n    from {{ ref('stg_dashboard__school_districts') }}\n    where school_district_id in (select school_district_id from schools)    \n),\n\ncombined as (\n    select \n        -- school district info\n        school_districts.school_district_id,\n        school_districts.school_district_name,\n        school_districts.school_district_city,\n        school_districts.school_district_state,\n        school_districts.school_district_zip,\n        school_districts.last_known_school_year_open,\n        \n        -- school info + aggs\n        schools.num_schools                 as total_schools,-- are these active only?\n        schools.num_schools_stage_el        as total_schools_stage_el,\n        schools.num_schools_stage_mi        as total_schools_stage_mi,\n        schools.num_schools_stage_hi        as total_schools_stage_hi,\n        schools.num_schools_rural           as total_schools_rural,\n        schools.num_schools_title_i         as total_schools_title_i,\n        schools.num_schools_high_needs      as total_schools_high_needs,\n        schools.num_students                as total_students,\n        schools.num_students_frl_eligible   as total_students_frl_eligible,\n        schools.num_students_urg            as total_students_urg,\n        sum(num_students_urg / cast(num_students as float))::decimal(10,2)          as total_district_pct_students_urg,\n        sum(num_students_frl_eligible / cast(num_students as float))::decimal(10,2) as total_district_pct_students_frl_eligible\n    from schools\n    left join school_districts\n        on schools.school_district_id = school_districts.school_district_id\n    {{ dbt_utils.group_by(16) }}\n)\n\nselect * \nfrom combined", "language": "sql", "refs": [{"name": "dim_schools", "package": null, "version": null}, {"name": "stg_dashboard__school_districts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.cdo_analytics.dim_schools", "model.cdo_analytics.stg_dashboard__school_districts"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/schools/dim_school_districts.sql", "compiled": true, "compiled_code": "-- model: dim_school_districts\n-- scope: all dimensions currently available for school districts\n-- author: AG\n-- date: 2024-01-01 \n\nwith\nschools as (\n    select \n        school_district_id,\n        -- aggregations at level of district\n        count(distinct dim_schools.school_id)           as num_schools,\n        sum(dim_schools.is_stage_el)                    as num_schools_stage_el,\n        sum(dim_schools.is_stage_mi)                    as num_schools_stage_mi,\n        sum(dim_schools.is_stage_hi)                    as num_schools_stage_hi,\n        sum(dim_schools.is_rural)                       as num_schools_rural,\n        sum(dim_schools.is_title_i)                     as num_schools_title_i,\n        sum(dim_schools.is_high_needs)                  as num_schools_high_needs,\n        sum(dim_schools.total_students)                 as num_students,\n        sum(dim_schools.total_frl_eligible_students)    as num_students_frl_eligible,\n        sum(total_urg_students)                         as num_students_urg\n    from \"dev\".\"analytics\".\"dim_schools\"\n    where school_district_id is not null\n    group by 1\n),\n\nschool_districts as (\n    select * \n    from \"dev\".\"analytics\".\"stg_dashboard__school_districts\"\n    where school_district_id in (select school_district_id from schools)    \n),\n\ncombined as (\n    select \n        -- school district info\n        school_districts.school_district_id,\n        school_districts.school_district_name,\n        school_districts.school_district_city,\n        school_districts.school_district_state,\n        school_districts.school_district_zip,\n        school_districts.last_known_school_year_open,\n        \n        -- school info + aggs\n        schools.num_schools                 as total_schools,-- are these active only?\n        schools.num_schools_stage_el        as total_schools_stage_el,\n        schools.num_schools_stage_mi        as total_schools_stage_mi,\n        schools.num_schools_stage_hi        as total_schools_stage_hi,\n        schools.num_schools_rural           as total_schools_rural,\n        schools.num_schools_title_i         as total_schools_title_i,\n        schools.num_schools_high_needs      as total_schools_high_needs,\n        schools.num_students                as total_students,\n        schools.num_students_frl_eligible   as total_students_frl_eligible,\n        schools.num_students_urg            as total_students_urg,\n        sum(num_students_urg / cast(num_students as float))::decimal(10,2)          as total_district_pct_students_urg,\n        sum(num_students_frl_eligible / cast(num_students as float))::decimal(10,2) as total_district_pct_students_frl_eligible\n    from schools\n    left join school_districts\n        on schools.school_district_id = school_districts.school_district_id\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16\n)\n\nselect * \nfrom combined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.dim_school_stats_by_years": {"database": "dev", "schema": "analytics", "name": "dim_school_stats_by_years", "resource_type": "model", "package_name": "cdo_analytics", "path": "marts/schools/dim_school_stats_by_years.sql", "original_file_path": "models/marts/schools/dim_school_stats_by_years.sql", "unique_id": "model.cdo_analytics.dim_school_stats_by_years", "fqn": ["cdo_analytics", "marts", "schools", "dim_school_stats_by_years"], "alias": "dim_school_stats_by_years", "checksum": {"name": "sha256", "checksum": "bdfc9aaf0fa5cce49264a12705d861344abd2ec53e8c15661816fbe55c192cd6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["mart"], "description": "historical record of all NCES school stats and associated calculations", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/marts/schools/_schools__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "table", "tags": ["mart"]}, "created_at": 1705873847.2291496, "relation_name": "\"dev\".\"analytics\".\"dim_school_stats_by_years\"", "raw_code": "-- Note: this data is built using NCES data recevied\n\nwith \nschool_stats_by_years as (\n    select \n        *,\n\n        -- pre-process these totals here\n        sum(count_student_am \n            + count_student_hi\n            + count_student_bl\n            + count_student_hp)\n        as total_urg_no_tr_students,\n\n        sum(count_student_am\n            + count_student_hi\n            + count_student_bl\n            + count_student_hp\n            + count_student_tr)\n         as total_urg_students,\n\n        sum(count_student_am  \n            + count_student_as  \n            + count_student_hi  \n            + count_student_bl  \n            + count_student_wh  \n            + count_student_hp\n            + count_student_tr)\n        as total_students_calculated\n\n    from {{ ref('stg_dashboard__school_stats_by_years') }}\n    \n    {{ dbt_utils.group_by(40) }}\n),\n\ncombined as (\n    select \n        *,\n\n        -- calculations \n        total_urg_students / nullif(total_students_calculated,0)::float as urg_percent,\n\n        total_urg_no_tr_students / nullif(total_students_calculated,0)::float as urg_no_tr_percent,\n\n        -- case when total_students_calculated / total_students >= .7\n        --      then total_urg_students / total_students_calculated\n        -- end as urg_percent_true,\n        \n        total_frl_eligible_students / nullif(total_students,0)::float as frl_eligible_percent\n\n    from school_stats_by_years\n)\n\nselect *\nfrom combined", "language": "sql", "refs": [{"name": "stg_dashboard__school_stats_by_years", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.cdo_analytics.stg_dashboard__school_stats_by_years"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/schools/dim_school_stats_by_years.sql", "compiled": true, "compiled_code": "-- Note: this data is built using NCES data recevied\n\nwith \nschool_stats_by_years as (\n    select \n        *,\n\n        -- pre-process these totals here\n        sum(count_student_am \n            + count_student_hi\n            + count_student_bl\n            + count_student_hp)\n        as total_urg_no_tr_students,\n\n        sum(count_student_am\n            + count_student_hi\n            + count_student_bl\n            + count_student_hp\n            + count_student_tr)\n         as total_urg_students,\n\n        sum(count_student_am  \n            + count_student_as  \n            + count_student_hi  \n            + count_student_bl  \n            + count_student_wh  \n            + count_student_hp\n            + count_student_tr)\n        as total_students_calculated\n\n    from \"dev\".\"analytics\".\"stg_dashboard__school_stats_by_years\"\n    \n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40\n),\n\ncombined as (\n    select \n        *,\n\n        -- calculations \n        total_urg_students / nullif(total_students_calculated,0)::float as urg_percent,\n\n        total_urg_no_tr_students / nullif(total_students_calculated,0)::float as urg_no_tr_percent,\n\n        -- case when total_students_calculated / total_students >= .7\n        --      then total_urg_students / total_students_calculated\n        -- end as urg_percent_true,\n        \n        total_frl_eligible_students / nullif(total_students,0)::float as frl_eligible_percent\n\n    from school_stats_by_years\n)\n\nselect *\nfrom combined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.dim_schools": {"database": "dev", "schema": "analytics", "name": "dim_schools", "resource_type": "model", "package_name": "cdo_analytics", "path": "marts/schools/dim_schools.sql", "original_file_path": "models/marts/schools/dim_schools.sql", "unique_id": "model.cdo_analytics.dim_schools", "fqn": ["cdo_analytics", "marts", "schools", "dim_schools"], "alias": "dim_schools", "checksum": {"name": "sha256", "checksum": "3ad98f26538c726ab83a30a8d3cb30640dc6e61027f636acfcb818fc5ebe5115"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["mart"], "description": "NCES school-level information for the most recent school year it is updated for", "columns": {"school_id": {"name": "school_id", "description": "the NCES id associated with a school", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "the school year associated with the most recent information about this school from NCES", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_stage_el": {"name": "is_stage_el", "description": "binary; 1 if the school has any grade levels 0-5, 0 if not", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_stage_mi": {"name": "is_stage_mi", "description": "binary; 1 if the school has any grade levels 6-8, 0 if not", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_stage_hi": {"name": "is_stage_hi", "description": "binary; 1 if the school has any grade levels 9-12, 0 if not", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_level_simple": {"name": "school_level_simple", "description": "a combination of all school levels the school contains, separated by underscores", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_urg_no_tr_students": {"name": "total_urg_no_tr_students", "description": "total number of URG students, excluding those identifying as two or more races", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/marts/schools/_schools__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "table", "tags": ["mart"]}, "created_at": 1705873847.232558, "relation_name": "\"dev\".\"analytics\".\"dim_schools\"", "raw_code": "-- Model: dim_schools\r\n-- Scope: all dimensions we have/need for schools; one row per school + school_year\r\nwith\r\nschools as (\r\n    select *\r\n    from {{ ref('stg_dashboard__schools') }}\r\n),\r\n\r\nschool_districts as (\r\n    select *\r\n    from {{ ref('stg_dashboard__school_districts') }}\r\n),\r\n\r\nschool_stats_by_years as (\r\n    select *, row_number() over(partition by school_id order by school_year desc) as row_num\r\n    from {{ ref('stg_dashboard__school_stats_by_years') }}\r\n),\r\n\r\ncombined as (\r\n    select\r\n        -- schools\r\n        schools.school_id,\r\n        schools.city,\r\n        schools.state,\r\n        schools.zip,\r\n        school_stats_by_years.school_year,\r\n        school_stats_by_years.is_stage_el,\r\n        school_stats_by_years.is_stage_mi,\r\n        school_stats_by_years.is_stage_hi,\r\n        (\r\n            (case when school_stats_by_years.is_stage_el = 1 then 'el' else '__' end ) ||\r\n            (case when school_stats_by_years.is_stage_mi = 1 then 'mi' else '__' end ) ||\r\n            (case when school_stats_by_years.is_stage_hi = 1 then 'hi' else '__' end ) \r\n        ) as school_level_simple,\r\n        school_stats_by_years.is_rural,\r\n        school_stats_by_years.is_title_i,\r\n        school_stats_by_years.community_type,\r\n        schools.school_category,\r\n        schools.school_name,\r\n        schools.school_type,\r\n        case when total_frl_eligible_students / total_students::float > 0.5\r\n            then 1 else 0 \r\n        end as is_high_needs,\r\n        schools.last_known_school_year_open,\r\n\r\n        --school_districts\r\n        school_districts.school_district_id,\r\n        school_districts.school_district_name,\r\n\r\n        -- nces school metrics\r\n        school_stats_by_years.total_students,\r\n        school_stats_by_years.count_student_am,\r\n        school_stats_by_years.count_student_as,\r\n        school_stats_by_years.count_student_hi,\r\n        school_stats_by_years.count_student_bl,\r\n        school_stats_by_years.count_student_wh,\r\n        school_stats_by_years.count_student_hp,\r\n        school_stats_by_years.count_student_tr,\r\n        school_stats_by_years.total_frl_eligible_students,\r\n\r\n        nullif(\r\n            sum(school_stats_by_years.count_student_am \r\n                + school_stats_by_years.count_student_hi\r\n                + school_stats_by_years.count_student_bl\r\n                + school_stats_by_years.count_student_hp)\r\n            ,0) as total_urg_no_tr_students,\r\n\r\n        nullif(\r\n            sum(school_stats_by_years.count_student_am\r\n                + school_stats_by_years.count_student_hi\r\n                + school_stats_by_years.count_student_bl\r\n                + school_stats_by_years.count_student_hp\r\n                + school_stats_by_years.count_student_tr)\r\n            ,0) as total_urg_students,\r\n\r\n        nullif(\r\n            sum(school_stats_by_years.count_student_am  \r\n                + school_stats_by_years.count_student_as  \r\n                + school_stats_by_years.count_student_hi  \r\n                + school_stats_by_years.count_student_bl  \r\n                + school_stats_by_years.count_student_wh  \r\n                + school_stats_by_years.count_student_hp\r\n                + school_stats_by_years.count_student_tr)\r\n            ,0) as total_students_calculated,\r\n        \r\n        -- calculations \r\n        total_urg_students / total_students_calculated::float as urg_percent,\r\n\r\n        total_urg_no_tr_students / total_students_calculated::float as urg_no_tr_percent,\r\n        \r\n        total_frl_eligible_students / total_students::float as frl_eligible_percent,\r\n        \r\n        -- dates \r\n        min(schools.created_at) as school_created_at,\r\n        max(schools.updated_at) as school_last_updated_at\r\n    from schools\r\n    left join school_stats_by_years\r\n        on schools.school_id = school_stats_by_years.school_id\r\n        and school_stats_by_years.row_num = 1\r\n    left join school_districts\r\n        on schools.school_district_id = school_districts.school_district_id\r\n    {{ dbt_utils.group_by(28) }}\r\n)\r\n\r\nselect *\r\nfrom combined", "language": "sql", "refs": [{"name": "stg_dashboard__schools", "package": null, "version": null}, {"name": "stg_dashboard__school_districts", "package": null, "version": null}, {"name": "stg_dashboard__school_stats_by_years", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.cdo_analytics.stg_dashboard__schools", "model.cdo_analytics.stg_dashboard__school_districts", "model.cdo_analytics.stg_dashboard__school_stats_by_years"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/schools/dim_schools.sql", "compiled": true, "compiled_code": "-- Model: dim_schools\n-- Scope: all dimensions we have/need for schools; one row per school + school_year\nwith\nschools as (\n    select *\n    from \"dev\".\"analytics\".\"stg_dashboard__schools\"\n),\n\nschool_districts as (\n    select *\n    from \"dev\".\"analytics\".\"stg_dashboard__school_districts\"\n),\n\nschool_stats_by_years as (\n    select *, row_number() over(partition by school_id order by school_year desc) as row_num\n    from \"dev\".\"analytics\".\"stg_dashboard__school_stats_by_years\"\n),\n\ncombined as (\n    select\n        -- schools\n        schools.school_id,\n        schools.city,\n        schools.state,\n        schools.zip,\n        school_stats_by_years.school_year,\n        school_stats_by_years.is_stage_el,\n        school_stats_by_years.is_stage_mi,\n        school_stats_by_years.is_stage_hi,\n        (\n            (case when school_stats_by_years.is_stage_el = 1 then 'el' else '__' end ) ||\n            (case when school_stats_by_years.is_stage_mi = 1 then 'mi' else '__' end ) ||\n            (case when school_stats_by_years.is_stage_hi = 1 then 'hi' else '__' end ) \n        ) as school_level_simple,\n        school_stats_by_years.is_rural,\n        school_stats_by_years.is_title_i,\n        school_stats_by_years.community_type,\n        schools.school_category,\n        schools.school_name,\n        schools.school_type,\n        case when total_frl_eligible_students / total_students::float > 0.5\n            then 1 else 0 \n        end as is_high_needs,\n        schools.last_known_school_year_open,\n\n        --school_districts\n        school_districts.school_district_id,\n        school_districts.school_district_name,\n\n        -- nces school metrics\n        school_stats_by_years.total_students,\n        school_stats_by_years.count_student_am,\n        school_stats_by_years.count_student_as,\n        school_stats_by_years.count_student_hi,\n        school_stats_by_years.count_student_bl,\n        school_stats_by_years.count_student_wh,\n        school_stats_by_years.count_student_hp,\n        school_stats_by_years.count_student_tr,\n        school_stats_by_years.total_frl_eligible_students,\n\n        nullif(\n            sum(school_stats_by_years.count_student_am \n                + school_stats_by_years.count_student_hi\n                + school_stats_by_years.count_student_bl\n                + school_stats_by_years.count_student_hp)\n            ,0) as total_urg_no_tr_students,\n\n        nullif(\n            sum(school_stats_by_years.count_student_am\n                + school_stats_by_years.count_student_hi\n                + school_stats_by_years.count_student_bl\n                + school_stats_by_years.count_student_hp\n                + school_stats_by_years.count_student_tr)\n            ,0) as total_urg_students,\n\n        nullif(\n            sum(school_stats_by_years.count_student_am  \n                + school_stats_by_years.count_student_as  \n                + school_stats_by_years.count_student_hi  \n                + school_stats_by_years.count_student_bl  \n                + school_stats_by_years.count_student_wh  \n                + school_stats_by_years.count_student_hp\n                + school_stats_by_years.count_student_tr)\n            ,0) as total_students_calculated,\n        \n        -- calculations \n        total_urg_students / total_students_calculated::float as urg_percent,\n\n        total_urg_no_tr_students / total_students_calculated::float as urg_no_tr_percent,\n        \n        total_frl_eligible_students / total_students::float as frl_eligible_percent,\n        \n        -- dates \n        min(schools.created_at) as school_created_at,\n        max(schools.updated_at) as school_last_updated_at\n    from schools\n    left join school_stats_by_years\n        on schools.school_id = school_stats_by_years.school_id\n        and school_stats_by_years.row_num = 1\n    left join school_districts\n        on schools.school_district_id = school_districts.school_district_id\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28\n)\n\nselect *\nfrom combined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.dim_districts": {"database": "dev", "schema": "analytics", "name": "dim_districts", "resource_type": "model", "package_name": "cdo_analytics", "path": "marts/districts/dim_districts.sql", "original_file_path": "models/marts/districts/dim_districts.sql", "unique_id": "model.cdo_analytics.dim_districts", "fqn": ["cdo_analytics", "marts", "districts", "dim_districts"], "alias": "dim_districts", "checksum": {"name": "sha256", "checksum": "97a3939db86f1e77f9f2cc524fdc51cf949305be28e7e0b6a0ac2647e4bbcd73"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["mart"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "table", "tags": ["mart"]}, "created_at": 1705873846.593299, "relation_name": "\"dev\".\"analytics\".\"dim_districts\"", "raw_code": "-- Model: dim_schools\r\n-- Scope: all dimensions we have/need for schools; one row per school + school_year\r\nwith\r\ndim_schools as (\r\n    select *\r\n    from {{ ref('dim_schools') }}\r\n),\r\n\r\nschool_districts as (\r\n    select *\r\n    from {{ ref('stg_dashboard__school_districts') }}\r\n),\r\n\r\ncombined as (\r\n    select\r\n        school_districts.school_district_id,\r\n        school_districts.school_district_name,\r\n        school_districts.school_district_city,\r\n        school_districts.school_district_state,\r\n        school_districts.school_district_zip,\r\n        school_districts.last_known_school_year_open,\r\n        -- school aggregations\r\n        count(distinct dim_schools.school_id) as num_schools,\r\n        sum(dim_schools.is_stage_el) as num_schools_stage_el,\r\n        sum(dim_schools.is_stage_mi) as num_schools_stage_mi,\r\n        sum(dim_schools.is_stage_hi) as num_schools_stage_hi,\r\n        sum(dim_schools.is_rural) as num_schools_rural,\r\n        sum(dim_schools.is_title_i) as num_schools_title_i,\r\n        sum(dim_schools.is_high_needs) as num_schools_high_needs,\r\n        sum(dim_schools.total_students) as num_students,\r\n        sum(dim_schools.total_frl_eligible_students) as num_students_frl_eligible,\r\n        sum(total_urg_students) as num_students_urg,\r\n        \r\n        -- calculations \r\n        round(cast(num_students_urg as float) / num_students, 2) :: decimal(10, 4) as district_urg_percent,\r\n        round(cast(num_students_frl_eligible as float) / num_students, 2) :: decimal(10, 4) as district_frl_eligible_percent\r\n    from dim_schools\r\n    left join school_districts\r\n        on dim_schools.school_district_id = school_districts.school_district_id \r\n    where dim_schools.school_district_id is not null \r\n    {{ dbt_utils.group_by(6) }}\r\n)\r\n\r\nselect *\r\nfrom combined", "language": "sql", "refs": [{"name": "dim_schools", "package": null, "version": null}, {"name": "stg_dashboard__school_districts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.cdo_analytics.dim_schools", "model.cdo_analytics.stg_dashboard__school_districts"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/districts/dim_districts.sql", "compiled": true, "compiled_code": "-- Model: dim_schools\n-- Scope: all dimensions we have/need for schools; one row per school + school_year\nwith\ndim_schools as (\n    select *\n    from \"dev\".\"analytics\".\"dim_schools\"\n),\n\nschool_districts as (\n    select *\n    from \"dev\".\"analytics\".\"stg_dashboard__school_districts\"\n),\n\ncombined as (\n    select\n        school_districts.school_district_id,\n        school_districts.school_district_name,\n        school_districts.school_district_city,\n        school_districts.school_district_state,\n        school_districts.school_district_zip,\n        school_districts.last_known_school_year_open,\n        -- school aggregations\n        count(distinct dim_schools.school_id) as num_schools,\n        sum(dim_schools.is_stage_el) as num_schools_stage_el,\n        sum(dim_schools.is_stage_mi) as num_schools_stage_mi,\n        sum(dim_schools.is_stage_hi) as num_schools_stage_hi,\n        sum(dim_schools.is_rural) as num_schools_rural,\n        sum(dim_schools.is_title_i) as num_schools_title_i,\n        sum(dim_schools.is_high_needs) as num_schools_high_needs,\n        sum(dim_schools.total_students) as num_students,\n        sum(dim_schools.total_frl_eligible_students) as num_students_frl_eligible,\n        sum(total_urg_students) as num_students_urg,\n        \n        -- calculations \n        round(cast(num_students_urg as float) / num_students, 2) :: decimal(10, 4) as district_urg_percent,\n        round(cast(num_students_frl_eligible as float) / num_students, 2) :: decimal(10, 4) as district_frl_eligible_percent\n    from dim_schools\n    left join school_districts\n        on dim_schools.school_district_id = school_districts.school_district_id \n    where dim_schools.school_district_id is not null \n    group by 1,2,3,4,5,6\n)\n\nselect *\nfrom combined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.dim_district_status": {"database": "dev", "schema": "analytics", "name": "dim_district_status", "resource_type": "model", "package_name": "cdo_analytics", "path": "marts/districts/dim_district_status.sql", "original_file_path": "models/marts/districts/dim_district_status.sql", "unique_id": "model.cdo_analytics.dim_district_status", "fqn": ["cdo_analytics", "marts", "districts", "dim_district_status"], "alias": "dim_district_status", "checksum": {"name": "sha256", "checksum": "9baf2d613cd32e8ce2c39405b6426cc7ad83b0177023678ebe7926e806a86ca1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["mart"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "table", "tags": ["mart"]}, "created_at": 1705873846.5993679, "relation_name": "\"dev\".\"analytics\".\"dim_district_status\"", "raw_code": "{# Notes:\nDesign: 1 row per school district, school_year, churn_status\nLogic: we can determine status based on three properties we can compute for every user|school_year as a binary:\n    - 0/1 they are active this school_year - (A)ctive\n    - 0/1 they were active in the previous school_year - (P)rev year\n    - 0/1 they have ever been active in ANY school_year prior, incl. prev year - (E)ver before\n\n    These 3 values can be combined into an ordered 3-char string representing the concatenated true/false combinations \n    for Active|Prev|Ever e.g. \"101\" means: ( Active = true AND Prev year = false AND Ever before = true )\n\n    - '000' (0) = 'market'              -- Not active now + never been active\n    - '001' (1) = 'inactive churn'      -- NOT active + NOT active prev year + active ever before\n    - '010' (2) = '<impossible status>' -- should not be possible, active in the prev year should imply active ever before\n    - '011' (3) = 'inactive this year'  -- NOT active + active prev year + (active ever before implied)\n    - '100' (4) = 'active new'          -- active this year + NOT active last year + NOT active ever before\n    - '101' (5) = 'active reacquired'   -- Active this year + NOT active last year + active in the past\n    - '110' (6) = '<impossible status>' -- impossible for same reason as status (2)\n    - '111' (7) = 'active retained'     -- active this year + active last year + (active ever before implied) \n#}\n\nwith \n\ndim_schools as (\n    select * \n    from {{ ref('dim_schools') }}\n),\n\nall_districts as (\n    select school_district_id\n    from {{ ref('dim_districts') }}\n),\n\nschool_years as (\n    select * \n    from {{ ref('int_school_years') }}\n),\n\nall_districts_sy as (\n    select \n        all_districts.school_district_id,\n        school_years.school_year\n    from all_districts \n    cross join school_years\n),\n\nteacher_school_changes as (\n    select *\n    from {{ ref('int_teacher_schools_historical') }}\n),\n\nteacher_active_courses as (\n    select \n        distinct teacher_id,\n        school_year,\n        course_name,\n        section_started_at\n    from {{ref('int_active_sections')}}\n),\n\nteacher_active_courses_with_sy as (\n\n    select\n        tac.teacher_id,\n        tac.school_year,\n        tac.course_name,\n        tac.section_started_at,\n        tsc.school_id,\n        dim_schools.school_district_id\n    from teacher_active_courses tac \n    join school_years sy\n        on tac.school_year = sy.school_year\n    join teacher_school_changes tsc \n        on tac.teacher_id = tsc.teacher_id \n        and sy.ended_at between tsc.started_at and tsc.ended_at \n    join dim_schools \n        on tsc.school_id = dim_schools.school_id\n),\n\nstarted_districts as (\n    select \n        school_district_id,\n        school_year,\n        min(section_started_at) as district_started_at,\n        listagg( distinct course_name, ', ') within group (order by course_name) active_courses\n    from teacher_active_courses_with_sy\n    group by 1, 2\n),\n\nactive_status_simple as (\n    select \n        all_districts_sy.school_district_id,\n        all_districts_sy.school_year,\n        case when started_districts.school_district_id is null then 0 else 1 end as is_active,\n        started_districts.district_started_at,\n        started_districts.active_courses\n    from all_districts_sy \n    left join started_districts\n        on started_districts.school_district_id = all_districts_sy.school_district_id \n        and started_districts.school_year = all_districts_sy.school_year\n),\n\nfull_status as (\n    -- Determine the active status for each school in each school year\n\n    select\n        school_district_id,\n        school_year,\n        is_active,\n        coalesce(\n            lag(is_active, 1) \n                over (partition by school_district_id order by school_year) \n            , 0\n        ) as prev_year_active,\n        coalesce( --force any NULL to be 0 for this function\n            max(is_active) \n                over (partition by school_district_id order by school_year rows between unbounded preceding and 1 preceding)\n            , 0\n        ) as ever_active_before,\n        (is_active || prev_year_active || ever_active_before) status_code,\n        district_started_at,\n        active_courses\n    from\n        active_status_simple\n\n), \n\nfinal as (\n\n    select\n        school_district_id,\n        school_year,\n        case \n            when status_code = '000' then 'market'\n            when status_code = '001' then 'inactive churn'\n            when status_code = '010' then '<impossible status>'\n            when status_code = '011' then 'inactive this year'\n            when status_code = '100' then 'active new'\n            when status_code = '101' then 'active reacquired'\n            when status_code = '110' then '<impossible status>'\n            when status_code = '111' then 'active retained'\n        end as status,\n        district_started_at,\n        active_courses\n        from full_status\n    order by\n        school_district_id, school_year\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "dim_schools", "package": null, "version": null}, {"name": "dim_districts", "package": null, "version": null}, {"name": "int_school_years", "package": null, "version": null}, {"name": "int_teacher_schools_historical", "package": null, "version": null}, {"name": "int_active_sections", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.dim_schools", "model.cdo_analytics.dim_districts", "model.cdo_analytics.int_school_years", "model.cdo_analytics.int_teacher_schools_historical", "model.cdo_analytics.int_active_sections"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/districts/dim_district_status.sql", "compiled": true, "compiled_code": "\n\nwith \n\ndim_schools as (\n    select * \n    from \"dev\".\"analytics\".\"dim_schools\"\n),\n\nall_districts as (\n    select school_district_id\n    from \"dev\".\"analytics\".\"dim_districts\"\n),\n\nschool_years as (\n    select * \n    from \"dev\".\"analytics\".\"int_school_years\"\n),\n\nall_districts_sy as (\n    select \n        all_districts.school_district_id,\n        school_years.school_year\n    from all_districts \n    cross join school_years\n),\n\nteacher_school_changes as (\n    select *\n    from \"dev\".\"analytics\".\"int_teacher_schools_historical\"\n),\n\nteacher_active_courses as (\n    select \n        distinct teacher_id,\n        school_year,\n        course_name,\n        section_started_at\n    from \"dev\".\"analytics\".\"int_active_sections\"\n),\n\nteacher_active_courses_with_sy as (\n\n    select\n        tac.teacher_id,\n        tac.school_year,\n        tac.course_name,\n        tac.section_started_at,\n        tsc.school_id,\n        dim_schools.school_district_id\n    from teacher_active_courses tac \n    join school_years sy\n        on tac.school_year = sy.school_year\n    join teacher_school_changes tsc \n        on tac.teacher_id = tsc.teacher_id \n        and sy.ended_at between tsc.started_at and tsc.ended_at \n    join dim_schools \n        on tsc.school_id = dim_schools.school_id\n),\n\nstarted_districts as (\n    select \n        school_district_id,\n        school_year,\n        min(section_started_at) as district_started_at,\n        listagg( distinct course_name, ', ') within group (order by course_name) active_courses\n    from teacher_active_courses_with_sy\n    group by 1, 2\n),\n\nactive_status_simple as (\n    select \n        all_districts_sy.school_district_id,\n        all_districts_sy.school_year,\n        case when started_districts.school_district_id is null then 0 else 1 end as is_active,\n        started_districts.district_started_at,\n        started_districts.active_courses\n    from all_districts_sy \n    left join started_districts\n        on started_districts.school_district_id = all_districts_sy.school_district_id \n        and started_districts.school_year = all_districts_sy.school_year\n),\n\nfull_status as (\n    -- Determine the active status for each school in each school year\n\n    select\n        school_district_id,\n        school_year,\n        is_active,\n        coalesce(\n            lag(is_active, 1) \n                over (partition by school_district_id order by school_year) \n            , 0\n        ) as prev_year_active,\n        coalesce( --force any NULL to be 0 for this function\n            max(is_active) \n                over (partition by school_district_id order by school_year rows between unbounded preceding and 1 preceding)\n            , 0\n        ) as ever_active_before,\n        (is_active || prev_year_active || ever_active_before) status_code,\n        district_started_at,\n        active_courses\n    from\n        active_status_simple\n\n), \n\nfinal as (\n\n    select\n        school_district_id,\n        school_year,\n        case \n            when status_code = '000' then 'market'\n            when status_code = '001' then 'inactive churn'\n            when status_code = '010' then '<impossible status>'\n            when status_code = '011' then 'inactive this year'\n            when status_code = '100' then 'active new'\n            when status_code = '101' then 'active reacquired'\n            when status_code = '110' then '<impossible status>'\n            when status_code = '111' then 'active retained'\n        end as status,\n        district_started_at,\n        active_courses\n        from full_status\n    order by\n        school_district_id, school_year\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.dim_students": {"database": "dev", "schema": "analytics", "name": "dim_students", "resource_type": "model", "package_name": "cdo_analytics", "path": "marts/students/dim_students.sql", "original_file_path": "models/marts/students/dim_students.sql", "unique_id": "model.cdo_analytics.dim_students", "fqn": ["cdo_analytics", "marts", "students", "dim_students"], "alias": "dim_students", "checksum": {"name": "sha256", "checksum": "d313591ac242ff196459408c0ef1f8d2afff82ed800e861e54e92a49fe433cc3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["mart"], "description": "This model contains all student accounts ever created + georgraphic + platform activity info on the student", "columns": {"student_id": {"name": "student_id", "description": "unique ID for individual student user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_type": {"name": "user_type", "description": "always \"student\"- used for verification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gender": {"name": "gender", "description": "the classified gender of a student based on their free-response input", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_urg": {"name": "is_urg", "description": "flag to determine whether a student selected at least one of the following races- black, hispanic, hawaiian/ pacific islander, native american", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_international": {"name": "is_international", "description": "1 if last activity was outside the US, 0 otherwise", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at_school_year": {"name": "created_at_school_year", "description": "the school year in which the student account was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/marts/students/_students__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "table", "tags": ["mart"]}, "created_at": 1705873847.248462, "relation_name": "\"dev\".\"analytics\".\"dim_students\"", "raw_code": "with \nstudents as (\n    select \n    {{ dbt_utils.star(\n        from=ref('stg_dashboard__users'),\n        except=[\"user_id\",\n            \"teacher_id\",\n            \"age_years\",                                  \n            \"studio_person_id\",\n            \"school_info_id\"]) }}\n    from {{ ref('stg_dashboard__users') }}\n    where student_id is not null \n),\n\nuser_geos as (\n    select \n        user_id, \n        is_international\n    from {{ ref('stg_dashboard__user_geos') }}\n    where user_id in (select student_id from students)\n),\n\nschool_years as (\n    select * from {{ref('int_school_years')}}\n),\n\nfinal as (\nselect \n    students.*, \n    user_geos.is_international,\n    sy.school_year created_at_school_year\nfrom students \njoin user_geos \n    on students.student_id = user_geos.user_id\nleft join school_years sy on students.created_at between sy.started_at and sy.ended_at\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_dashboard__users", "package": null, "version": null}, {"name": "stg_dashboard__users", "package": null, "version": null}, {"name": "stg_dashboard__user_geos", "package": null, "version": null}, {"name": "int_school_years", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.cdo_analytics.stg_dashboard__users", "model.cdo_analytics.stg_dashboard__user_geos", "model.cdo_analytics.int_school_years"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/students/dim_students.sql", "compiled": true, "compiled_code": "with \nstudents as (\n    select \n    \"student_id\",\n  \"user_type\",\n  \"gender\",\n  \"is_urg\",\n  \"locale\",\n  \"sign_in_count\",\n  \"total_lines\",\n  \"current_sign_in_at\",\n  \"last_sign_in_at\",\n  \"created_at\",\n  \"updated_at\",\n  \"deleted_at\",\n  \"purged_at\"\n    from \"dev\".\"analytics\".\"stg_dashboard__users\"\n    where student_id is not null \n),\n\nuser_geos as (\n    select \n        user_id, \n        is_international\n    from \"dev\".\"analytics\".\"stg_dashboard__user_geos\"\n    where user_id in (select student_id from students)\n),\n\nschool_years as (\n    select * from \"dev\".\"analytics\".\"int_school_years\"\n),\n\nfinal as (\nselect \n    students.*, \n    user_geos.is_international,\n    sy.school_year created_at_school_year\nfrom students \njoin user_geos \n    on students.student_id = user_geos.user_id\nleft join school_years sy on students.created_at between sy.started_at and sy.ended_at\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.dim_student_status": {"database": "dev", "schema": "analytics", "name": "dim_student_status", "resource_type": "model", "package_name": "cdo_analytics", "path": "marts/students/dim_student_status.sql", "original_file_path": "models/marts/students/dim_student_status.sql", "unique_id": "model.cdo_analytics.dim_student_status", "fqn": ["cdo_analytics", "marts", "students", "dim_student_status"], "alias": "dim_student_status", "checksum": {"name": "sha256", "checksum": "376c32327bc844259c5df1c51080e977c7d858e9cd493df4d3bf2d73da5f2e5f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["mart"], "description": "This model categorizes students based on their activity status across different school years. It provides insights into user engagement by assigning a status that reflects their activity in the current, previous, and any earlier school years.", "columns": {"student_id": {"name": "student_id", "description": "the unique ID associated with the activity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "school year in which an activity status is assigned", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "the activity status of a student in a given school year- active if they have attempted at least 1 level of a course", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "courses_started": {"name": "courses_started", "description": "comma separated list of courses associated with the levels attemped by the student in a given school year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/marts/students/_students__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "table", "tags": ["mart"]}, "created_at": 1705873847.2462494, "relation_name": "\"dev\".\"analytics\".\"dim_student_status\"", "raw_code": "/*\n\nDesign: 1 row per student, school_year, churn_status\nLogic: we can determine status based on three properties we can compute for every user|school_year as a binary:\n    - 0/1 they are active this school_year - (A)ctive\n    - 0/1 they were active in the previous school_year - (P)rev year\n    - 0/1 they have ever been active in ANY school_year prior, incl. prev year - (E)ver before\n\n    Rather than write out long complicated combinational logic in code, these 3 values can be combined \n    into an ordered 3-char string representing the concatenated true/false combinations for Active|Prev|Ever \n    e.g. \"101\" means: ( Active = true AND Prev year = false AND Ever before = true )\n    To practice some defensive programming, we'll handle all cases exhaustively and return a \n    sentinal '<impossible status>' value as a fast-fail value for cases that we believe to be impossible.\n\n    - '000' (0) = 'market'              -- Not active now + never been active\n    - '001' (1) = 'inactive churn'      -- NOT active + NOT active prev year + active ever before\n    - '010' (2) = '<impossible status>' -- should not be possible, active in the prev year should imply active ever before\n    - '011' (3) = 'inactive this year'  -- NOT active + active prev year + (active ever before implied)\n    - '100' (4) = 'active new'          -- active this year + NOT active last year + NOT active ever before\n    - '101' (5) = 'active reacquired'   -- Active this year + NOT active last year + active in the past\n    - '110' (6) = '<impossible status>' -- impossible for same reason as status (2)\n    - '111' (7) = 'active retained'     -- active this year + active last year + (active ever before implied)\n\n*/\n\nwith \n\nstudent_courses_started as (\n\n    select\n        student_id,\n        school_year,\n        listagg(distinct course_name, ', ') within group (order by course_name ASC) courses_started\n    from {{ ref('dim_student_courses') }}\n    group by 1, 2\n\n),\n\nall_student_users as (\n\n    select\n        student_id,\n        created_at\n    from {{ref('dim_students')}}\n\n), \n\nschool_years as (\n\n    select * from {{ref('int_school_years')}}\n\n), \n\nall_students_school_years as (\n\n    select\n        u.student_id,\n        sy.school_year\n    from all_student_users u\n    join school_years sy on u.created_at <= sy.ended_at\n    where sy.started_at < current_timestamp\n\n), \n\nactive_status_simple as (\n\n    select\n        all_sy.student_id,\n        all_sy.school_year,\n        case when s.student_id is null then 0 else 1 end as is_active,\n        s.courses_started\n\n    from all_students_school_years all_sy\n    left join student_courses_started s on s.student_id = all_sy.student_id and s.school_year = all_sy.school_year\n\n), \n\nfull_status as (\n    -- Determine the active status for each student in each year\n\n    select\n        student_id,\n        school_year,\n        is_active,\n        courses_started,\n        coalesce(\n            lag(is_active, 1) \n                over (partition by student_id order by school_year) \n            , 0\n        ) as prev_year_active,\n        coalesce( --force any NULL to be 0 for this function\n            max(is_active) \n                over (partition by student_id order by school_year rows between unbounded preceding and 1 preceding)\n            , 0\n        ) as ever_active_before,\n        (is_active || prev_year_active || ever_active_before) status_code\n    from\n        active_status_simple\n\n), \n\ncurrent_school_year as (\n\n    select \n        school_year\n    from {{ref(\"int_school_years\")}}\n    where current_date between started_at and ended_at\n\n)\n\nselect\n    student_id,\n    school_year,\n    --is_active,\n    --prev_year_active,\n    --ever_active_before,\n    --status_code,\n    case \n        when status_code = '000' then 'market'\n        when status_code = '001' then 'inactive churn'\n        when status_code = '010' then '<impossible status>'\n        when status_code = '011' then 'inactive this year'\n        when status_code = '100' then 'active new'\n        when status_code = '101' then 'active reacquired'\n        when status_code = '110' then '<impossible status>'\n        when status_code = '111' then 'active retained'\n    end as status,\n    courses_started\nfrom\n    full_status\norder by\n    student_id, school_year", "language": "sql", "refs": [{"name": "dim_student_courses", "package": null, "version": null}, {"name": "dim_students", "package": null, "version": null}, {"name": "int_school_years", "package": null, "version": null}, {"name": "int_school_years", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.dim_student_courses", "model.cdo_analytics.dim_students", "model.cdo_analytics.int_school_years"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/students/dim_student_status.sql", "compiled": true, "compiled_code": "/*\n\nDesign: 1 row per student, school_year, churn_status\nLogic: we can determine status based on three properties we can compute for every user|school_year as a binary:\n    - 0/1 they are active this school_year - (A)ctive\n    - 0/1 they were active in the previous school_year - (P)rev year\n    - 0/1 they have ever been active in ANY school_year prior, incl. prev year - (E)ver before\n\n    Rather than write out long complicated combinational logic in code, these 3 values can be combined \n    into an ordered 3-char string representing the concatenated true/false combinations for Active|Prev|Ever \n    e.g. \"101\" means: ( Active = true AND Prev year = false AND Ever before = true )\n    To practice some defensive programming, we'll handle all cases exhaustively and return a \n    sentinal '<impossible status>' value as a fast-fail value for cases that we believe to be impossible.\n\n    - '000' (0) = 'market'              -- Not active now + never been active\n    - '001' (1) = 'inactive churn'      -- NOT active + NOT active prev year + active ever before\n    - '010' (2) = '<impossible status>' -- should not be possible, active in the prev year should imply active ever before\n    - '011' (3) = 'inactive this year'  -- NOT active + active prev year + (active ever before implied)\n    - '100' (4) = 'active new'          -- active this year + NOT active last year + NOT active ever before\n    - '101' (5) = 'active reacquired'   -- Active this year + NOT active last year + active in the past\n    - '110' (6) = '<impossible status>' -- impossible for same reason as status (2)\n    - '111' (7) = 'active retained'     -- active this year + active last year + (active ever before implied)\n\n*/\n\nwith \n\nstudent_courses_started as (\n\n    select\n        student_id,\n        school_year,\n        listagg(distinct course_name, ', ') within group (order by course_name ASC) courses_started\n    from \"dev\".\"analytics\".\"dim_student_courses\"\n    group by 1, 2\n\n),\n\nall_student_users as (\n\n    select\n        student_id,\n        created_at\n    from \"dev\".\"analytics\".\"dim_students\"\n\n), \n\nschool_years as (\n\n    select * from \"dev\".\"analytics\".\"int_school_years\"\n\n), \n\nall_students_school_years as (\n\n    select\n        u.student_id,\n        sy.school_year\n    from all_student_users u\n    join school_years sy on u.created_at <= sy.ended_at\n    where sy.started_at < current_timestamp\n\n), \n\nactive_status_simple as (\n\n    select\n        all_sy.student_id,\n        all_sy.school_year,\n        case when s.student_id is null then 0 else 1 end as is_active,\n        s.courses_started\n\n    from all_students_school_years all_sy\n    left join student_courses_started s on s.student_id = all_sy.student_id and s.school_year = all_sy.school_year\n\n), \n\nfull_status as (\n    -- Determine the active status for each student in each year\n\n    select\n        student_id,\n        school_year,\n        is_active,\n        courses_started,\n        coalesce(\n            lag(is_active, 1) \n                over (partition by student_id order by school_year) \n            , 0\n        ) as prev_year_active,\n        coalesce( --force any NULL to be 0 for this function\n            max(is_active) \n                over (partition by student_id order by school_year rows between unbounded preceding and 1 preceding)\n            , 0\n        ) as ever_active_before,\n        (is_active || prev_year_active || ever_active_before) status_code\n    from\n        active_status_simple\n\n), \n\ncurrent_school_year as (\n\n    select \n        school_year\n    from \"dev\".\"analytics\".\"int_school_years\"\n    where current_date between started_at and ended_at\n\n)\n\nselect\n    student_id,\n    school_year,\n    --is_active,\n    --prev_year_active,\n    --ever_active_before,\n    --status_code,\n    case \n        when status_code = '000' then 'market'\n        when status_code = '001' then 'inactive churn'\n        when status_code = '010' then '<impossible status>'\n        when status_code = '011' then 'inactive this year'\n        when status_code = '100' then 'active new'\n        when status_code = '101' then 'active reacquired'\n        when status_code = '110' then '<impossible status>'\n        when status_code = '111' then 'active retained'\n    end as status,\n    courses_started\nfrom\n    full_status\norder by\n    student_id, school_year", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.dim_student_courses": {"database": "dev", "schema": "analytics", "name": "dim_student_courses", "resource_type": "model", "package_name": "cdo_analytics", "path": "marts/students/dim_student_courses.sql", "original_file_path": "models/marts/students/dim_student_courses.sql", "unique_id": "model.cdo_analytics.dim_student_courses", "fqn": ["cdo_analytics", "marts", "students", "dim_student_courses"], "alias": "dim_student_courses", "checksum": {"name": "sha256", "checksum": "e6179ebb84c35bfec058ec3737f3c6d800adb9399b861ab88a99a3547b09bf7d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["mart"], "description": "This model is a log of all student-course activity within a school year", "columns": {"student_id": {"name": "student_id", "description": "the unique ID associated with the activity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "the school year in which the course activity was in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "course_name": {"name": "course_name", "description": "the course associated with the individual student's activity in a given school year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_activity_at": {"name": "first_activity_at", "description": "timestamp of the student's first activity within the given course and school year- this field is later used to determine when a section/school first started teaching", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_activity_at": {"name": "last_activity_at", "description": "timestamp of the student's latest activity within the given course and school year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/marts/students/_students__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "table", "tags": ["mart"]}, "created_at": 1705873847.2454448, "relation_name": "\"dev\".\"analytics\".\"dim_student_courses\"", "raw_code": "/* \nUpdated 12/6/23:\n\n1. Design:\n    student_id int,\n    school_year varchar(10),\n    course_name varchar(3),\n    last_activity_at timestamp\n\n2. Definitions:\n    - a student is included in this table if they attempted a level of a given course within a given SY\n    - this table is used to determine \"active\" students within a section and assigning a \"section_status\"\n\n3. Sources:\n    dim_user_levels\n    course_structure\n    school_years\n\nRef: dataops-316\n*/\n\nwith \nuser_levels as (\n    select \n        user_id,\n        level_id,\n        script_id,\n        created_at\n    from {{ ref('stg_dashboard__user_levels') }}\n),\n\ncourse_structure as (\n    select  \n        course_name_true, \n        level_id, \n        script_id \n    from {{ ref('dim_course_structure') }}\n),\n\nschool_years as (\n    select *\n    from {{ ref('int_school_years') }}\n),\n\ncombined as (\n    select \n         ul.user_id             as student_id\n\t\t,sy.school_year\n\t\t,cs.course_name_true    as course_name\n        ,min(ul.created_at)     as first_activity_at \n\t\t,max(ul.created_at)     as last_activity_at\n\tfrom user_levels ul \n\tjoin course_structure cs\n\t\ton ul.script_id = cs.script_id \n        and ul.level_id = cs.level_id \n\tjoin school_years sy \n\t\ton ul.created_at \n            between sy.started_at and sy.ended_at\n    {{ dbt_utils.group_by(3) }}\n)\n\nselect *\nfrom combined", "language": "sql", "refs": [{"name": "stg_dashboard__user_levels", "package": null, "version": null}, {"name": "dim_course_structure", "package": null, "version": null}, {"name": "int_school_years", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.cdo_analytics.stg_dashboard__user_levels", "model.cdo_analytics.dim_course_structure", "model.cdo_analytics.int_school_years"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/students/dim_student_courses.sql", "compiled": true, "compiled_code": "/* \nUpdated 12/6/23:\n\n1. Design:\n    student_id int,\n    school_year varchar(10),\n    course_name varchar(3),\n    last_activity_at timestamp\n\n2. Definitions:\n    - a student is included in this table if they attempted a level of a given course within a given SY\n    - this table is used to determine \"active\" students within a section and assigning a \"section_status\"\n\n3. Sources:\n    dim_user_levels\n    course_structure\n    school_years\n\nRef: dataops-316\n*/\n\nwith \nuser_levels as (\n    select \n        user_id,\n        level_id,\n        script_id,\n        created_at\n    from \"dev\".\"analytics\".\"stg_dashboard__user_levels\"\n),\n\ncourse_structure as (\n    select  \n        course_name_true, \n        level_id, \n        script_id \n    from \"dev\".\"analytics\".\"dim_course_structure\"\n),\n\nschool_years as (\n    select *\n    from \"dev\".\"analytics\".\"int_school_years\"\n),\n\ncombined as (\n    select \n         ul.user_id             as student_id\n\t\t,sy.school_year\n\t\t,cs.course_name_true    as course_name\n        ,min(ul.created_at)     as first_activity_at \n\t\t,max(ul.created_at)     as last_activity_at\n\tfrom user_levels ul \n\tjoin course_structure cs\n\t\ton ul.script_id = cs.script_id \n        and ul.level_id = cs.level_id \n\tjoin school_years sy \n\t\ton ul.created_at \n            between sy.started_at and sy.ended_at\n    group by 1,2,3\n)\n\nselect *\nfrom combined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.dim_levels": {"database": "dev", "schema": "analytics", "name": "dim_levels", "resource_type": "model", "package_name": "cdo_analytics", "path": "marts/courses/dim_levels.sql", "original_file_path": "models/marts/courses/dim_levels.sql", "unique_id": "model.cdo_analytics.dim_levels", "fqn": ["cdo_analytics", "marts", "courses", "dim_levels"], "alias": "dim_levels", "checksum": {"name": "sha256", "checksum": "4c2515c5cc9891f9ca72939de17df2552022d2d09164a76acf42a305a113950e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["mart"], "description": "dimensional table to provide attrtibution to levels data", "columns": {"level_id": {"name": "level_id", "description": "uid for this model, 1 row per level_id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/marts/courses/_courses__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "table", "tags": ["mart"]}, "created_at": 1705873847.2535872, "relation_name": "\"dev\".\"analytics\".\"dim_levels\"", "raw_code": "with \nlevels as (\n    select * \n    from {{ ref('stg_dashboard__levels') }}\n)\n\nselect * \nfrom levels", "language": "sql", "refs": [{"name": "stg_dashboard__levels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.stg_dashboard__levels"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/courses/dim_levels.sql", "compiled": true, "compiled_code": "with \nlevels as (\n    select * \n    from \"dev\".\"analytics\".\"stg_dashboard__levels\"\n)\n\nselect * \nfrom levels", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.dim_script_names": {"database": "dev", "schema": "analytics", "name": "dim_script_names", "resource_type": "model", "package_name": "cdo_analytics", "path": "marts/courses/dim_script_names.sql", "original_file_path": "models/marts/courses/dim_script_names.sql", "unique_id": "model.cdo_analytics.dim_script_names", "fqn": ["cdo_analytics", "marts", "courses", "dim_script_names"], "alias": "dim_script_names", "checksum": {"name": "sha256", "checksum": "95b387387400871197724c759e3faa7e18b70939ca9d0182ecd890659aac4c87"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["mart"], "description": "distinct list of script names provided via seed file", "columns": {"versioned_script_id": {"name": "versioned_script_id", "description": "uid for script by school year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/marts/courses/_courses__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "table", "tags": ["mart"]}, "created_at": 1705873847.2543678, "relation_name": "\"dev\".\"analytics\".\"dim_script_names\"", "raw_code": "with \nscript_names as (\n    select * \n    from {{ ref('seed_script_names') }}\n)\n\nselect * \nfrom script_names", "language": "sql", "refs": [{"name": "seed_script_names", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.cdo_analytics.seed_script_names"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/courses/dim_script_names.sql", "compiled": true, "compiled_code": "with \nscript_names as (\n    select * \n    from \"dev\".\"analytics\".\"seed_script_names\"\n)\n\nselect * \nfrom script_names", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.dim_course_names": {"database": "dev", "schema": "analytics", "name": "dim_course_names", "resource_type": "model", "package_name": "cdo_analytics", "path": "marts/courses/dim_course_names.sql", "original_file_path": "models/marts/courses/dim_course_names.sql", "unique_id": "model.cdo_analytics.dim_course_names", "fqn": ["cdo_analytics", "marts", "courses", "dim_course_names"], "alias": "dim_course_names", "checksum": {"name": "sha256", "checksum": "5568d580d67f4816e35e3ab6df493987d0c9a78ac248a5f3273aa1adadfb3536"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["mart"], "description": "distinct list of course names sourced via seed file", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/marts/courses/_courses__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "table", "tags": ["mart"]}, "created_at": 1705873847.2525277, "relation_name": "\"dev\".\"analytics\".\"dim_course_names\"", "raw_code": "with \ncourse_names as (\n    select * \n    from {{ ref('seed_course_names') }}\n)\n\nselect * \nfrom course_names", "language": "sql", "refs": [{"name": "seed_course_names", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.cdo_analytics.seed_course_names"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/courses/dim_course_names.sql", "compiled": true, "compiled_code": "with \ncourse_names as (\n    select * \n    from \"dev\".\"analytics\".\"seed_course_names\"\n)\n\nselect * \nfrom course_names", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.dim_course_structure": {"database": "dev", "schema": "analytics", "name": "dim_course_structure", "resource_type": "model", "package_name": "cdo_analytics", "path": "marts/courses/dim_course_structure.sql", "original_file_path": "models/marts/courses/dim_course_structure.sql", "unique_id": "model.cdo_analytics.dim_course_structure", "fqn": ["cdo_analytics", "marts", "courses", "dim_course_structure"], "alias": "dim_course_structure", "checksum": {"name": "sha256", "checksum": "1e09d881e23eab2e8502add265a29408cdda3659b7e8e1a5c31865d98e54252b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["mart"], "description": "dim table for courses data", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/marts/courses/_courses__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "table", "tags": ["mart"]}, "created_at": 1705873847.2530348, "relation_name": "\"dev\".\"analytics\".\"dim_course_structure\"", "raw_code": "{# needs optimization #}\n\nwith \nscripts as (\n    select *\n    from {{ ref('stg_dashboard__scripts') }} \n),\n\nlevels as (\n    select * \n    from {{ ref('stg_dashboard__levels') }}\n    ),\n\nstages as (\n    select *\n    from {{ ref('stg_dashboard__stages') }}\n),\n\nscript_levels as (\n    select *\n    from {{ ref('stg_dashboard__script_levels') }}\n),\n\nlevels_script_levels as (\n    select * \n    from {{ ref('stg_dashboard__levels_script_levels') }}\n),\n\ncourse_scripts as (\n    select * \n    from {{ ref('stg_dashboard__course_scripts') }}\n),\n\nunit_groups as (\n    select * \n    from {{ ref('stg_dashboard__unit_groups') }}\n),\n\ncourse_names as (\n    select *\n    from {{ ref('dim_course_names') }}\n),\n\nscript_names as (\n    select * \n    from {{ ref('dim_script_names') }} \n),\n\ncombined as (\n    select \n        -- courses\n        ug.unit_group_id as course_id,\n        ug.name as course_name,\n        cn.course_name_short,\n        cn.course_name_long,\n        sc.course_name_true,\n\n        -- scripts\n        sl.script_id,\n        sc.script_name,\n        sn.versioned_script_name,\n        sn.script_name_short,\n        sn.script_name_long,\n        \n        -- stages\n        st.stage_id,\n        st.stage_name,\n        st.stage_number,\n\n        -- levels\n        case when sl.script_id = '26' \n              and lsl.level_id = '14633' \n             then 1 else lsl.level_id \n        end as level_id,\n        lev.name as level_name,\n        sl.position as level_number,\n        rank() over(partition by sl.script_id order by st.stage_number, sl.position) as level_script_order,\n        sl.is_assessment,\n        lev.updated_at\n    from levels_script_levels as lsl \n    join script_levels as sl \n        on lsl.script_level_id = sl.script_level_id\n    join levels as lev\n        on lsl.level_id = lev.level_id  \n    join scripts as sc \n        on sl.script_id = sc.script_id\n    join stages as st \n        on sl.stage_id = st.stage_id \n    left join course_scripts as cs \n        on sc.script_id = cs.script_id\n    left join unit_groups as ug \n        on cs.course_id = ug.unit_group_id\n    left join course_names as cn \n        on ug.unit_group_id = cn.versioned_course_id   \n    left join script_names as sn \n        on sc.script_id = sn.versioned_script_id\n)\n\nselect * \nfrom combined", "language": "sql", "refs": [{"name": "stg_dashboard__scripts", "package": null, "version": null}, {"name": "stg_dashboard__levels", "package": null, "version": null}, {"name": "stg_dashboard__stages", "package": null, "version": null}, {"name": "stg_dashboard__script_levels", "package": null, "version": null}, {"name": "stg_dashboard__levels_script_levels", "package": null, "version": null}, {"name": "stg_dashboard__course_scripts", "package": null, "version": null}, {"name": "stg_dashboard__unit_groups", "package": null, "version": null}, {"name": "dim_course_names", "package": null, "version": null}, {"name": "dim_script_names", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.stg_dashboard__scripts", "model.cdo_analytics.stg_dashboard__levels", "model.cdo_analytics.stg_dashboard__stages", "model.cdo_analytics.stg_dashboard__script_levels", "model.cdo_analytics.stg_dashboard__levels_script_levels", "model.cdo_analytics.stg_dashboard__course_scripts", "model.cdo_analytics.stg_dashboard__unit_groups", "model.cdo_analytics.dim_course_names", "model.cdo_analytics.dim_script_names"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/courses/dim_course_structure.sql", "compiled": true, "compiled_code": "\n\nwith \nscripts as (\n    select *\n    from \"dev\".\"analytics\".\"stg_dashboard__scripts\" \n),\n\nlevels as (\n    select * \n    from \"dev\".\"analytics\".\"stg_dashboard__levels\"\n    ),\n\nstages as (\n    select *\n    from \"dev\".\"analytics\".\"stg_dashboard__stages\"\n),\n\nscript_levels as (\n    select *\n    from \"dev\".\"analytics\".\"stg_dashboard__script_levels\"\n),\n\nlevels_script_levels as (\n    select * \n    from \"dev\".\"analytics\".\"stg_dashboard__levels_script_levels\"\n),\n\ncourse_scripts as (\n    select * \n    from \"dev\".\"analytics\".\"stg_dashboard__course_scripts\"\n),\n\nunit_groups as (\n    select * \n    from \"dev\".\"analytics\".\"stg_dashboard__unit_groups\"\n),\n\ncourse_names as (\n    select *\n    from \"dev\".\"analytics\".\"dim_course_names\"\n),\n\nscript_names as (\n    select * \n    from \"dev\".\"analytics\".\"dim_script_names\" \n),\n\ncombined as (\n    select \n        -- courses\n        ug.unit_group_id as course_id,\n        ug.name as course_name,\n        cn.course_name_short,\n        cn.course_name_long,\n        sc.course_name_true,\n\n        -- scripts\n        sl.script_id,\n        sc.script_name,\n        sn.versioned_script_name,\n        sn.script_name_short,\n        sn.script_name_long,\n        \n        -- stages\n        st.stage_id,\n        st.stage_name,\n        st.stage_number,\n\n        -- levels\n        case when sl.script_id = '26' \n              and lsl.level_id = '14633' \n             then 1 else lsl.level_id \n        end as level_id,\n        lev.name as level_name,\n        sl.position as level_number,\n        rank() over(partition by sl.script_id order by st.stage_number, sl.position) as level_script_order,\n        sl.is_assessment,\n        lev.updated_at\n    from levels_script_levels as lsl \n    join script_levels as sl \n        on lsl.script_level_id = sl.script_level_id\n    join levels as lev\n        on lsl.level_id = lev.level_id  \n    join scripts as sc \n        on sl.script_id = sc.script_id\n    join stages as st \n        on sl.stage_id = st.stage_id \n    left join course_scripts as cs \n        on sc.script_id = cs.script_id\n    left join unit_groups as ug \n        on cs.course_id = ug.unit_group_id\n    left join course_names as cn \n        on ug.unit_group_id = cn.versioned_course_id   \n    left join script_names as sn \n        on sc.script_id = sn.versioned_script_id\n)\n\nselect * \nfrom combined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.fct_weekly_school_acquisition_metrics": {"database": "dev", "schema": "analytics", "name": "fct_weekly_school_acquisition_metrics", "resource_type": "model", "package_name": "cdo_analytics", "path": "marts/metrics/fct_weekly_school_acquisition_metrics.sql", "original_file_path": "models/marts/metrics/fct_weekly_school_acquisition_metrics.sql", "unique_id": "model.cdo_analytics.fct_weekly_school_acquisition_metrics", "fqn": ["cdo_analytics", "marts", "metrics", "fct_weekly_school_acquisition_metrics"], "alias": "fct_weekly_school_acquisition_metrics", "checksum": {"name": "sha256", "checksum": "758ff10db8dd48d47f7b98fa53a631c3208cddf0b1bdf13e784f104f04247e32"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["mart"], "description": "high-level aggregations used for the monthly initiative review on school acquisitions", "columns": {"school_level": {"name": "school_level", "description": "elementary, middle, or high school- note that a given school may be counted in multiple school level aggregations (e.g. K-8)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "school year in which the activity at a school is counted", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "active status of the set of schools in the aggregations", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_week": {"name": "start_week", "description": "the week in which the set of schools was first considered active for within that school year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sy_week_order": {"name": "sy_week_order", "description": "the week number of a schools start_week corresponding to the school year (not calendar year)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "week_of": {"name": "week_of", "description": "start date of the week the data is aggregated for", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "num_schools_this_week": {"name": "num_schools_this_week", "description": "total number of schools within the school level and active status dimensions within that week", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "num_schools_running_total": {"name": "num_schools_running_total", "description": "total number of schools within the school level and active status dimensions as of that week", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/marts/metrics/_metrics__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "table", "tags": ["mart"]}, "created_at": 1705873847.2637522, "relation_name": "\"dev\".\"analytics\".\"fct_weekly_school_acquisition_metrics\"", "raw_code": "with \nschool_status as (\n    select * \n    from {{ ref('dim_school_status') }}\n),\n\ndim_schools as (\n    select * \n    from {{ ref('dim_schools') }}\n),\n\nschool_status_sy as (\n    select \n        school_status.school_id,\n        school_status.school_year,\n        school_status.status,\n        school_status.active_courses,\n        dim_schools.school_level_simple,\n        dim_schools.is_stage_el,\n        dim_schools.is_stage_mi,\n        dim_schools.is_stage_hi,\n        school_status.school_started_at\n    from school_status \n    left join dim_schools \n        on school_status.school_id = dim_schools.school_id\n)\n, school_weeks as (\n    select * FROM {{ref('int_school_weeks')}}\n)\n\n, active_schools_by_week as (\n    select \n        sssy.school_year,\n        sssy.school_level_simple,\n        sssy.is_stage_el,\n        sssy.is_stage_mi,\n        sssy.is_stage_hi,\n        sssy.status,\n        sw.iso_week start_week, --keeping start_week alias for now, even though the output gets re-aliased as iso_week\n        sw.school_year_week,\n        sw.started_at week_of,\n        count(distinct school_id) as num_schools\n    from school_status_sy sssy\n    left join school_weeks sw\n        on school_started_at between sw.started_at and sw.ended_at\n    where status like 'active %'\n    group by 1,2,3,4,5,6,7,8,9\n\n)\n, running_totals_by_week as (\n    select\n        school_year,\n        status,\n        start_week,\n        school_year_week,\n        min(week_of)::date week_of,\n        sum(case when is_stage_el=1 then num_schools else 0 end) as el_schools,\n        sum(case when is_stage_mi=1 then num_schools else 0 end) as mi_schools,\n        sum(case when is_stage_hi=1 then num_schools else 0 end) as hi_schools,\n        sum(el_schools) over (\n            partition by school_year, status order by school_year_week\n            rows between unbounded preceding and current row\n        ) el_running_total,\n        \n        sum(mi_schools) over (\n            partition by school_year, status order by school_year_week\n            rows between unbounded preceding and current row\n        ) mi_running_total,\n        \n        sum(hi_schools) over (\n            partition by school_year, status order by school_year_week\n            rows between unbounded preceding and current row\n        ) hi_running_total\n    from active_schools_by_week\n    group by 1,2,3,4\n    order by status, school_year_week\n),\n\nreport_by_week as (\n    select\n        'elementary'                as school_level,\n        school_year,\n        status,\n        start_week                  as iso_week,\n        school_year_week,\n        week_of,\n        el_schools                  as num_schools_this_week,\n        el_running_total            as num_schools_running_total\n    \n    from running_totals_by_week\n\n  \n    union all\n  \n    select\n        'middle'                    as school_level,\n        school_year,\n        status,\n        start_week                  as iso_week,\n        school_year_week,\n        week_of,\n        mi_schools                  as num_schools_this_week,\n        mi_running_total            as num_schools_running_total\n    from running_totals_by_week\n\n    union all\n  \n    select\n        'high'                      as school_level,\n        school_year,\n        status,\n        start_week                  as iso_week,\n        school_year_week,\n        week_of,\n        hi_schools                  as num_schools_this_week,\n        hi_running_total            as num_schools_running_total\n    from running_totals_by_week\n)\n\nselect * \nfrom report_by_week", "language": "sql", "refs": [{"name": "dim_school_status", "package": null, "version": null}, {"name": "dim_schools", "package": null, "version": null}, {"name": "int_school_weeks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.dim_school_status", "model.cdo_analytics.dim_schools", "model.cdo_analytics.int_school_weeks"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/metrics/fct_weekly_school_acquisition_metrics.sql", "compiled": true, "compiled_code": "with \nschool_status as (\n    select * \n    from \"dev\".\"analytics\".\"dim_school_status\"\n),\n\ndim_schools as (\n    select * \n    from \"dev\".\"analytics\".\"dim_schools\"\n),\n\nschool_status_sy as (\n    select \n        school_status.school_id,\n        school_status.school_year,\n        school_status.status,\n        school_status.active_courses,\n        dim_schools.school_level_simple,\n        dim_schools.is_stage_el,\n        dim_schools.is_stage_mi,\n        dim_schools.is_stage_hi,\n        school_status.school_started_at\n    from school_status \n    left join dim_schools \n        on school_status.school_id = dim_schools.school_id\n)\n, school_weeks as (\n    select * FROM \"dev\".\"analytics\".\"int_school_weeks\"\n)\n\n, active_schools_by_week as (\n    select \n        sssy.school_year,\n        sssy.school_level_simple,\n        sssy.is_stage_el,\n        sssy.is_stage_mi,\n        sssy.is_stage_hi,\n        sssy.status,\n        sw.iso_week start_week, --keeping start_week alias for now, even though the output gets re-aliased as iso_week\n        sw.school_year_week,\n        sw.started_at week_of,\n        count(distinct school_id) as num_schools\n    from school_status_sy sssy\n    left join school_weeks sw\n        on school_started_at between sw.started_at and sw.ended_at\n    where status like 'active %'\n    group by 1,2,3,4,5,6,7,8,9\n\n)\n, running_totals_by_week as (\n    select\n        school_year,\n        status,\n        start_week,\n        school_year_week,\n        min(week_of)::date week_of,\n        sum(case when is_stage_el=1 then num_schools else 0 end) as el_schools,\n        sum(case when is_stage_mi=1 then num_schools else 0 end) as mi_schools,\n        sum(case when is_stage_hi=1 then num_schools else 0 end) as hi_schools,\n        sum(el_schools) over (\n            partition by school_year, status order by school_year_week\n            rows between unbounded preceding and current row\n        ) el_running_total,\n        \n        sum(mi_schools) over (\n            partition by school_year, status order by school_year_week\n            rows between unbounded preceding and current row\n        ) mi_running_total,\n        \n        sum(hi_schools) over (\n            partition by school_year, status order by school_year_week\n            rows between unbounded preceding and current row\n        ) hi_running_total\n    from active_schools_by_week\n    group by 1,2,3,4\n    order by status, school_year_week\n),\n\nreport_by_week as (\n    select\n        'elementary'                as school_level,\n        school_year,\n        status,\n        start_week                  as iso_week,\n        school_year_week,\n        week_of,\n        el_schools                  as num_schools_this_week,\n        el_running_total            as num_schools_running_total\n    \n    from running_totals_by_week\n\n  \n    union all\n  \n    select\n        'middle'                    as school_level,\n        school_year,\n        status,\n        start_week                  as iso_week,\n        school_year_week,\n        week_of,\n        mi_schools                  as num_schools_this_week,\n        mi_running_total            as num_schools_running_total\n    from running_totals_by_week\n\n    union all\n  \n    select\n        'high'                      as school_level,\n        school_year,\n        status,\n        start_week                  as iso_week,\n        school_year_week,\n        week_of,\n        hi_schools                  as num_schools_this_week,\n        hi_running_total            as num_schools_running_total\n    from running_totals_by_week\n)\n\nselect * \nfrom report_by_week", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.dim_teachers": {"database": "dev", "schema": "analytics", "name": "dim_teachers", "resource_type": "model", "package_name": "cdo_analytics", "path": "marts/teachers/dim_teachers.sql", "original_file_path": "models/marts/teachers/dim_teachers.sql", "unique_id": "model.cdo_analytics.dim_teachers", "fqn": ["cdo_analytics", "marts", "teachers", "dim_teachers"], "alias": "dim_teachers", "checksum": {"name": "sha256", "checksum": "0b71531ed0ffb3af5f7bd2b0b30060b002852d0dd8daa0cc60c432a2f9ccb2a7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["mart"], "description": "This model contains all teacher accounts ever created", "columns": {"teacher_id": {"name": "teacher_id", "description": "unique ID for every teacher account created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "studio_person_id": {"name": "studio_person_id", "description": "ID used for PD applications where we want to associated multiple teacher IDs with a single application", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_type": {"name": "user_type", "description": "always \"teacher\" - used for verification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_info_id": {"name": "school_info_id", "description": "ID populated for any school manually entered by the teacher or found through the NCES dropdown- generally we do not use this field downstream", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at_school_year": {"name": "created_at_school_year", "description": "the school year in which the teacher account was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_id": {"name": "school_id", "description": "ID populated if the teacher selected their school from the NCES dropdown menu- this is the school identifier used in downstream models", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_international": {"name": "is_international", "description": "1 if the most recent sign in from the teacher account was from outside the US, 0 otherwise", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/marts/teachers/_teachers__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "table", "tags": ["mart"]}, "created_at": 1705873847.2653544, "relation_name": "\"dev\".\"analytics\".\"dim_teachers\"", "raw_code": "with \nteachers as (\n    select \n    {{ dbt_utils.star(\n        from=ref('stg_dashboard__users'),\n        except=[\"user_id\",\n            \"is_urg\",\n            \"student_id\"]) }}\n    from {{ ref('stg_dashboard__users') }}\n    where teacher_id is not null \n),\n\nuser_geos as (\n    select \n        user_id, \n        is_international\n    from {{ ref('stg_dashboard__user_geos') }}\n    where user_id in (select teacher_id from teachers)\n),\n\nuser_school_infos as (\n    select * \n    from {{ ref('stg_dashboard_pii__user_school_infos') }}\n),\n\nschool_infos as (\n    select * \n    from {{ ref('stg_dashboard__school_infos') }}\n), \n\nschool_years as (\n    select * \n    from {{ ref('int_school_years') }}\n),\n\n-- get teacher NCES school_id association\nteacher_schools as (\n    select \n        teachers.teacher_id,\n        si.school_id,\n        rank () over (partition by teachers.teacher_id order by si.school_id, usi.ended_at desc) rnk\n    from teachers\n    left join user_school_infos as usi    \n        on usi.user_id = teachers.teacher_id\n    left join school_infos as si \n        on si.school_info_id = usi.school_info_id\n    where si.school_id is not null\n),\n\nteacher_latest_school as (\n    select \n        teacher_id,\n        school_id\n    from teacher_schools\n    where rnk = 1\n)\n\nselect \n    teachers.*, \n    school_years.school_year as created_at_school_year,\n    tls.school_id,\n    user_geos.is_international\nfrom teachers \njoin user_geos \n    on teachers.teacher_id = user_geos.user_id\nleft join teacher_latest_school tls \n    on tls.teacher_id = user_geos.user_id\nleft join school_years \n    on teachers.created_at between school_years.started_at and school_years.ended_at", "language": "sql", "refs": [{"name": "stg_dashboard__users", "package": null, "version": null}, {"name": "stg_dashboard__users", "package": null, "version": null}, {"name": "stg_dashboard__user_geos", "package": null, "version": null}, {"name": "stg_dashboard_pii__user_school_infos", "package": null, "version": null}, {"name": "stg_dashboard__school_infos", "package": null, "version": null}, {"name": "int_school_years", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.cdo_analytics.stg_dashboard__users", "model.cdo_analytics.stg_dashboard__user_geos", "model.cdo_analytics.stg_dashboard_pii__user_school_infos", "model.cdo_analytics.stg_dashboard__school_infos", "model.cdo_analytics.int_school_years"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/teachers/dim_teachers.sql", "compiled": true, "compiled_code": "with \nteachers as (\n    select \n    \"teacher_id\",\n  \"studio_person_id\",\n  \"user_type\",\n  \"age_years\",\n  \"gender\",\n  \"locale\",\n  \"sign_in_count\",\n  \"school_info_id\",\n  \"total_lines\",\n  \"current_sign_in_at\",\n  \"last_sign_in_at\",\n  \"created_at\",\n  \"updated_at\",\n  \"deleted_at\",\n  \"purged_at\"\n    from \"dev\".\"analytics\".\"stg_dashboard__users\"\n    where teacher_id is not null \n),\n\nuser_geos as (\n    select \n        user_id, \n        is_international\n    from \"dev\".\"analytics\".\"stg_dashboard__user_geos\"\n    where user_id in (select teacher_id from teachers)\n),\n\nuser_school_infos as (\n    select * \n    from \"dev\".\"analytics\".\"stg_dashboard_pii__user_school_infos\"\n),\n\nschool_infos as (\n    select * \n    from \"dev\".\"analytics\".\"stg_dashboard__school_infos\"\n), \n\nschool_years as (\n    select * \n    from \"dev\".\"analytics\".\"int_school_years\"\n),\n\n-- get teacher NCES school_id association\nteacher_schools as (\n    select \n        teachers.teacher_id,\n        si.school_id,\n        rank () over (partition by teachers.teacher_id order by si.school_id, usi.ended_at desc) rnk\n    from teachers\n    left join user_school_infos as usi    \n        on usi.user_id = teachers.teacher_id\n    left join school_infos as si \n        on si.school_info_id = usi.school_info_id\n    where si.school_id is not null\n),\n\nteacher_latest_school as (\n    select \n        teacher_id,\n        school_id\n    from teacher_schools\n    where rnk = 1\n)\n\nselect \n    teachers.*, \n    school_years.school_year as created_at_school_year,\n    tls.school_id,\n    user_geos.is_international\nfrom teachers \njoin user_geos \n    on teachers.teacher_id = user_geos.user_id\nleft join teacher_latest_school tls \n    on tls.teacher_id = user_geos.user_id\nleft join school_years \n    on teachers.created_at between school_years.started_at and school_years.ended_at", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.dim_teacher_status": {"database": "dev", "schema": "analytics", "name": "dim_teacher_status", "resource_type": "model", "package_name": "cdo_analytics", "path": "marts/teachers/dim_teacher_status.sql", "original_file_path": "models/marts/teachers/dim_teacher_status.sql", "unique_id": "model.cdo_analytics.dim_teacher_status", "fqn": ["cdo_analytics", "marts", "teachers", "dim_teacher_status"], "alias": "dim_teacher_status", "checksum": {"name": "sha256", "checksum": "a25ad91fbc46f127174eaf740636a98ee9d1c5a4346c726e668dff2fa1039fbb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["mart"], "description": "1 row per teacher, per school_year, with status", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/marts/teachers/_teachers__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "table", "tags": ["mart"]}, "created_at": 1705873847.2658138, "relation_name": "\"dev\".\"analytics\".\"dim_teacher_status\"", "raw_code": "{# Notes:\r\nDesign: 1 row per teacher, school_year, churn_status\r\nLogic: we can determine status based on three properties we can compute for every user|school_year as a binary:\r\n    - 0/1 they are active this school_year - (A)ctive\r\n    - 0/1 they were active in the previous school_year - (P)rev year\r\n    - 0/1 they have ever been active in ANY school_year prior, incl. prev year - (E)ver before\r\n\r\n    These 3 values can be combined into an ordered 3-char string representing the concatenated true/false combinations \r\n    for Active|Prev|Ever e.g. \"101\" means: ( Active = true AND Prev year = false AND Ever before = true )\r\n\r\n    - '000' (0) = 'market'              -- Not active now + never been active\r\n    - '001' (1) = 'inactive churn'      -- NOT active + NOT active prev year + active ever before\r\n    - '010' (2) = '<impossible status>' -- should not be possible, active in the prev year should imply active ever before\r\n    - '011' (3) = 'inactive this year'  -- NOT active + active prev year + (active ever before implied)\r\n    - '100' (4) = 'active new'          -- active this year + NOT active last year + NOT active ever before\r\n    - '101' (5) = 'active reacquired'   -- Active this year + NOT active last year + active in the past\r\n    - '110' (6) = '<impossible status>' -- impossible for same reason as status (2)\r\n    - '111' (7) = 'active retained'     -- active this year + active last year + (active ever before implied) \r\n#}\r\n\r\nwith \r\nteacher_section_started as (\r\n    select teacher_id,\r\n        school_year,\r\n        min(section_started_at) as started_teaching_at,\r\n        listagg(distinct course_name, ', ') within group (order by course_name ASC) section_courses_started\r\n    from {{ ref('int_active_sections') }}\r\n    where teacher_id is not null \r\n    group by 1, 2\r\n),\r\n\r\nall_teacher_users as (\r\n\r\n    select\r\n        teacher_id,\r\n        created_at\r\n    from {{ref('dim_teachers')}}\r\n\r\n), \r\n\r\nschool_years as (\r\n    select *\r\n    from {{ ref('int_school_years') }}\r\n),\r\n\r\nall_teachers_school_years as (\r\n\r\n    select\r\n        u.teacher_id,\r\n        sy.school_year\r\n    from all_teacher_users u\r\n    join school_years sy on u.created_at <= sy.ended_at\r\n    where sy.started_at < current_timestamp\r\n\r\n), \r\n\r\nactive_status_simple as (\r\n\r\n    select\r\n        all_sy.teacher_id,\r\n        all_sy.school_year,\r\n        case when t.teacher_id is null then 0 else 1 end as is_active,\r\n        t.section_courses_started,\r\n        t.started_teaching_at\r\n\r\n    from all_teachers_school_years all_sy\r\n    left join teacher_section_started t on t.teacher_id = all_sy.teacher_id and t.school_year = all_sy.school_year\r\n\r\n), \r\n\r\nfull_status as (\r\n    -- Determine the active status for each teacher in each year\r\n\r\n    select\r\n        teacher_id,\r\n        school_year,\r\n        is_active,\r\n        section_courses_started,\r\n        started_teaching_at,\r\n        coalesce(\r\n            lag(is_active, 1) \r\n                over (partition by teacher_id order by school_year) \r\n            , 0\r\n        ) as prev_year_active,\r\n        coalesce( --force any NULL to be 0 for this function\r\n            max(is_active) \r\n                over (partition by teacher_id order by school_year rows between unbounded preceding and 1 preceding)\r\n            , 0\r\n        ) as ever_active_before,\r\n        (is_active || prev_year_active || ever_active_before) status_code\r\n    from\r\n        active_status_simple\r\n\r\n), \r\n\r\nfinal as (\r\n\r\n    select\r\n        teacher_id,\r\n        school_year,\r\n        case \r\n            when status_code = '000' then 'market'\r\n            when status_code = '001' then 'inactive churn'\r\n            when status_code = '010' then '<impossible status>'\r\n            when status_code = '011' then 'inactive this year'\r\n            when status_code = '100' then 'active new'\r\n            when status_code = '101' then 'active reacquired'\r\n            when status_code = '110' then '<impossible status>'\r\n            when status_code = '111' then 'active retained'\r\n        end as status,\r\n        section_courses_started,\r\n        started_teaching_at\r\n    from\r\n        full_status\r\n    order by\r\n        teacher_id, school_year\r\n)\r\n\r\nselect * \r\nfrom final", "language": "sql", "refs": [{"name": "int_active_sections", "package": null, "version": null}, {"name": "dim_teachers", "package": null, "version": null}, {"name": "int_school_years", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.cdo_analytics.int_active_sections", "model.cdo_analytics.dim_teachers", "model.cdo_analytics.int_school_years"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/teachers/dim_teacher_status.sql", "compiled": true, "compiled_code": "\n\nwith \nteacher_section_started as (\n    select teacher_id,\n        school_year,\n        min(section_started_at) as started_teaching_at,\n        listagg(distinct course_name, ', ') within group (order by course_name ASC) section_courses_started\n    from \"dev\".\"analytics\".\"int_active_sections\"\n    where teacher_id is not null \n    group by 1, 2\n),\n\nall_teacher_users as (\n\n    select\n        teacher_id,\n        created_at\n    from \"dev\".\"analytics\".\"dim_teachers\"\n\n), \n\nschool_years as (\n    select *\n    from \"dev\".\"analytics\".\"int_school_years\"\n),\n\nall_teachers_school_years as (\n\n    select\n        u.teacher_id,\n        sy.school_year\n    from all_teacher_users u\n    join school_years sy on u.created_at <= sy.ended_at\n    where sy.started_at < current_timestamp\n\n), \n\nactive_status_simple as (\n\n    select\n        all_sy.teacher_id,\n        all_sy.school_year,\n        case when t.teacher_id is null then 0 else 1 end as is_active,\n        t.section_courses_started,\n        t.started_teaching_at\n\n    from all_teachers_school_years all_sy\n    left join teacher_section_started t on t.teacher_id = all_sy.teacher_id and t.school_year = all_sy.school_year\n\n), \n\nfull_status as (\n    -- Determine the active status for each teacher in each year\n\n    select\n        teacher_id,\n        school_year,\n        is_active,\n        section_courses_started,\n        started_teaching_at,\n        coalesce(\n            lag(is_active, 1) \n                over (partition by teacher_id order by school_year) \n            , 0\n        ) as prev_year_active,\n        coalesce( --force any NULL to be 0 for this function\n            max(is_active) \n                over (partition by teacher_id order by school_year rows between unbounded preceding and 1 preceding)\n            , 0\n        ) as ever_active_before,\n        (is_active || prev_year_active || ever_active_before) status_code\n    from\n        active_status_simple\n\n), \n\nfinal as (\n\n    select\n        teacher_id,\n        school_year,\n        case \n            when status_code = '000' then 'market'\n            when status_code = '001' then 'inactive churn'\n            when status_code = '010' then '<impossible status>'\n            when status_code = '011' then 'inactive this year'\n            when status_code = '100' then 'active new'\n            when status_code = '101' then 'active reacquired'\n            when status_code = '110' then '<impossible status>'\n            when status_code = '111' then 'active retained'\n        end as status,\n        section_courses_started,\n        started_teaching_at\n    from\n        full_status\n    order by\n        teacher_id, school_year\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.cdo_analytics.dim_forms": {"database": "dev", "schema": "analytics", "name": "dim_forms", "resource_type": "model", "package_name": "cdo_analytics", "path": "marts/misc/dim_forms.sql", "original_file_path": "models/marts/misc/dim_forms.sql", "unique_id": "model.cdo_analytics.dim_forms", "fqn": ["cdo_analytics", "marts", "misc", "dim_forms"], "alias": "dim_forms", "checksum": {"name": "sha256", "checksum": "54de82281f47c50386b3614be3de20cc2c00b113c7e05d8163a1d98f4960fa4a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "grant select on {{ this }} to trevorio", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["dbt", "trevorio"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "bind": false, "query_tag": "dbt"}, "tags": ["mart"], "description": "all forms data with form geos fields", "columns": {"form_id": {"name": "form_id", "description": "unique id for table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://models/marts/misc/_misc_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["dbt", "trevorio"]}, "query_tag": "dbt", "bind": false, "post-hook": ["grant select on {{ this }} to trevorio"], "materialized": "table", "tags": ["mart"]}, "created_at": 1705873847.2745767, "relation_name": "\"dev\".\"analytics\".\"dim_forms\"", "raw_code": "with \nforms as (\n    select * \n    from {{ ref('stg_pegasus_pii__forms') }}\n),\n\nform_geos as (\n    select * \n    from {{ ref('stg_pegasus_pii__form_geos') }}\n),\n\ncombined as (\n    select \n        forms.form_id,\n        forms.form_category,\n        forms.hoc_year,\n        forms.email,\n        forms.name,\n        forms.form_kind,\n        forms.updated_at,\n        forms.indexed_at,\n        forms.review,\n        forms.reviewed_by,\n        forms.reviewed_at,\n        forms.processed_at,\n        forms.notified_at,\n        forms.user_id,\n        forms.parent_id,\n        forms.location_country_code,\n        coalesce(forms.city,form_geos.city)                     as city,\n        coalesce(forms.state,form_geos.state)                   as state,\n        coalesce(forms.country,form_geos.country)               as country,\n        max(forms.created_at)                                   as registered_at,\n        max(coalesce(forms.updated_at,forms.created_at))        as last_updated_at\n    from forms \n    left join form_geos \n        on forms.form_id = form_geos.form_id\n    {{ dbt_utils.group_by(19) }}\n)\n\nselect * \nfrom combined", "language": "sql", "refs": [{"name": "stg_pegasus_pii__forms", "package": null, "version": null}, {"name": "stg_pegasus_pii__form_geos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.cdo_analytics.stg_pegasus_pii__forms", "model.cdo_analytics.stg_pegasus_pii__form_geos"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/misc/dim_forms.sql", "compiled": true, "compiled_code": "with \nforms as (\n    select * \n    from \"dev\".\"analytics\".\"stg_pegasus_pii__forms\"\n),\n\nform_geos as (\n    select * \n    from \"dev\".\"analytics\".\"stg_pegasus_pii__form_geos\"\n),\n\ncombined as (\n    select \n        forms.form_id,\n        forms.form_category,\n        forms.hoc_year,\n        forms.email,\n        forms.name,\n        forms.form_kind,\n        forms.updated_at,\n        forms.indexed_at,\n        forms.review,\n        forms.reviewed_by,\n        forms.reviewed_at,\n        forms.processed_at,\n        forms.notified_at,\n        forms.user_id,\n        forms.parent_id,\n        forms.location_country_code,\n        coalesce(forms.city,form_geos.city)                     as city,\n        coalesce(forms.state,form_geos.state)                   as state,\n        coalesce(forms.country,form_geos.country)               as country,\n        max(forms.created_at)                                   as registered_at,\n        max(coalesce(forms.updated_at,forms.created_at))        as last_updated_at\n    from forms \n    left join form_geos \n        on forms.form_id = form_geos.form_id\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19\n)\n\nselect * \nfrom combined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "seed.cdo_analytics.seed_school_years": {"database": "dev", "schema": "analytics", "name": "seed_school_years", "resource_type": "seed", "package_name": "cdo_analytics", "path": "seed_school_years.csv", "original_file_path": "data/seed_school_years.csv", "unique_id": "seed.cdo_analytics.seed_school_years", "fqn": ["cdo_analytics", "seed_school_years"], "alias": "seed_school_years", "checksum": {"name": "sha256", "checksum": "73163d44cc3f287951a34c686413f699c633107105326ee7abdcfc5561753333"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://data/_seed_files.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873846.9718454, "relation_name": "\"dev\".\"analytics\".\"seed_school_years\"", "raw_code": "", "root_path": "/tmp/jobs/243232111/target/dbt", "depends_on": {"macros": []}}, "seed.cdo_analytics.seed_training_school_years": {"database": "dev", "schema": "analytics", "name": "seed_training_school_years", "resource_type": "seed", "package_name": "cdo_analytics", "path": "seed_training_school_years.csv", "original_file_path": "data/seed_training_school_years.csv", "unique_id": "seed.cdo_analytics.seed_training_school_years", "fqn": ["cdo_analytics", "seed_training_school_years"], "alias": "seed_training_school_years", "checksum": {"name": "sha256", "checksum": "6d704b1d99bd9599674f73b02549f1f701c4530adf7dfbd8699d6169117b5168"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://data/_seed_files.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873846.9735904, "relation_name": "\"dev\".\"analytics\".\"seed_training_school_years\"", "raw_code": "", "root_path": "/tmp/jobs/243232111/target/dbt", "depends_on": {"macros": []}}, "seed.cdo_analytics.seed_csf_stages_for_completion": {"database": "dev", "schema": "analytics", "name": "seed_csf_stages_for_completion", "resource_type": "seed", "package_name": "cdo_analytics", "path": "seed_csf_stages_for_completion.csv", "original_file_path": "data/seed_csf_stages_for_completion.csv", "unique_id": "seed.cdo_analytics.seed_csf_stages_for_completion", "fqn": ["cdo_analytics", "seed_csf_stages_for_completion"], "alias": "seed_csf_stages_for_completion", "checksum": {"name": "sha256", "checksum": "bc6138391ad2a831c613bc7b54dc3ea0d50a368d148fffcb068961cd1efbffcf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "pulled manually from the output of what is currently in redshift", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://data/_seed_files.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873846.9732084, "relation_name": "\"dev\".\"analytics\".\"seed_csf_stages_for_completion\"", "raw_code": "", "root_path": "/tmp/jobs/243232111/target/dbt", "depends_on": {"macros": []}}, "seed.cdo_analytics.seed_course_names": {"database": "dev", "schema": "analytics", "name": "seed_course_names", "resource_type": "seed", "package_name": "cdo_analytics", "path": "seed_course_names.csv", "original_file_path": "data/seed_course_names.csv", "unique_id": "seed.cdo_analytics.seed_course_names", "fqn": ["cdo_analytics", "seed_course_names"], "alias": "seed_course_names", "checksum": {"name": "sha256", "checksum": "528a7a89ad61256a36367fc961a1c1b5b249972dcd6dee11b1023d3ec67bd65d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://data/_seed_files.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873846.9713428, "relation_name": "\"dev\".\"analytics\".\"seed_course_names\"", "raw_code": "", "root_path": "/tmp/jobs/243232111/target/dbt", "depends_on": {"macros": []}}, "seed.cdo_analytics.seed_workshop_state_zip_manual": {"database": "dev", "schema": "analytics", "name": "seed_workshop_state_zip_manual", "resource_type": "seed", "package_name": "cdo_analytics", "path": "seed_workshop_state_zip_manual.csv", "original_file_path": "data/seed_workshop_state_zip_manual.csv", "unique_id": "seed.cdo_analytics.seed_workshop_state_zip_manual", "fqn": ["cdo_analytics", "seed_workshop_state_zip_manual"], "alias": "seed_workshop_state_zip_manual", "checksum": {"name": "sha256", "checksum": "543d7c68f00560808100e8c8adeb55c6da14485e205d199dac7b63468a3c6dd0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://data/_seed_files.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873846.974377, "relation_name": "\"dev\".\"analytics\".\"seed_workshop_state_zip_manual\"", "raw_code": "", "root_path": "/tmp/jobs/243232111/target/dbt", "depends_on": {"macros": []}}, "seed.cdo_analytics.seed_state_abbreviations": {"database": "dev", "schema": "analytics", "name": "seed_state_abbreviations", "resource_type": "seed", "package_name": "cdo_analytics", "path": "seed_state_abbreviations.csv", "original_file_path": "data/seed_state_abbreviations.csv", "unique_id": "seed.cdo_analytics.seed_state_abbreviations", "fqn": ["cdo_analytics", "seed_state_abbreviations"], "alias": "seed_state_abbreviations", "checksum": {"name": "sha256", "checksum": "f559a2d02473e50970f23a57737a785b4d9642e8a15fd25ce5fbb92678c48476"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "pulled manually from the output of what is currently in redshift", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://data/_seed_files.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873846.973984, "relation_name": "\"dev\".\"analytics\".\"seed_state_abbreviations\"", "raw_code": "", "root_path": "/tmp/jobs/243232111/target/dbt", "depends_on": {"macros": []}}, "seed.cdo_analytics.seed_csf_plugged_stage_counts": {"database": "dev", "schema": "analytics", "name": "seed_csf_plugged_stage_counts", "resource_type": "seed", "package_name": "cdo_analytics", "path": "seed_csf_plugged_stage_counts.csv", "original_file_path": "data/seed_csf_plugged_stage_counts.csv", "unique_id": "seed.cdo_analytics.seed_csf_plugged_stage_counts", "fqn": ["cdo_analytics", "seed_csf_plugged_stage_counts"], "alias": "seed_csf_plugged_stage_counts", "checksum": {"name": "sha256", "checksum": "6b834521386c5278ac337bf5f239064f2dd35c5e532e2c4dded9b6ae6ecece36"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "pulled manually from the output of what is currently in redshift", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://data/_seed_files.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873846.9728072, "relation_name": "\"dev\".\"analytics\".\"seed_csf_plugged_stage_counts\"", "raw_code": "", "root_path": "/tmp/jobs/243232111/target/dbt", "depends_on": {"macros": []}}, "seed.cdo_analytics.seed_script_names": {"database": "dev", "schema": "analytics", "name": "seed_script_names", "resource_type": "seed", "package_name": "cdo_analytics", "path": "seed_script_names.csv", "original_file_path": "data/seed_script_names.csv", "unique_id": "seed.cdo_analytics.seed_script_names", "fqn": ["cdo_analytics", "seed_script_names"], "alias": "seed_script_names", "checksum": {"name": "sha256", "checksum": "ad5c9a8ec41f5ec648ba50bad6b009f6d354c9abe3cba3d771116c7a5f5a2580"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "cdo_analytics://data/_seed_files.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873846.9722579, "relation_name": "\"dev\".\"analytics\".\"seed_script_names\"", "raw_code": "", "root_path": "/tmp/jobs/243232111/target/dbt", "depends_on": {"macros": []}}, "model.redshift.redshift_admin_users_table_view_privileges": {"database": "dev", "schema": "analytics", "name": "redshift_admin_users_table_view_privileges", "resource_type": "model", "package_name": "redshift", "path": "views/redshift_admin_users_table_view_privileges.sql", "original_file_path": "models/views/redshift_admin_users_table_view_privileges.sql", "unique_id": "model.redshift.redshift_admin_users_table_view_privileges", "fqn": ["redshift", "views", "redshift_admin_users_table_view_privileges"], "alias": "redshift_admin_users_table_view_privileges", "checksum": {"name": "sha256", "checksum": "c8bd39ae199effce148de0a4e0443c2b3041a5942b3af0cc157ba6c8d9584841"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705873846.86634, "relation_name": "\"dev\".\"analytics\".\"redshift_admin_users_table_view_privileges\"", "raw_code": "with tables as (\n\n  select * from {{ref('pg_tables')}}\n\n), views as (\n\n  select * from {{ref('pg_views')}}\n\n), users as (\n\n  select * from {{ref('pg_user')}}\n\n), objects as (\n  \n  select\n    schema_name\n  , 'table' as object_type\n  , table_name as object_name\n  , '\"' || schema_name || '\".\"' || table_name || '\"' as full_object_name\n  from tables\n  where schema_name not in ('pg_catalog', 'information_schema')\n  \n  union\n  \n  select\n    schema_name\n  , 'view' as object_type\n  , view_name as object_name\n  , '\"' || schema_name || '\".\"' || view_name || '\"' as full_object_name\n  from views\n  where schema_name not in ('pg_catalog', 'information_schema')\n  \n)\n\nselect \n  objects.schema_name\n, objects.object_name\n, users.username\n, has_table_privilege(users.username, objects.full_object_name, 'select') as has_select_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'insert') as has_insert_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'update') as has_update_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'delete') as has_delete_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'references') as has_references_privilege\nfrom objects\ncross join users\norder by objects.full_object_name, users.username", "language": "sql", "refs": [{"name": "pg_tables", "package": null, "version": null}, {"name": "pg_views", "package": null, "version": null}, {"name": "pg_user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.redshift.pg_tables", "model.redshift.pg_views", "model.redshift.pg_user"]}, "compiled_path": "target/compiled/redshift/models/views/redshift_admin_users_table_view_privileges.sql", "compiled": true, "compiled_code": "with  __dbt__cte__pg_tables as (\nselect\n  schemaname as schema_name\n, tablename as table_name\n, tableowner as table_owner\n, tablespace as table_space\n, hasindexes as has_indexes\n, hasrules as has_rules\n, hastriggers as has_triggers\nfrom pg_catalog.pg_tables\n),  __dbt__cte__pg_views as (\nselect\n  schemaname as schema_name\n, viewname as view_name\n, viewowner as view_owner\nfrom pg_catalog.pg_views\n),  __dbt__cte__pg_user as (\nselect\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_catalog.pg_user\n), tables as (\n\n  select * from __dbt__cte__pg_tables\n\n), views as (\n\n  select * from __dbt__cte__pg_views\n\n), users as (\n\n  select * from __dbt__cte__pg_user\n\n), objects as (\n  \n  select\n    schema_name\n  , 'table' as object_type\n  , table_name as object_name\n  , '\"' || schema_name || '\".\"' || table_name || '\"' as full_object_name\n  from tables\n  where schema_name not in ('pg_catalog', 'information_schema')\n  \n  union\n  \n  select\n    schema_name\n  , 'view' as object_type\n  , view_name as object_name\n  , '\"' || schema_name || '\".\"' || view_name || '\"' as full_object_name\n  from views\n  where schema_name not in ('pg_catalog', 'information_schema')\n  \n)\n\nselect \n  objects.schema_name\n, objects.object_name\n, users.username\n, has_table_privilege(users.username, objects.full_object_name, 'select') as has_select_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'insert') as has_insert_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'update') as has_update_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'delete') as has_delete_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'references') as has_references_privilege\nfrom objects\ncross join users\norder by objects.full_object_name, users.username", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.redshift.pg_tables", "sql": " __dbt__cte__pg_tables as (\nselect\n  schemaname as schema_name\n, tablename as table_name\n, tableowner as table_owner\n, tablespace as table_space\n, hasindexes as has_indexes\n, hasrules as has_rules\n, hastriggers as has_triggers\nfrom pg_catalog.pg_tables\n)"}, {"id": "model.redshift.pg_views", "sql": " __dbt__cte__pg_views as (\nselect\n  schemaname as schema_name\n, viewname as view_name\n, viewowner as view_owner\nfrom pg_catalog.pg_views\n)"}, {"id": "model.redshift.pg_user", "sql": " __dbt__cte__pg_user as (\nselect\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_catalog.pg_user\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.redshift.redshift_admin_users_schema_privileges": {"database": "dev", "schema": "analytics", "name": "redshift_admin_users_schema_privileges", "resource_type": "model", "package_name": "redshift", "path": "views/redshift_admin_users_schema_privileges.sql", "original_file_path": "models/views/redshift_admin_users_schema_privileges.sql", "unique_id": "model.redshift.redshift_admin_users_schema_privileges", "fqn": ["redshift", "views", "redshift_admin_users_schema_privileges"], "alias": "redshift_admin_users_schema_privileges", "checksum": {"name": "sha256", "checksum": "9b3da2e339fa13dd274bdf0d897f78c49c0ec26c5d8dae8b7e3065f420186f7e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705873846.8690693, "relation_name": "\"dev\".\"analytics\".\"redshift_admin_users_schema_privileges\"", "raw_code": "with tables as (\n\n  select * from {{ref('pg_tables')}}\n\n), views as (\n\n  select * from {{ref('pg_views')}}\n\n), users as (\n\n  select * from {{ref('pg_user')}}\n  \n), schemas as (\n  \n  select\n  distinct(schema_name)\n  from tables\n  where schema_name not in ('pg_catalog', 'information_schema')\n        \n  union\n        \n  select\n  distinct(schema_name)\n  from views\n        \n  where schema_name not in ('pg_catalog', 'information_schema')\n  \n)\n\n\nselect \n  schemas.schema_name\n, users.username\n, has_schema_privilege(users.username, schemas.schema_name, 'usage') AS has_usage_privilege\n, has_schema_privilege(users.username, schemas.schema_name, 'create') AS has_create_privilege\nfrom schemas\ncross join users\norder by schemas.schema_name, users.username", "language": "sql", "refs": [{"name": "pg_tables", "package": null, "version": null}, {"name": "pg_views", "package": null, "version": null}, {"name": "pg_user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.redshift.pg_tables", "model.redshift.pg_views", "model.redshift.pg_user"]}, "compiled_path": "target/compiled/redshift/models/views/redshift_admin_users_schema_privileges.sql", "compiled": true, "compiled_code": "with  __dbt__cte__pg_tables as (\nselect\n  schemaname as schema_name\n, tablename as table_name\n, tableowner as table_owner\n, tablespace as table_space\n, hasindexes as has_indexes\n, hasrules as has_rules\n, hastriggers as has_triggers\nfrom pg_catalog.pg_tables\n),  __dbt__cte__pg_views as (\nselect\n  schemaname as schema_name\n, viewname as view_name\n, viewowner as view_owner\nfrom pg_catalog.pg_views\n),  __dbt__cte__pg_user as (\nselect\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_catalog.pg_user\n), tables as (\n\n  select * from __dbt__cte__pg_tables\n\n), views as (\n\n  select * from __dbt__cte__pg_views\n\n), users as (\n\n  select * from __dbt__cte__pg_user\n  \n), schemas as (\n  \n  select\n  distinct(schema_name)\n  from tables\n  where schema_name not in ('pg_catalog', 'information_schema')\n        \n  union\n        \n  select\n  distinct(schema_name)\n  from views\n        \n  where schema_name not in ('pg_catalog', 'information_schema')\n  \n)\n\n\nselect \n  schemas.schema_name\n, users.username\n, has_schema_privilege(users.username, schemas.schema_name, 'usage') AS has_usage_privilege\n, has_schema_privilege(users.username, schemas.schema_name, 'create') AS has_create_privilege\nfrom schemas\ncross join users\norder by schemas.schema_name, users.username", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.redshift.pg_tables", "sql": " __dbt__cte__pg_tables as (\nselect\n  schemaname as schema_name\n, tablename as table_name\n, tableowner as table_owner\n, tablespace as table_space\n, hasindexes as has_indexes\n, hasrules as has_rules\n, hastriggers as has_triggers\nfrom pg_catalog.pg_tables\n)"}, {"id": "model.redshift.pg_views", "sql": " __dbt__cte__pg_views as (\nselect\n  schemaname as schema_name\n, viewname as view_name\n, viewowner as view_owner\nfrom pg_catalog.pg_views\n)"}, {"id": "model.redshift.pg_user", "sql": " __dbt__cte__pg_user as (\nselect\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_catalog.pg_user\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.redshift.redshift_admin_dependencies": {"database": "dev", "schema": "analytics", "name": "redshift_admin_dependencies", "resource_type": "model", "package_name": "redshift", "path": "views/redshift_admin_dependencies.sql", "original_file_path": "models/views/redshift_admin_dependencies.sql", "unique_id": "model.redshift.redshift_admin_dependencies", "fqn": ["redshift", "views", "redshift_admin_dependencies"], "alias": "redshift_admin_dependencies", "checksum": {"name": "sha256", "checksum": "cf3feab95d6f0d64b3e512df0e2a0b6e6ae34569c55c44374bff866b2dff312a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705873846.8714395, "relation_name": "\"dev\".\"analytics\".\"redshift_admin_dependencies\"", "raw_code": "{# SOURCE: https://github.com/awslabs/amazon-redshift-utils/blob/master/src/AdminViews/v_view_dependency.sql #}\n\nselect distinct\n  srcobj.oid as source_oid\n  , srcnsp.nspname as source_schemaname\n  , srcobj.relname as source_objectname\n  , tgtobj.oid as dependent_oid\n  , tgtnsp.nspname as dependent_schemaname\n  , tgtobj.relname as dependent_objectname\n\nfrom\n\n  {{ ref('pg_class') }} as srcobj\n  join {{ ref('pg_depend') }} as srcdep on srcobj.oid = srcdep.refobjid\n  join {{ ref('pg_depend') }} as tgtdep on srcdep.objid = tgtdep.objid\n  join {{ ref('pg_class') }} as tgtobj\n    on tgtdep.refobjid = tgtobj.oid\n    and srcobj.oid <> tgtobj.oid\n  left join {{ ref('pg_namespace') }} as srcnsp\n    on srcobj.relnamespace = srcnsp.oid\n  left join {{ ref('pg_namespace') }} tgtnsp on tgtobj.relnamespace = tgtnsp.oid\n\nwhere\n  tgtdep.deptype = 'i' --dependency_internal\n  and tgtobj.relkind = 'v' --i=index, v=view, s=sequence", "language": "sql", "refs": [{"name": "pg_class", "package": null, "version": null}, {"name": "pg_depend", "package": null, "version": null}, {"name": "pg_depend", "package": null, "version": null}, {"name": "pg_class", "package": null, "version": null}, {"name": "pg_namespace", "package": null, "version": null}, {"name": "pg_namespace", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.redshift.pg_class", "model.redshift.pg_depend", "model.redshift.pg_namespace"]}, "compiled_path": "target/compiled/redshift/models/views/redshift_admin_dependencies.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__pg_class as (\nselect\n  oid\n, relname\n, relnamespace\n, reltype\n, relowner\n, relam\n, relfilenode\n, reltablespace\n, relpages\n, reltuples\n, reltoastrelid\n, reltoastidxid\n, relhasindex\n, relisshared\n, relkind\n, relnatts\n, relexternid\n, relisreplicated\n, relispinned\n, reldiststyle\n, relprojbaseid\n, relchecks\n, reltriggers\n, relukeys\n, relfkeys\n, relrefs\n, relhasoids\n, relhaspkey\n, relhasrules\n, relhassubclass\n, relacl\nfrom pg_catalog.pg_class\n),  __dbt__cte__pg_depend as (\nselect\n  classid\n, objid\n, objsubid\n, refclassid\n, refobjid\n, refobjsubid\n, deptype\nfrom pg_catalog.pg_depend\n),  __dbt__cte__pg_namespace as (\nselect\n  oid\n, nspname\n, nspowner\n, nspacl\nfrom pg_catalog.pg_namespace\n) select distinct\n  srcobj.oid as source_oid\n  , srcnsp.nspname as source_schemaname\n  , srcobj.relname as source_objectname\n  , tgtobj.oid as dependent_oid\n  , tgtnsp.nspname as dependent_schemaname\n  , tgtobj.relname as dependent_objectname\n\nfrom\n\n  __dbt__cte__pg_class as srcobj\n  join __dbt__cte__pg_depend as srcdep on srcobj.oid = srcdep.refobjid\n  join __dbt__cte__pg_depend as tgtdep on srcdep.objid = tgtdep.objid\n  join __dbt__cte__pg_class as tgtobj\n    on tgtdep.refobjid = tgtobj.oid\n    and srcobj.oid <> tgtobj.oid\n  left join __dbt__cte__pg_namespace as srcnsp\n    on srcobj.relnamespace = srcnsp.oid\n  left join __dbt__cte__pg_namespace tgtnsp on tgtobj.relnamespace = tgtnsp.oid\n\nwhere\n  tgtdep.deptype = 'i' --dependency_internal\n  and tgtobj.relkind = 'v' --i=index, v=view, s=sequence", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.redshift.pg_class", "sql": " __dbt__cte__pg_class as (\nselect\n  oid\n, relname\n, relnamespace\n, reltype\n, relowner\n, relam\n, relfilenode\n, reltablespace\n, relpages\n, reltuples\n, reltoastrelid\n, reltoastidxid\n, relhasindex\n, relisshared\n, relkind\n, relnatts\n, relexternid\n, relisreplicated\n, relispinned\n, reldiststyle\n, relprojbaseid\n, relchecks\n, reltriggers\n, relukeys\n, relfkeys\n, relrefs\n, relhasoids\n, relhaspkey\n, relhasrules\n, relhassubclass\n, relacl\nfrom pg_catalog.pg_class\n)"}, {"id": "model.redshift.pg_depend", "sql": " __dbt__cte__pg_depend as (\nselect\n  classid\n, objid\n, objsubid\n, refclassid\n, refobjid\n, refobjsubid\n, deptype\nfrom pg_catalog.pg_depend\n)"}, {"id": "model.redshift.pg_namespace", "sql": " __dbt__cte__pg_namespace as (\nselect\n  oid\n, nspname\n, nspowner\n, nspacl\nfrom pg_catalog.pg_namespace\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.redshift.redshift_admin_queries": {"database": "dev", "schema": "analytics", "name": "redshift_admin_queries", "resource_type": "model", "package_name": "redshift", "path": "views/redshift_admin_queries.sql", "original_file_path": "models/views/redshift_admin_queries.sql", "unique_id": "model.redshift.redshift_admin_queries", "fqn": ["redshift", "views", "redshift_admin_queries"], "alias": "redshift_admin_queries", "checksum": {"name": "sha256", "checksum": "20b85a318b145df95501e16897460aa885326fe379ff3e95153d7325ae0148a7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705873846.8739278, "relation_name": "\"dev\".\"analytics\".\"redshift_admin_queries\"", "raw_code": "with queries as (\n\n  select * from {{ref('stl_query')}}\n\n), users as (\n\n  select * from {{ref('pg_user')}}\n\n), cost as (\n\n  select * from {{ref('redshift_cost')}}\n\n), timings as (\n\n  select * from {{ref('stl_wlm_query')}}\n\n)\n\n\n\nselect\n\n  queries.query_id\n, queries.transaction_id\n, users.username::varchar\n\n, cost.starting_cost\n, cost.total_cost\n\n, queries.started_at\n, queries.finished_at\n\n, timings.queue_start_time\n, timings.queue_end_time\n, (timings.total_queue_time::float / 1000000.0) as total_queue_time_seconds\n\n, timings.exec_start_time\n, timings.exec_end_time\n, (timings.total_exec_time::float / 1000000.0) as total_exec_time_seconds\n\nfrom queries\n\nleft join users\n  on queries.user_id = users.user_id\n\nleft join cost\n  on queries.query_id = cost.query_id\n\nleft join timings\n  on queries.query_id = timings.query_id", "language": "sql", "refs": [{"name": "stl_query", "package": null, "version": null}, {"name": "pg_user", "package": null, "version": null}, {"name": "redshift_cost", "package": null, "version": null}, {"name": "stl_wlm_query", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.redshift.stl_query", "model.redshift.pg_user", "model.redshift.redshift_cost", "model.redshift.stl_wlm_query"]}, "compiled_path": "target/compiled/redshift/models/views/redshift_admin_queries.sql", "compiled": true, "compiled_code": "with  __dbt__cte__stl_query as (\nselect\n\n  userid as user_id\n, query as query_id\n, xid as transaction_id\n, label\n, pid\n, database\n, starttime as started_at\n, endtime as finished_at\n, aborted\n\nfrom pg_catalog.stl_query\n),  __dbt__cte__pg_user as (\nselect\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_catalog.pg_user\n),  __dbt__cte__stl_explain as (\nselect\n\n  userid as user_id\n, query as query_id\n, nodeid\n, parentid\n, plannode\n, info\n\nfrom pg_catalog.stl_explain\n),  __dbt__cte__redshift_cost as (\nwith stl_explain as (\n\n  select query_id, plannode from __dbt__cte__stl_explain\n  where nodeid = 1\n\n), parse_step_one as (\n\n  -- plannode (which contains cost) is formatted like:\n  --   XN Seq Scan on nyc_last_update  (cost=0.00..0.03 rows=2 width=40)\n  -- we want to rip out the cost part (0.00, 0.03) and make it usable.\n  -- cost_string after this step is \"0.00..0.03 ...\"\n  select\n    query_id\n  , split_part(plannode, 'cost=', 2) as cost_string\n\n  from stl_explain\n\n), parse_step_two as (\n\n  select\n    query_id\n  , split_part(cost_string, '..', 1) as starting_cost\n  , substring(\n      split_part(cost_string, '..', 2)\n      from 1\n      for strpos(split_part(cost_string, '..', 2), ' ')) as total_cost\n\n  from parse_step_one\n\n)\n\n\nselect\n\n  query_id\n, starting_cost::float as starting_cost\n, total_cost::float as total_cost\n\nfrom parse_step_two\n),  __dbt__cte__stl_wlm_query as (\nselect\n\n  userid as user_id\n, query as query_id\n, xid\n, task\n, service_class\n, slot_count\n, service_class_start_time\n, queue_start_time\n, queue_end_time\n, total_queue_time\n, exec_start_time\n, exec_end_time\n, total_exec_time\n, service_class_end_time\n, final_state\n\nfrom pg_catalog.stl_wlm_query\n), queries as (\n\n  select * from __dbt__cte__stl_query\n\n), users as (\n\n  select * from __dbt__cte__pg_user\n\n), cost as (\n\n  select * from __dbt__cte__redshift_cost\n\n), timings as (\n\n  select * from __dbt__cte__stl_wlm_query\n\n)\n\n\n\nselect\n\n  queries.query_id\n, queries.transaction_id\n, users.username::varchar\n\n, cost.starting_cost\n, cost.total_cost\n\n, queries.started_at\n, queries.finished_at\n\n, timings.queue_start_time\n, timings.queue_end_time\n, (timings.total_queue_time::float / 1000000.0) as total_queue_time_seconds\n\n, timings.exec_start_time\n, timings.exec_end_time\n, (timings.total_exec_time::float / 1000000.0) as total_exec_time_seconds\n\nfrom queries\n\nleft join users\n  on queries.user_id = users.user_id\n\nleft join cost\n  on queries.query_id = cost.query_id\n\nleft join timings\n  on queries.query_id = timings.query_id", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.redshift.stl_query", "sql": " __dbt__cte__stl_query as (\nselect\n\n  userid as user_id\n, query as query_id\n, xid as transaction_id\n, label\n, pid\n, database\n, starttime as started_at\n, endtime as finished_at\n, aborted\n\nfrom pg_catalog.stl_query\n)"}, {"id": "model.redshift.pg_user", "sql": " __dbt__cte__pg_user as (\nselect\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_catalog.pg_user\n)"}, {"id": "model.redshift.stl_explain", "sql": " __dbt__cte__stl_explain as (\nselect\n\n  userid as user_id\n, query as query_id\n, nodeid\n, parentid\n, plannode\n, info\n\nfrom pg_catalog.stl_explain\n)"}, {"id": "model.redshift.redshift_cost", "sql": " __dbt__cte__redshift_cost as (\nwith stl_explain as (\n\n  select query_id, plannode from __dbt__cte__stl_explain\n  where nodeid = 1\n\n), parse_step_one as (\n\n  -- plannode (which contains cost) is formatted like:\n  --   XN Seq Scan on nyc_last_update  (cost=0.00..0.03 rows=2 width=40)\n  -- we want to rip out the cost part (0.00, 0.03) and make it usable.\n  -- cost_string after this step is \"0.00..0.03 ...\"\n  select\n    query_id\n  , split_part(plannode, 'cost=', 2) as cost_string\n\n  from stl_explain\n\n), parse_step_two as (\n\n  select\n    query_id\n  , split_part(cost_string, '..', 1) as starting_cost\n  , substring(\n      split_part(cost_string, '..', 2)\n      from 1\n      for strpos(split_part(cost_string, '..', 2), ' ')) as total_cost\n\n  from parse_step_one\n\n)\n\n\nselect\n\n  query_id\n, starting_cost::float as starting_cost\n, total_cost::float as total_cost\n\nfrom parse_step_two\n)"}, {"id": "model.redshift.stl_wlm_query", "sql": " __dbt__cte__stl_wlm_query as (\nselect\n\n  userid as user_id\n, query as query_id\n, xid\n, task\n, service_class\n, slot_count\n, service_class_start_time\n, queue_start_time\n, queue_end_time\n, total_queue_time\n, exec_start_time\n, exec_end_time\n, total_exec_time\n, service_class_end_time\n, final_state\n\nfrom pg_catalog.stl_wlm_query\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.redshift.redshift_admin_table_stats": {"database": "dev", "schema": "analytics", "name": "redshift_admin_table_stats", "resource_type": "model", "package_name": "redshift", "path": "views/redshift_admin_table_stats.sql", "original_file_path": "models/views/redshift_admin_table_stats.sql", "unique_id": "model.redshift.redshift_admin_table_stats", "fqn": ["redshift", "views", "redshift_admin_table_stats"], "alias": "redshift_admin_table_stats", "checksum": {"name": "sha256", "checksum": "37b600cbd85be23cfd4f2bc9937db47c912f7bb4793930ddd45de754dc9637bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705873846.8763669, "relation_name": "\"dev\".\"analytics\".\"redshift_admin_table_stats\"", "raw_code": "with unsorted_by_table as (\n\n  select\n    db_id\n  , id as table_id\n  , name as table_name\n  , sum(rows) as rows\n  , sum(unsorted_rows) as unsorted_rows\n  from {{ref('stv_tbl_perm')}}\n  group by 1, 2, 3\n\n), pg_class as (\n\n  select * from {{ref('pg_class')}}\n\n), pg_namespace as (\n\n  select * from {{ref('pg_namespace')}}\n\n), table_sizes as (\n\n  select\n    tbl as table_id\n  , count(*) as size_in_megabytes\n  from {{ref('stv_blocklist')}}\n  group by 1\n\n), table_attributes as (\n\n  select\n    attrelid as table_id\n  , min(dist_key) as dist_key\n  , min(sort_key) as sort_key\n  , max(attsortkeyord) as num_sort_keys\n  , (max(attencodingtype) > 0) as is_encoded\n  , max(attnum) as num_columns\n  from {{ref('pg_attribute')}}\n  group by 1\n\n), slice_distribution as (\n\n  select\n    tbl as table_id\n  , trim(name) as name\n  , slice\n  , count(*) as size_in_megabytes\n\n  from {{ref('svv_diskusage')}}\n  group by 1, 2, 3\n\n), capacity as (\n\n  select\n    sum(capacity) as total_megabytes\n  from {{ref('stv_partitions')}}\n  where part_begin=0\n\n), table_distribution_ratio as (\n\n  select\n    table_id\n  , (max(size_in_megabytes)::float / min(size_in_megabytes)::float)\n      as ratio\n  from slice_distribution\n  group by 1\n\n)\n\nselect\n\n  trim(pg_namespace.nspname) as schema\n, trim(unsorted_by_table.table_name) as table\n, unsorted_by_table.rows\n, unsorted_by_table.unsorted_rows\n, {{percentage('unsorted_by_table.unsorted_rows',\n               'unsorted_by_table.rows')}}\n    as percent_rows_unsorted\n, unsorted_by_table.table_id\n\n, {{decode_reldiststyle('pg_class.reldiststyle',\n                        'table_attributes.dist_key')}} as dist_style\n, table_distribution_ratio.ratio as dist_skew\n\n, (table_attributes.sort_key is not null) as is_sorted\n, table_attributes.sort_key\n, table_attributes.num_sort_keys\n, table_attributes.num_columns\n\n, table_sizes.size_in_megabytes\n, {{percentage('table_sizes.size_in_megabytes',\n               'capacity.total_megabytes')}}\n    as disk_used_percent_of_total\n, table_attributes.is_encoded\n\nfrom unsorted_by_table\n\nleft join pg_class\n  on pg_class.oid = unsorted_by_table.table_id\n\nleft join pg_namespace\n  on pg_namespace.oid = pg_class.relnamespace\n\nleft join capacity\n  on 1=1\n\nleft join table_sizes\n  on unsorted_by_table.table_id = table_sizes.table_id\n\nleft join table_attributes\n  on table_attributes.table_id = unsorted_by_table.table_id\n\nleft join table_distribution_ratio\n  on table_distribution_ratio.table_id = unsorted_by_table.table_id", "language": "sql", "refs": [{"name": "stv_tbl_perm", "package": null, "version": null}, {"name": "pg_class", "package": null, "version": null}, {"name": "pg_namespace", "package": null, "version": null}, {"name": "stv_blocklist", "package": null, "version": null}, {"name": "pg_attribute", "package": null, "version": null}, {"name": "svv_diskusage", "package": null, "version": null}, {"name": "stv_partitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.redshift.percentage", "macro.redshift.decode_reldiststyle"], "nodes": ["model.redshift.stv_tbl_perm", "model.redshift.pg_class", "model.redshift.pg_namespace", "model.redshift.stv_blocklist", "model.redshift.pg_attribute", "model.redshift.svv_diskusage", "model.redshift.stv_partitions"]}, "compiled_path": "target/compiled/redshift/models/views/redshift_admin_table_stats.sql", "compiled": true, "compiled_code": "with  __dbt__cte__stv_tbl_perm as (\nselect\n  slice\n, id -- table id\n, name -- table name\n, rows\n, sorted_rows\n, (rows - sorted_rows) as unsorted_rows\n, temp\n, db_id\n, backup\nfrom pg_catalog.stv_tbl_perm\n),  __dbt__cte__pg_class as (\nselect\n  oid\n, relname\n, relnamespace\n, reltype\n, relowner\n, relam\n, relfilenode\n, reltablespace\n, relpages\n, reltuples\n, reltoastrelid\n, reltoastidxid\n, relhasindex\n, relisshared\n, relkind\n, relnatts\n, relexternid\n, relisreplicated\n, relispinned\n, reldiststyle\n, relprojbaseid\n, relchecks\n, reltriggers\n, relukeys\n, relfkeys\n, relrefs\n, relhasoids\n, relhaspkey\n, relhasrules\n, relhassubclass\n, relacl\nfrom pg_catalog.pg_class\n),  __dbt__cte__pg_namespace as (\nselect\n  oid\n, nspname\n, nspowner\n, nspacl\nfrom pg_catalog.pg_namespace\n),  __dbt__cte__stv_blocklist as (\nselect\n  slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom pg_catalog.stv_blocklist\n),  __dbt__cte__pg_attribute as (\nselect\n  attrelid\n, attname\n, atttypid\n, attstattarget\n, attlen\n, attnum\n, attndims\n, attcacheoff\n, atttypmod\n, attbyval\n, attstorage\n, attalign\n, attnotnull\n, atthasdef\n, attisdropped\n, attislocal\n, attinhcount\n, attisdistkey\n, attispreloaded\n, attsortkeyord\n, attencodingtype\n, attencrypttype\n, (case attisdistkey\n        when 't' then attname\n        else null end) as dist_key\n, (case attsortkeyord\n        when 1 then attname\n        else null end) as sort_key\nfrom pg_catalog.pg_attribute\n),  __dbt__cte__svv_diskusage as (\nselect\n  db_id\n, name\n, slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom pg_catalog.svv_diskusage\n),  __dbt__cte__stv_partitions as (\nselect\n\n  owner\n, host\n, diskno\n, part_begin\n, part_end\n, used\n, tossed\n, capacity\n, \"reads\"\n, writes\n, seek_forward\n, seek_back\n, is_san\n, failed\n, mbps\n, mount\n\nfrom pg_catalog.stv_partitions\n), unsorted_by_table as (\n\n  select\n    db_id\n  , id as table_id\n  , name as table_name\n  , sum(rows) as rows\n  , sum(unsorted_rows) as unsorted_rows\n  from __dbt__cte__stv_tbl_perm\n  group by 1, 2, 3\n\n), pg_class as (\n\n  select * from __dbt__cte__pg_class\n\n), pg_namespace as (\n\n  select * from __dbt__cte__pg_namespace\n\n), table_sizes as (\n\n  select\n    tbl as table_id\n  , count(*) as size_in_megabytes\n  from __dbt__cte__stv_blocklist\n  group by 1\n\n), table_attributes as (\n\n  select\n    attrelid as table_id\n  , min(dist_key) as dist_key\n  , min(sort_key) as sort_key\n  , max(attsortkeyord) as num_sort_keys\n  , (max(attencodingtype) > 0) as is_encoded\n  , max(attnum) as num_columns\n  from __dbt__cte__pg_attribute\n  group by 1\n\n), slice_distribution as (\n\n  select\n    tbl as table_id\n  , trim(name) as name\n  , slice\n  , count(*) as size_in_megabytes\n\n  from __dbt__cte__svv_diskusage\n  group by 1, 2, 3\n\n), capacity as (\n\n  select\n    sum(capacity) as total_megabytes\n  from __dbt__cte__stv_partitions\n  where part_begin=0\n\n), table_distribution_ratio as (\n\n  select\n    table_id\n  , (max(size_in_megabytes)::float / min(size_in_megabytes)::float)\n      as ratio\n  from slice_distribution\n  group by 1\n\n)\n\nselect\n\n  trim(pg_namespace.nspname) as schema\n, trim(unsorted_by_table.table_name) as table\n, unsorted_by_table.rows\n, unsorted_by_table.unsorted_rows\n, (case unsorted_by_table.rows\n        when 0 then 0\n        else (unsorted_by_table.unsorted_rows::float / unsorted_by_table.rows::float) * 100.0 end)\n    as percent_rows_unsorted\n, unsorted_by_table.table_id\n\n, decode(pg_class.reldiststyle, 0, 'even',\n                              1, table_attributes.dist_key,\n                              'all') as dist_style\n, table_distribution_ratio.ratio as dist_skew\n\n, (table_attributes.sort_key is not null) as is_sorted\n, table_attributes.sort_key\n, table_attributes.num_sort_keys\n, table_attributes.num_columns\n\n, table_sizes.size_in_megabytes\n, (case capacity.total_megabytes\n        when 0 then 0\n        else (table_sizes.size_in_megabytes::float / capacity.total_megabytes::float) * 100.0 end)\n    as disk_used_percent_of_total\n, table_attributes.is_encoded\n\nfrom unsorted_by_table\n\nleft join pg_class\n  on pg_class.oid = unsorted_by_table.table_id\n\nleft join pg_namespace\n  on pg_namespace.oid = pg_class.relnamespace\n\nleft join capacity\n  on 1=1\n\nleft join table_sizes\n  on unsorted_by_table.table_id = table_sizes.table_id\n\nleft join table_attributes\n  on table_attributes.table_id = unsorted_by_table.table_id\n\nleft join table_distribution_ratio\n  on table_distribution_ratio.table_id = unsorted_by_table.table_id", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.redshift.stv_tbl_perm", "sql": " __dbt__cte__stv_tbl_perm as (\nselect\n  slice\n, id -- table id\n, name -- table name\n, rows\n, sorted_rows\n, (rows - sorted_rows) as unsorted_rows\n, temp\n, db_id\n, backup\nfrom pg_catalog.stv_tbl_perm\n)"}, {"id": "model.redshift.pg_class", "sql": " __dbt__cte__pg_class as (\nselect\n  oid\n, relname\n, relnamespace\n, reltype\n, relowner\n, relam\n, relfilenode\n, reltablespace\n, relpages\n, reltuples\n, reltoastrelid\n, reltoastidxid\n, relhasindex\n, relisshared\n, relkind\n, relnatts\n, relexternid\n, relisreplicated\n, relispinned\n, reldiststyle\n, relprojbaseid\n, relchecks\n, reltriggers\n, relukeys\n, relfkeys\n, relrefs\n, relhasoids\n, relhaspkey\n, relhasrules\n, relhassubclass\n, relacl\nfrom pg_catalog.pg_class\n)"}, {"id": "model.redshift.pg_namespace", "sql": " __dbt__cte__pg_namespace as (\nselect\n  oid\n, nspname\n, nspowner\n, nspacl\nfrom pg_catalog.pg_namespace\n)"}, {"id": "model.redshift.stv_blocklist", "sql": " __dbt__cte__stv_blocklist as (\nselect\n  slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom pg_catalog.stv_blocklist\n)"}, {"id": "model.redshift.pg_attribute", "sql": " __dbt__cte__pg_attribute as (\nselect\n  attrelid\n, attname\n, atttypid\n, attstattarget\n, attlen\n, attnum\n, attndims\n, attcacheoff\n, atttypmod\n, attbyval\n, attstorage\n, attalign\n, attnotnull\n, atthasdef\n, attisdropped\n, attislocal\n, attinhcount\n, attisdistkey\n, attispreloaded\n, attsortkeyord\n, attencodingtype\n, attencrypttype\n, (case attisdistkey\n        when 't' then attname\n        else null end) as dist_key\n, (case attsortkeyord\n        when 1 then attname\n        else null end) as sort_key\nfrom pg_catalog.pg_attribute\n)"}, {"id": "model.redshift.svv_diskusage", "sql": " __dbt__cte__svv_diskusage as (\nselect\n  db_id\n, name\n, slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom pg_catalog.svv_diskusage\n)"}, {"id": "model.redshift.stv_partitions", "sql": " __dbt__cte__stv_partitions as (\nselect\n\n  owner\n, host\n, diskno\n, part_begin\n, part_end\n, used\n, tossed\n, capacity\n, \"reads\"\n, writes\n, seek_forward\n, seek_back\n, is_san\n, failed\n, mbps\n, mount\n\nfrom pg_catalog.stv_partitions\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.redshift.stl_explain": {"database": "dev", "schema": "analytics", "name": "stl_explain", "resource_type": "model", "package_name": "redshift", "path": "base/stl_explain.sql", "original_file_path": "models/base/stl_explain.sql", "unique_id": "model.redshift.stl_explain", "fqn": ["redshift", "base", "stl_explain"], "alias": "stl_explain", "checksum": {"name": "sha256", "checksum": "a246b8a8ee3a342e2826aaacf39c71799b66d92a42288c76eb78eabd8dd1a392"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1705873846.884633, "relation_name": null, "raw_code": "select\n\n  userid as user_id\n, query as query_id\n, nodeid\n, parentid\n, plannode\n, info\n\nfrom pg_catalog.stl_explain", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/redshift/models/base/stl_explain.sql", "compiled": true, "compiled_code": "select\n\n  userid as user_id\n, query as query_id\n, nodeid\n, parentid\n, plannode\n, info\n\nfrom pg_catalog.stl_explain", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.redshift.stl_wlm_query": {"database": "dev", "schema": "analytics", "name": "stl_wlm_query", "resource_type": "model", "package_name": "redshift", "path": "base/stl_wlm_query.sql", "original_file_path": "models/base/stl_wlm_query.sql", "unique_id": "model.redshift.stl_wlm_query", "fqn": ["redshift", "base", "stl_wlm_query"], "alias": "stl_wlm_query", "checksum": {"name": "sha256", "checksum": "6389c0a9ec787bf4b2eade053172f530f34102e645e6a304a0964959f6f310c1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1705873846.8868191, "relation_name": null, "raw_code": "select\n\n  userid as user_id\n, query as query_id\n, xid\n, task\n, service_class\n, slot_count\n, service_class_start_time\n, queue_start_time\n, queue_end_time\n, total_queue_time\n, exec_start_time\n, exec_end_time\n, total_exec_time\n, service_class_end_time\n, final_state\n\nfrom pg_catalog.stl_wlm_query", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/redshift/models/base/stl_wlm_query.sql", "compiled": true, "compiled_code": "select\n\n  userid as user_id\n, query as query_id\n, xid\n, task\n, service_class\n, slot_count\n, service_class_start_time\n, queue_start_time\n, queue_end_time\n, total_queue_time\n, exec_start_time\n, exec_end_time\n, total_exec_time\n, service_class_end_time\n, final_state\n\nfrom pg_catalog.stl_wlm_query", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.redshift.stv_tbl_perm": {"database": "dev", "schema": "analytics", "name": "stv_tbl_perm", "resource_type": "model", "package_name": "redshift", "path": "base/stv_tbl_perm.sql", "original_file_path": "models/base/stv_tbl_perm.sql", "unique_id": "model.redshift.stv_tbl_perm", "fqn": ["redshift", "base", "stv_tbl_perm"], "alias": "stv_tbl_perm", "checksum": {"name": "sha256", "checksum": "a3b3eaebab03ea64ddbd61f1ad6251adaa9ee1f1d59d3c6bc666099142ab569f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1705873846.8889968, "relation_name": null, "raw_code": "select\n  slice\n, id -- table id\n, name -- table name\n, rows\n, sorted_rows\n, (rows - sorted_rows) as unsorted_rows\n, temp\n, db_id\n, backup\nfrom pg_catalog.stv_tbl_perm", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/redshift/models/base/stv_tbl_perm.sql", "compiled": true, "compiled_code": "select\n  slice\n, id -- table id\n, name -- table name\n, rows\n, sorted_rows\n, (rows - sorted_rows) as unsorted_rows\n, temp\n, db_id\n, backup\nfrom pg_catalog.stv_tbl_perm", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.redshift.pg_class": {"database": "dev", "schema": "analytics", "name": "pg_class", "resource_type": "model", "package_name": "redshift", "path": "base/pg_class.sql", "original_file_path": "models/base/pg_class.sql", "unique_id": "model.redshift.pg_class", "fqn": ["redshift", "base", "pg_class"], "alias": "pg_class", "checksum": {"name": "sha256", "checksum": "d826486b1761df470ffea7d160a4a6fa2c679faed7794b60020e9047da0daad4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1705873846.8911533, "relation_name": null, "raw_code": "select\n  oid\n, relname\n, relnamespace\n, reltype\n, relowner\n, relam\n, relfilenode\n, reltablespace\n, relpages\n, reltuples\n, reltoastrelid\n, reltoastidxid\n, relhasindex\n, relisshared\n, relkind\n, relnatts\n, relexternid\n, relisreplicated\n, relispinned\n, reldiststyle\n, relprojbaseid\n, relchecks\n, reltriggers\n, relukeys\n, relfkeys\n, relrefs\n, relhasoids\n, relhaspkey\n, relhasrules\n, relhassubclass\n, relacl\nfrom pg_catalog.pg_class", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/redshift/models/base/pg_class.sql", "compiled": true, "compiled_code": "select\n  oid\n, relname\n, relnamespace\n, reltype\n, relowner\n, relam\n, relfilenode\n, reltablespace\n, relpages\n, reltuples\n, reltoastrelid\n, reltoastidxid\n, relhasindex\n, relisshared\n, relkind\n, relnatts\n, relexternid\n, relisreplicated\n, relispinned\n, reldiststyle\n, relprojbaseid\n, relchecks\n, reltriggers\n, relukeys\n, relfkeys\n, relrefs\n, relhasoids\n, relhaspkey\n, relhasrules\n, relhassubclass\n, relacl\nfrom pg_catalog.pg_class", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.redshift.stl_query": {"database": "dev", "schema": "analytics", "name": "stl_query", "resource_type": "model", "package_name": "redshift", "path": "base/stl_query.sql", "original_file_path": "models/base/stl_query.sql", "unique_id": "model.redshift.stl_query", "fqn": ["redshift", "base", "stl_query"], "alias": "stl_query", "checksum": {"name": "sha256", "checksum": "da96341f00f2e97bd9676dba52ed93dd9fa9cba65a5452732d1bbe651f03e3cd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1705873846.8933613, "relation_name": null, "raw_code": "select\n\n  userid as user_id\n, query as query_id\n, xid as transaction_id\n, label\n, pid\n, database\n, starttime as started_at\n, endtime as finished_at\n, aborted\n\nfrom pg_catalog.stl_query", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/redshift/models/base/stl_query.sql", "compiled": true, "compiled_code": "select\n\n  userid as user_id\n, query as query_id\n, xid as transaction_id\n, label\n, pid\n, database\n, starttime as started_at\n, endtime as finished_at\n, aborted\n\nfrom pg_catalog.stl_query", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.redshift.stv_blocklist": {"database": "dev", "schema": "analytics", "name": "stv_blocklist", "resource_type": "model", "package_name": "redshift", "path": "base/stv_blocklist.sql", "original_file_path": "models/base/stv_blocklist.sql", "unique_id": "model.redshift.stv_blocklist", "fqn": ["redshift", "base", "stv_blocklist"], "alias": "stv_blocklist", "checksum": {"name": "sha256", "checksum": "07823b27738730f937c5cc2d39758b38ff6fc9928f2f1ce3e06b605d30a01a48"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1705873846.8957705, "relation_name": null, "raw_code": "select\n  slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom pg_catalog.stv_blocklist", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/redshift/models/base/stv_blocklist.sql", "compiled": true, "compiled_code": "select\n  slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom pg_catalog.stv_blocklist", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.redshift.svv_diskusage": {"database": "dev", "schema": "analytics", "name": "svv_diskusage", "resource_type": "model", "package_name": "redshift", "path": "base/svv_diskusage.sql", "original_file_path": "models/base/svv_diskusage.sql", "unique_id": "model.redshift.svv_diskusage", "fqn": ["redshift", "base", "svv_diskusage"], "alias": "svv_diskusage", "checksum": {"name": "sha256", "checksum": "b3568bd6b5ae38349f1dc635b4906fe2d02f28de673cc70a8aa29b7fa00290d8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1705873846.8979433, "relation_name": null, "raw_code": "select\n  db_id\n, name\n, slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom pg_catalog.svv_diskusage", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/redshift/models/base/svv_diskusage.sql", "compiled": true, "compiled_code": "select\n  db_id\n, name\n, slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom pg_catalog.svv_diskusage", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.redshift.pg_attribute": {"database": "dev", "schema": "analytics", "name": "pg_attribute", "resource_type": "model", "package_name": "redshift", "path": "base/pg_attribute.sql", "original_file_path": "models/base/pg_attribute.sql", "unique_id": "model.redshift.pg_attribute", "fqn": ["redshift", "base", "pg_attribute"], "alias": "pg_attribute", "checksum": {"name": "sha256", "checksum": "5954a0d449edf15557ff6e7a15efe007fbb1e7342745ba0dadacba0b57a3e0af"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1705873846.9001603, "relation_name": null, "raw_code": "select\n  attrelid\n, attname\n, atttypid\n, attstattarget\n, attlen\n, attnum\n, attndims\n, attcacheoff\n, atttypmod\n, attbyval\n, attstorage\n, attalign\n, attnotnull\n, atthasdef\n, attisdropped\n, attislocal\n, attinhcount\n, attisdistkey\n, attispreloaded\n, attsortkeyord\n, attencodingtype\n, attencrypttype\n, (case attisdistkey\n        when 't' then attname\n        else null end) as dist_key\n, (case attsortkeyord\n        when 1 then attname\n        else null end) as sort_key\nfrom pg_catalog.pg_attribute", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/redshift/models/base/pg_attribute.sql", "compiled": true, "compiled_code": "select\n  attrelid\n, attname\n, atttypid\n, attstattarget\n, attlen\n, attnum\n, attndims\n, attcacheoff\n, atttypmod\n, attbyval\n, attstorage\n, attalign\n, attnotnull\n, atthasdef\n, attisdropped\n, attislocal\n, attinhcount\n, attisdistkey\n, attispreloaded\n, attsortkeyord\n, attencodingtype\n, attencrypttype\n, (case attisdistkey\n        when 't' then attname\n        else null end) as dist_key\n, (case attsortkeyord\n        when 1 then attname\n        else null end) as sort_key\nfrom pg_catalog.pg_attribute", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.redshift.pg_views": {"database": "dev", "schema": "analytics", "name": "pg_views", "resource_type": "model", "package_name": "redshift", "path": "base/pg_views.sql", "original_file_path": "models/base/pg_views.sql", "unique_id": "model.redshift.pg_views", "fqn": ["redshift", "base", "pg_views"], "alias": "pg_views", "checksum": {"name": "sha256", "checksum": "5fb5e58829ae4ca77ebb380752b6644b622b117d5f4e6608cdb239543623741d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1705873846.9023511, "relation_name": null, "raw_code": "select\n  schemaname as schema_name\n, viewname as view_name\n, viewowner as view_owner\nfrom pg_catalog.pg_views", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/redshift/models/base/pg_views.sql", "compiled": true, "compiled_code": "select\n  schemaname as schema_name\n, viewname as view_name\n, viewowner as view_owner\nfrom pg_catalog.pg_views", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.redshift.pg_tables": {"database": "dev", "schema": "analytics", "name": "pg_tables", "resource_type": "model", "package_name": "redshift", "path": "base/pg_tables.sql", "original_file_path": "models/base/pg_tables.sql", "unique_id": "model.redshift.pg_tables", "fqn": ["redshift", "base", "pg_tables"], "alias": "pg_tables", "checksum": {"name": "sha256", "checksum": "4eb1ea48b7d4986142b63bc1ee3f6c32462bb59005a85d28c5f10f38f18d6852"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1705873846.9047751, "relation_name": null, "raw_code": "select\n  schemaname as schema_name\n, tablename as table_name\n, tableowner as table_owner\n, tablespace as table_space\n, hasindexes as has_indexes\n, hasrules as has_rules\n, hastriggers as has_triggers\nfrom pg_catalog.pg_tables", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/redshift/models/base/pg_tables.sql", "compiled": true, "compiled_code": "select\n  schemaname as schema_name\n, tablename as table_name\n, tableowner as table_owner\n, tablespace as table_space\n, hasindexes as has_indexes\n, hasrules as has_rules\n, hastriggers as has_triggers\nfrom pg_catalog.pg_tables", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.redshift.redshift_cost": {"database": "dev", "schema": "analytics", "name": "redshift_cost", "resource_type": "model", "package_name": "redshift", "path": "base/redshift_cost.sql", "original_file_path": "models/base/redshift_cost.sql", "unique_id": "model.redshift.redshift_cost", "fqn": ["redshift", "base", "redshift_cost"], "alias": "redshift_cost", "checksum": {"name": "sha256", "checksum": "c475c671f72296682f19252fd307b044dcfbc792849b0e888f4dee53933113b4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1705873846.9069753, "relation_name": null, "raw_code": "with stl_explain as (\n\n  select query_id, plannode from {{ref('stl_explain')}}\n  where nodeid = 1\n\n), parse_step_one as (\n\n  -- plannode (which contains cost) is formatted like:\n  --   XN Seq Scan on nyc_last_update  (cost=0.00..0.03 rows=2 width=40)\n  -- we want to rip out the cost part (0.00, 0.03) and make it usable.\n  -- cost_string after this step is \"0.00..0.03 ...\"\n  select\n    query_id\n  , split_part(plannode, 'cost=', 2) as cost_string\n\n  from stl_explain\n\n), parse_step_two as (\n\n  select\n    query_id\n  , split_part(cost_string, '..', 1) as starting_cost\n  , substring(\n      split_part(cost_string, '..', 2)\n      from 1\n      for strpos(split_part(cost_string, '..', 2), ' ')) as total_cost\n\n  from parse_step_one\n\n)\n\n\nselect\n\n  query_id\n, starting_cost::float as starting_cost\n, total_cost::float as total_cost\n\nfrom parse_step_two", "language": "sql", "refs": [{"name": "stl_explain", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.redshift.stl_explain"]}, "compiled_path": "target/compiled/redshift/models/base/redshift_cost.sql", "compiled": true, "compiled_code": "with  __dbt__cte__stl_explain as (\nselect\n\n  userid as user_id\n, query as query_id\n, nodeid\n, parentid\n, plannode\n, info\n\nfrom pg_catalog.stl_explain\n), stl_explain as (\n\n  select query_id, plannode from __dbt__cte__stl_explain\n  where nodeid = 1\n\n), parse_step_one as (\n\n  -- plannode (which contains cost) is formatted like:\n  --   XN Seq Scan on nyc_last_update  (cost=0.00..0.03 rows=2 width=40)\n  -- we want to rip out the cost part (0.00, 0.03) and make it usable.\n  -- cost_string after this step is \"0.00..0.03 ...\"\n  select\n    query_id\n  , split_part(plannode, 'cost=', 2) as cost_string\n\n  from stl_explain\n\n), parse_step_two as (\n\n  select\n    query_id\n  , split_part(cost_string, '..', 1) as starting_cost\n  , substring(\n      split_part(cost_string, '..', 2)\n      from 1\n      for strpos(split_part(cost_string, '..', 2), ' ')) as total_cost\n\n  from parse_step_one\n\n)\n\n\nselect\n\n  query_id\n, starting_cost::float as starting_cost\n, total_cost::float as total_cost\n\nfrom parse_step_two", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.redshift.stl_explain", "sql": " __dbt__cte__stl_explain as (\nselect\n\n  userid as user_id\n, query as query_id\n, nodeid\n, parentid\n, plannode\n, info\n\nfrom pg_catalog.stl_explain\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.redshift.pg_depend": {"database": "dev", "schema": "analytics", "name": "pg_depend", "resource_type": "model", "package_name": "redshift", "path": "base/pg_depend.sql", "original_file_path": "models/base/pg_depend.sql", "unique_id": "model.redshift.pg_depend", "fqn": ["redshift", "base", "pg_depend"], "alias": "pg_depend", "checksum": {"name": "sha256", "checksum": "c1b4384a72cf4afcba750175120f11974d660fccbf11d75d5ee887db86bb8ed6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1705873846.9091868, "relation_name": null, "raw_code": "select\n  classid\n, objid\n, objsubid\n, refclassid\n, refobjid\n, refobjsubid\n, deptype\nfrom pg_catalog.pg_depend", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/redshift/models/base/pg_depend.sql", "compiled": true, "compiled_code": "select\n  classid\n, objid\n, objsubid\n, refclassid\n, refobjid\n, refobjsubid\n, deptype\nfrom pg_catalog.pg_depend", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.redshift.pg_namespace": {"database": "dev", "schema": "analytics", "name": "pg_namespace", "resource_type": "model", "package_name": "redshift", "path": "base/pg_namespace.sql", "original_file_path": "models/base/pg_namespace.sql", "unique_id": "model.redshift.pg_namespace", "fqn": ["redshift", "base", "pg_namespace"], "alias": "pg_namespace", "checksum": {"name": "sha256", "checksum": "6f5f142e3fbce5352d62c343a4c1b13835d4126a006a35f2a7d041ea3c6072ef"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1705873846.9113545, "relation_name": null, "raw_code": "select\n  oid\n, nspname\n, nspowner\n, nspacl\nfrom pg_catalog.pg_namespace", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/redshift/models/base/pg_namespace.sql", "compiled": true, "compiled_code": "select\n  oid\n, nspname\n, nspowner\n, nspacl\nfrom pg_catalog.pg_namespace", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.redshift.stv_partitions": {"database": "dev", "schema": "analytics", "name": "stv_partitions", "resource_type": "model", "package_name": "redshift", "path": "base/stv_partitions.sql", "original_file_path": "models/base/stv_partitions.sql", "unique_id": "model.redshift.stv_partitions", "fqn": ["redshift", "base", "stv_partitions"], "alias": "stv_partitions", "checksum": {"name": "sha256", "checksum": "85d6461e8c10df1978196cf47b1a97a2ca610760f105184d3cb6bd29c595ed8f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1705873846.913509, "relation_name": null, "raw_code": "select\n\n  owner\n, host\n, diskno\n, part_begin\n, part_end\n, used\n, tossed\n, capacity\n, \"reads\"\n, writes\n, seek_forward\n, seek_back\n, is_san\n, failed\n, mbps\n, mount\n\nfrom pg_catalog.stv_partitions", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/redshift/models/base/stv_partitions.sql", "compiled": true, "compiled_code": "select\n\n  owner\n, host\n, diskno\n, part_begin\n, part_end\n, used\n, tossed\n, capacity\n, \"reads\"\n, writes\n, seek_forward\n, seek_back\n, is_san\n, failed\n, mbps\n, mount\n\nfrom pg_catalog.stv_partitions", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.redshift.pg_user": {"database": "dev", "schema": "analytics", "name": "pg_user", "resource_type": "model", "package_name": "redshift", "path": "base/pg_user.sql", "original_file_path": "models/base/pg_user.sql", "unique_id": "model.redshift.pg_user", "fqn": ["redshift", "base", "pg_user"], "alias": "pg_user", "checksum": {"name": "sha256", "checksum": "1d4a5b19e245ee93693d26a8df0b6ae38bee4e5aeb694033a012e93007477f27"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1705873846.9158912, "relation_name": null, "raw_code": "select\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_catalog.pg_user", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/redshift/models/base/pg_user.sql", "compiled": true, "compiled_code": "select\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_catalog.pg_user", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.redshift.redshift_columns": {"database": "dev", "schema": "analytics", "name": "redshift_columns", "resource_type": "model", "package_name": "redshift", "path": "introspection/redshift_columns.sql", "original_file_path": "models/introspection/redshift_columns.sql", "unique_id": "model.redshift.redshift_columns", "fqn": ["redshift", "introspection", "redshift_columns"], "alias": "redshift_columns", "checksum": {"name": "sha256", "checksum": "d35423d4cf927f1f9694f5f2aed2b95705ebeae42f7add06ec3d430325181c45"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1705873846.9180431, "relation_name": null, "raw_code": "{{ redshift.fetch_column_data_sql() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.redshift.fetch_column_data_sql"], "nodes": []}, "compiled_path": "target/compiled/redshift/models/introspection/redshift_columns.sql", "compiled": true, "compiled_code": "\n\n    with columns as (\n        select\n            n.nspname as schemaname,\n            c.relname as tablename,\n            a.attnum as col_index,\n            a.attname as col_name,\n            d.description,\n\n            case\n                when strpos(upper(format_type(a.atttypid, a.atttypmod)), 'CHARACTER VARYING') > 0\n                then replace(upper(format_type(a.atttypid, a.atttypmod)), 'CHARACTER VARYING', 'VARCHAR')\n\n                when strpos(upper(format_type(a.atttypid, a.atttypmod)), 'CHARACTER') > 0\n                then replace(upper(format_type(a.atttypid, a.atttypmod)), 'CHARACTER', 'CHAR')\n\n                else upper(format_type(a.atttypid, a.atttypmod))\n            end as col_datatype,\n\n            case\n                when format_encoding((a.attencodingtype)::integer) = 'none' then 'raw'\n                else format_encoding((a.attencodingtype)::integer)\n            end as col_encoding,\n\n            case\n                when a.atthasdef is true then adef.adsrc\n                else null\n            end as col_default,\n\n            a.attnotnull as col_not_null\n\n        from pg_catalog.pg_namespace as n\n        inner join pg_catalog.pg_class as c on n.oid = c.relnamespace\n        inner join pg_catalog.pg_attribute as a on c.oid = a.attrelid\n        left outer join pg_catalog.pg_description as d ON (d.objoid = a.attrelid AND d.objsubid = a.attnum)\n        left outer join pg_catalog.pg_attrdef as adef on a.attrelid = adef.adrelid and a.attnum = adef.adnum\n        where c.relkind = 'r'\n          and a.attnum > 0\n\n    )\n    select *\n    from columns\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.redshift.redshift_constraints": {"database": "dev", "schema": "analytics", "name": "redshift_constraints", "resource_type": "model", "package_name": "redshift", "path": "introspection/redshift_constraints.sql", "original_file_path": "models/introspection/redshift_constraints.sql", "unique_id": "model.redshift.redshift_constraints", "fqn": ["redshift", "introspection", "redshift_constraints"], "alias": "redshift_constraints", "checksum": {"name": "sha256", "checksum": "6ebed2b71f2e4a166184f25fed093cd51842fc5010b7ad20391f722651ea569c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1705873846.9237752, "relation_name": null, "raw_code": "{{ redshift.fetch_constraint_data_sql() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.redshift.fetch_constraint_data_sql"], "nodes": []}, "compiled_path": "target/compiled/redshift/models/introspection/redshift_constraints.sql", "compiled": true, "compiled_code": "\n\n    select\n        c.nspname as schemaname,\n        b.relname as tablename,\n        case\n            when a.contype = 'p' then 'primary key'\n            when a.contype = 'u' then 'unique'\n            when a.contype = 'f' then 'foreign key'\n            else null\n        end as constraint_type,\n        pg_get_constraintdef(a.oid) as col_constraint\n\n    from pg_catalog.pg_constraint a\n    join pg_catalog.pg_class b on(a.conrelid=b.oid)\n    join pg_catalog.pg_namespace c on(a.connamespace=c.oid)\n    where a.contype in ('p', 'u', 'f')\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.redshift.redshift_sort_dist_keys": {"database": "dev", "schema": "analytics", "name": "redshift_sort_dist_keys", "resource_type": "model", "package_name": "redshift", "path": "introspection/redshift_sort_dist_keys.sql", "original_file_path": "models/introspection/redshift_sort_dist_keys.sql", "unique_id": "model.redshift.redshift_sort_dist_keys", "fqn": ["redshift", "introspection", "redshift_sort_dist_keys"], "alias": "redshift_sort_dist_keys", "checksum": {"name": "sha256", "checksum": "d38c35790898c8a01a54d5679692354a85495365d1ae7d8832aea83fdf2ee722"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1705873846.9311411, "relation_name": null, "raw_code": "{{ redshift.fetch_sort_dist_key_data_sql() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.redshift.fetch_sort_dist_key_data_sql"], "nodes": []}, "compiled_path": "target/compiled/redshift/models/introspection/redshift_sort_dist_keys.sql", "compiled": true, "compiled_code": "\n\n    with dist_config as (\n\n        -- gets distyle and distkey (if there is one)\n        select distinct\n            trim(n.nspname) as schemaname,\n            trim(c.relname) as tablename,\n\n            case\n                when c.reldiststyle = 0 then 'even'\n                when c.reldiststyle = 1 then 'key'\n                when c.reldiststyle = 8 then 'all'\n                else null\n            end as diststyle,\n\n            max(case when c.reldiststyle = 1 and a.attisdistkey IS TRUE and a.attnum > 0 then a.attname else null end) over (partition by n.nspname, c.relname) as dist_key\n\n        from pg_catalog.pg_namespace as n\n        inner join pg_catalog.pg_class as c on n.oid = c.relnamespace\n        inner join pg_catalog.pg_attribute as a on c.oid = a.attrelid\n        where c.relkind = 'r'\n\n    ),\n\n    sort_config as (\n\n        -- get sortstyle and sortkeys\n        select distinct\n            trim(n.nspname) as schemaname,\n            trim(c.relname) as tablename,\n            case\n                when min(a.attsortkeyord) over (partition by n.nspname, c.relname) = -1 then 'interleaved'\n                else 'compound'\n            end as sort_style,\n            listagg(a.attname, '|') within group (order by a.attsortkeyord) over (partition by n.nspname, c.relname) as sort_keys\n\n        from pg_catalog.pg_namespace as n\n        inner join pg_catalog.pg_class as c on n.oid = c.relnamespace\n        inner join pg_catalog.pg_attribute as a on c.oid = a.attrelid\n        where c.relkind = 'r'\n          and abs(a.attsortkeyord) > 0\n          and a.attnum > 0\n    )\n\n    select *\n    from sort_config\n    join dist_config using (schemaname, tablename)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.redshift.redshift_tables": {"database": "dev", "schema": "analytics", "name": "redshift_tables", "resource_type": "model", "package_name": "redshift", "path": "introspection/redshift_tables.sql", "original_file_path": "models/introspection/redshift_tables.sql", "unique_id": "model.redshift.redshift_tables", "fqn": ["redshift", "introspection", "redshift_tables"], "alias": "redshift_tables", "checksum": {"name": "sha256", "checksum": "f235b475c8cc5cb6baacba6a7b9fcd669f4ed30709f606a01568d686a2b1cfb5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1705873846.9364212, "relation_name": null, "raw_code": "{{ redshift.fetch_table_data_sql() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.redshift.fetch_table_data_sql"], "nodes": []}, "compiled_path": "target/compiled/redshift/models/introspection/redshift_tables.sql", "compiled": true, "compiled_code": "\n\n    select\n        n.nspname AS schemaname,\n        c.relname AS tablename,\n        d.description,\n        case\n            when c.relkind = 'v' then 'view'\n            when c.relkind = 'r' then 'table'\n            else null\n        end as relation_type\n\n    from pg_catalog.pg_namespace n\n    join pg_catalog.pg_class c on n.oid = c.relnamespace\n    left outer join pg_catalog.pg_description d ON (d.objoid = c.oid AND d.objsubid = 0)\n\n    where schemaname not like 'pg_%'\n      and schemaname != 'information_schema'\n      and relkind in ('v', 'r')\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.cdo_analytics.unique_stg_dashboard__followers_follower_id.37c6c5ee61": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "follower_id", "model": "{{ get_where_subquery(ref('stg_dashboard__followers')) }}"}, "namespace": null}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "unique_stg_dashboard__followers_follower_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "unique_stg_dashboard__followers_follower_id.sql", "original_file_path": "models/staging/dashboard/_dashboard__models.yml", "unique_id": "test.cdo_analytics.unique_stg_dashboard__followers_follower_id.37c6c5ee61", "fqn": ["cdo_analytics", "staging", "dashboard", "unique_stg_dashboard__followers_follower_id"], "alias": "unique_stg_dashboard__followers_follower_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873847.1591902, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_dashboard__followers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.stg_dashboard__followers"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/_dashboard__models.yml/unique_stg_dashboard__followers_follower_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    follower_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"analytics\".\"stg_dashboard__followers\"\nwhere follower_id is not null\ngroup by follower_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "follower_id", "file_key_name": "models.stg_dashboard__followers", "attached_node": "model.cdo_analytics.stg_dashboard__followers"}, "test.cdo_analytics.not_null_stg_dashboard__followers_follower_id.8675db9e61": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "follower_id", "model": "{{ get_where_subquery(ref('stg_dashboard__followers')) }}"}, "namespace": null}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "not_null_stg_dashboard__followers_follower_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "not_null_stg_dashboard__followers_follower_id.sql", "original_file_path": "models/staging/dashboard/_dashboard__models.yml", "unique_id": "test.cdo_analytics.not_null_stg_dashboard__followers_follower_id.8675db9e61", "fqn": ["cdo_analytics", "staging", "dashboard", "not_null_stg_dashboard__followers_follower_id"], "alias": "not_null_stg_dashboard__followers_follower_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873847.1614513, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_dashboard__followers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.stg_dashboard__followers"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/_dashboard__models.yml/not_null_stg_dashboard__followers_follower_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect follower_id\nfrom \"dev\".\"analytics\".\"stg_dashboard__followers\"\nwhere follower_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "follower_id", "file_key_name": "models.stg_dashboard__followers", "attached_node": "model.cdo_analytics.stg_dashboard__followers"}, "test.cdo_analytics.not_null_stg_dashboard__followers_student_id.d0d21c3ffe": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "student_id", "model": "{{ get_where_subquery(ref('stg_dashboard__followers')) }}"}, "namespace": null}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "not_null_stg_dashboard__followers_student_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "not_null_stg_dashboard__followers_student_id.sql", "original_file_path": "models/staging/dashboard/_dashboard__models.yml", "unique_id": "test.cdo_analytics.not_null_stg_dashboard__followers_student_id.d0d21c3ffe", "fqn": ["cdo_analytics", "staging", "dashboard", "not_null_stg_dashboard__followers_student_id"], "alias": "not_null_stg_dashboard__followers_student_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873847.1632845, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_dashboard__followers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.stg_dashboard__followers"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/_dashboard__models.yml/not_null_stg_dashboard__followers_student_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect student_id\nfrom \"dev\".\"analytics\".\"stg_dashboard__followers\"\nwhere student_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "student_id", "file_key_name": "models.stg_dashboard__followers", "attached_node": "model.cdo_analytics.stg_dashboard__followers"}, "test.cdo_analytics.unique_stg_dashboard__user_levels_user_level_id.850f4f8bc6": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "user_level_id", "model": "{{ get_where_subquery(ref('stg_dashboard__user_levels')) }}"}, "namespace": null}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "unique_stg_dashboard__user_levels_user_level_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "unique_stg_dashboard__user_levels_user_level_id.sql", "original_file_path": "models/staging/dashboard/_dashboard__models.yml", "unique_id": "test.cdo_analytics.unique_stg_dashboard__user_levels_user_level_id.850f4f8bc6", "fqn": ["cdo_analytics", "staging", "dashboard", "unique_stg_dashboard__user_levels_user_level_id"], "alias": "unique_stg_dashboard__user_levels_user_level_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873847.1663368, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_dashboard__user_levels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.stg_dashboard__user_levels"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/_dashboard__models.yml/unique_stg_dashboard__user_levels_user_level_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_level_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"analytics\".\"stg_dashboard__user_levels\"\nwhere user_level_id is not null\ngroup by user_level_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "user_level_id", "file_key_name": "models.stg_dashboard__user_levels", "attached_node": "model.cdo_analytics.stg_dashboard__user_levels"}, "test.cdo_analytics.not_null_stg_dashboard__user_levels_user_level_id.1a9bb0d738": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_level_id", "model": "{{ get_where_subquery(ref('stg_dashboard__user_levels')) }}"}, "namespace": null}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "not_null_stg_dashboard__user_levels_user_level_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "not_null_stg_dashboard__user_levels_user_level_id.sql", "original_file_path": "models/staging/dashboard/_dashboard__models.yml", "unique_id": "test.cdo_analytics.not_null_stg_dashboard__user_levels_user_level_id.1a9bb0d738", "fqn": ["cdo_analytics", "staging", "dashboard", "not_null_stg_dashboard__user_levels_user_level_id"], "alias": "not_null_stg_dashboard__user_levels_user_level_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873847.168125, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_dashboard__user_levels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.stg_dashboard__user_levels"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/_dashboard__models.yml/not_null_stg_dashboard__user_levels_user_level_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_level_id\nfrom \"dev\".\"analytics\".\"stg_dashboard__user_levels\"\nwhere user_level_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "user_level_id", "file_key_name": "models.stg_dashboard__user_levels", "attached_node": "model.cdo_analytics.stg_dashboard__user_levels"}, "test.cdo_analytics.not_null_stg_dashboard__sections_section_id.7d8448a05a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "section_id", "model": "{{ get_where_subquery(ref('stg_dashboard__sections')) }}"}, "namespace": null}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "not_null_stg_dashboard__sections_section_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "not_null_stg_dashboard__sections_section_id.sql", "original_file_path": "models/staging/dashboard/_dashboard__models.yml", "unique_id": "test.cdo_analytics.not_null_stg_dashboard__sections_section_id.7d8448a05a", "fqn": ["cdo_analytics", "staging", "dashboard", "not_null_stg_dashboard__sections_section_id"], "alias": "not_null_stg_dashboard__sections_section_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873847.1698153, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_dashboard__sections", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.stg_dashboard__sections"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/_dashboard__models.yml/not_null_stg_dashboard__sections_section_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect section_id\nfrom \"dev\".\"analytics\".\"stg_dashboard__sections\"\nwhere section_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "section_id", "file_key_name": "models.stg_dashboard__sections", "attached_node": "model.cdo_analytics.stg_dashboard__sections"}, "test.cdo_analytics.unique_stg_dashboard__sections_section_id.55d1fb278a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "section_id", "model": "{{ get_where_subquery(ref('stg_dashboard__sections')) }}"}, "namespace": null}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "unique_stg_dashboard__sections_section_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "unique_stg_dashboard__sections_section_id.sql", "original_file_path": "models/staging/dashboard/_dashboard__models.yml", "unique_id": "test.cdo_analytics.unique_stg_dashboard__sections_section_id.55d1fb278a", "fqn": ["cdo_analytics", "staging", "dashboard", "unique_stg_dashboard__sections_section_id"], "alias": "unique_stg_dashboard__sections_section_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873847.1715372, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_dashboard__sections", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.stg_dashboard__sections"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/_dashboard__models.yml/unique_stg_dashboard__sections_section_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    section_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"analytics\".\"stg_dashboard__sections\"\nwhere section_id is not null\ngroup by section_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "section_id", "file_key_name": "models.stg_dashboard__sections", "attached_node": "model.cdo_analytics.stg_dashboard__sections"}, "test.cdo_analytics.unique_stg_dashboard__schools_school_id.a9b6308569": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "school_id", "model": "{{ get_where_subquery(ref('stg_dashboard__schools')) }}"}, "namespace": null}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "unique_stg_dashboard__schools_school_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "unique_stg_dashboard__schools_school_id.sql", "original_file_path": "models/staging/dashboard/_dashboard__models.yml", "unique_id": "test.cdo_analytics.unique_stg_dashboard__schools_school_id.a9b6308569", "fqn": ["cdo_analytics", "staging", "dashboard", "unique_stg_dashboard__schools_school_id"], "alias": "unique_stg_dashboard__schools_school_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873847.1732733, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_dashboard__schools", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.stg_dashboard__schools"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/_dashboard__models.yml/unique_stg_dashboard__schools_school_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    school_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"analytics\".\"stg_dashboard__schools\"\nwhere school_id is not null\ngroup by school_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "school_id", "file_key_name": "models.stg_dashboard__schools", "attached_node": "model.cdo_analytics.stg_dashboard__schools"}, "test.cdo_analytics.not_null_stg_dashboard__schools_school_id.dca2bd97dd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_id", "model": "{{ get_where_subquery(ref('stg_dashboard__schools')) }}"}, "namespace": null}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "not_null_stg_dashboard__schools_school_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "not_null_stg_dashboard__schools_school_id.sql", "original_file_path": "models/staging/dashboard/_dashboard__models.yml", "unique_id": "test.cdo_analytics.not_null_stg_dashboard__schools_school_id.dca2bd97dd", "fqn": ["cdo_analytics", "staging", "dashboard", "not_null_stg_dashboard__schools_school_id"], "alias": "not_null_stg_dashboard__schools_school_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873847.1752534, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_dashboard__schools", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.stg_dashboard__schools"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/_dashboard__models.yml/not_null_stg_dashboard__schools_school_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect school_id\nfrom \"dev\".\"analytics\".\"stg_dashboard__schools\"\nwhere school_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "school_id", "file_key_name": "models.stg_dashboard__schools", "attached_node": "model.cdo_analytics.stg_dashboard__schools"}, "test.cdo_analytics.not_null_stg_dashboard__school_stats_by_years_school_id.7dce256f1f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_id", "model": "{{ get_where_subquery(ref('stg_dashboard__school_stats_by_years')) }}"}, "namespace": null}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "not_null_stg_dashboard__school_stats_by_years_school_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "not_null_stg_dashboard__school_stats_by_years_school_id.sql", "original_file_path": "models/staging/dashboard/_dashboard__models.yml", "unique_id": "test.cdo_analytics.not_null_stg_dashboard__school_stats_by_years_school_id.7dce256f1f", "fqn": ["cdo_analytics", "staging", "dashboard", "not_null_stg_dashboard__school_stats_by_years_school_id"], "alias": "not_null_stg_dashboard__school_stats_by_years_school_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873847.176962, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_dashboard__school_stats_by_years", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.stg_dashboard__school_stats_by_years"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/_dashboard__models.yml/not_null_stg_dashboard__school_stats_by_years_school_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect school_id\nfrom \"dev\".\"analytics\".\"stg_dashboard__school_stats_by_years\"\nwhere school_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "school_id", "file_key_name": "models.stg_dashboard__school_stats_by_years", "attached_node": "model.cdo_analytics.stg_dashboard__school_stats_by_years"}, "test.cdo_analytics.dbt_utils_unique_combination_of_columns_stg_dashboard__school_stats_by_years_school_id__school_year.2ac6586976": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["school_id", "school_year"], "model": "{{ get_where_subquery(ref('stg_dashboard__school_stats_by_years')) }}"}, "namespace": "dbt_utils"}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_dashboard__school_stats_by_years_school_id__school_year", "resource_type": "test", "package_name": "cdo_analytics", "path": "dbt_utils_unique_combination_o_a57518fac20d9a3deef1573b53234298.sql", "original_file_path": "models/staging/dashboard/_dashboard__models.yml", "unique_id": "test.cdo_analytics.dbt_utils_unique_combination_of_columns_stg_dashboard__school_stats_by_years_school_id__school_year.2ac6586976", "fqn": ["cdo_analytics", "staging", "dashboard", "dbt_utils_unique_combination_of_columns_stg_dashboard__school_stats_by_years_school_id__school_year"], "alias": "dbt_utils_unique_combination_o_a57518fac20d9a3deef1573b53234298", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a57518fac20d9a3deef1573b53234298", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a57518fac20d9a3deef1573b53234298"}, "created_at": 1705873847.1786423, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a57518fac20d9a3deef1573b53234298\") }}", "language": "sql", "refs": [{"name": "stg_dashboard__school_stats_by_years", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.stg_dashboard__school_stats_by_years"]}, "compiled_path": "target/compiled/cdo_analytics/models/staging/dashboard/_dashboard__models.yml/dbt_utils_unique_combination_o_a57518fac20d9a3deef1573b53234298.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        school_id, school_year\n    from \"dev\".\"analytics\".\"stg_dashboard__school_stats_by_years\"\n    group by school_id, school_year\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_dashboard__school_stats_by_years", "attached_node": "model.cdo_analytics.stg_dashboard__school_stats_by_years"}, "test.cdo_analytics.dbt_utils_unique_combination_of_columns_int_active_sections_teacher_id__school_year__course_name__section_id.df94559703": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["teacher_id", "school_year", "course_name", "section_id"], "model": "{{ get_where_subquery(ref('int_active_sections')) }}"}, "namespace": "dbt_utils"}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_active_sections_teacher_id__school_year__course_name__section_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "dbt_utils_unique_combination_o_45a5c626ddf17c1a40a2a86cd7e69119.sql", "original_file_path": "models/intermediate/_intermediate__models.yml", "unique_id": "test.cdo_analytics.dbt_utils_unique_combination_of_columns_int_active_sections_teacher_id__school_year__course_name__section_id.df94559703", "fqn": ["cdo_analytics", "intermediate", "dbt_utils_unique_combination_of_columns_int_active_sections_teacher_id__school_year__course_name__section_id"], "alias": "dbt_utils_unique_combination_o_45a5c626ddf17c1a40a2a86cd7e69119", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_45a5c626ddf17c1a40a2a86cd7e69119", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_45a5c626ddf17c1a40a2a86cd7e69119"}, "created_at": 1705873847.2035065, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_45a5c626ddf17c1a40a2a86cd7e69119\") }}", "language": "sql", "refs": [{"name": "int_active_sections", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.int_active_sections"]}, "compiled_path": "target/compiled/cdo_analytics/models/intermediate/_intermediate__models.yml/dbt_utils_unique_combination_o_45a5c626ddf17c1a40a2a86cd7e69119.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        teacher_id, school_year, course_name, section_id\n    from \"dev\".\"analytics\".\"int_active_sections\"\n    group by teacher_id, school_year, course_name, section_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_active_sections", "attached_node": "model.cdo_analytics.int_active_sections"}, "test.cdo_analytics.dbt_utils_unique_combination_of_columns_int_section_mapping_student_id__school_year__section_id__teacher_id__school_id.1fd3b5f84d": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["student_id", "school_year", "section_id", "teacher_id", "school_id"], "model": "{{ get_where_subquery(ref('int_section_mapping')) }}"}, "namespace": "dbt_utils"}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_section_mapping_student_id__school_year__section_id__teacher_id__school_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "dbt_utils_unique_combination_o_ff801f7372cd4cc54114d6d60b38bb6b.sql", "original_file_path": "models/intermediate/_intermediate__models.yml", "unique_id": "test.cdo_analytics.dbt_utils_unique_combination_of_columns_int_section_mapping_student_id__school_year__section_id__teacher_id__school_id.1fd3b5f84d", "fqn": ["cdo_analytics", "intermediate", "dbt_utils_unique_combination_of_columns_int_section_mapping_student_id__school_year__section_id__teacher_id__school_id"], "alias": "dbt_utils_unique_combination_o_ff801f7372cd4cc54114d6d60b38bb6b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ff801f7372cd4cc54114d6d60b38bb6b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ff801f7372cd4cc54114d6d60b38bb6b"}, "created_at": 1705873847.2083778, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ff801f7372cd4cc54114d6d60b38bb6b\") }}", "language": "sql", "refs": [{"name": "int_section_mapping", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.int_section_mapping"]}, "compiled_path": "target/compiled/cdo_analytics/models/intermediate/_intermediate__models.yml/dbt_utils_unique_combination_o_ff801f7372cd4cc54114d6d60b38bb6b.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        student_id, school_year, section_id, teacher_id, school_id\n    from \"dev\".\"analytics\".\"int_section_mapping\"\n    group by student_id, school_year, section_id, teacher_id, school_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_section_mapping", "attached_node": "model.cdo_analytics.int_section_mapping"}, "test.cdo_analytics.dbt_utils_unique_combination_of_columns_int_user_levels_user_id__level_id__script_id.b41082019b": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["user_id", "level_id", "script_id"], "model": "{{ get_where_subquery(ref('int_user_levels')) }}"}, "namespace": "dbt_utils"}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_user_levels_user_id__level_id__script_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "dbt_utils_unique_combination_o_d8dd847c9bda640481591c33b2c41dd1.sql", "original_file_path": "models/intermediate/_intermediate__models.yml", "unique_id": "test.cdo_analytics.dbt_utils_unique_combination_of_columns_int_user_levels_user_id__level_id__script_id.b41082019b", "fqn": ["cdo_analytics", "intermediate", "dbt_utils_unique_combination_of_columns_int_user_levels_user_id__level_id__script_id"], "alias": "dbt_utils_unique_combination_o_d8dd847c9bda640481591c33b2c41dd1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d8dd847c9bda640481591c33b2c41dd1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d8dd847c9bda640481591c33b2c41dd1"}, "created_at": 1705873847.2123892, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d8dd847c9bda640481591c33b2c41dd1\") }}", "language": "sql", "refs": [{"name": "int_user_levels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.int_user_levels"]}, "compiled_path": "target/compiled/cdo_analytics/models/intermediate/_intermediate__models.yml/dbt_utils_unique_combination_o_d8dd847c9bda640481591c33b2c41dd1.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        user_id, level_id, script_id\n    from \"dev\".\"analytics\".\"int_user_levels\"\n    group by user_id, level_id, script_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_user_levels", "attached_node": "model.cdo_analytics.int_user_levels"}, "test.cdo_analytics.dbt_utils_unique_combination_of_columns_int_school_weeks_school_year__iso_week__school_year_week.26450d8be2": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["school_year", "iso_week", "school_year_week"], "model": "{{ get_where_subquery(ref('int_school_weeks')) }}"}, "namespace": "dbt_utils"}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_school_weeks_school_year__iso_week__school_year_week", "resource_type": "test", "package_name": "cdo_analytics", "path": "dbt_utils_unique_combination_o_c36125a32fa3db8da181b43dcc9aee6f.sql", "original_file_path": "models/intermediate/_intermediate__models.yml", "unique_id": "test.cdo_analytics.dbt_utils_unique_combination_of_columns_int_school_weeks_school_year__iso_week__school_year_week.26450d8be2", "fqn": ["cdo_analytics", "intermediate", "dbt_utils_unique_combination_of_columns_int_school_weeks_school_year__iso_week__school_year_week"], "alias": "dbt_utils_unique_combination_o_c36125a32fa3db8da181b43dcc9aee6f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c36125a32fa3db8da181b43dcc9aee6f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c36125a32fa3db8da181b43dcc9aee6f"}, "created_at": 1705873847.217417, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c36125a32fa3db8da181b43dcc9aee6f\") }}", "language": "sql", "refs": [{"name": "int_school_weeks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.int_school_weeks"]}, "compiled_path": "target/compiled/cdo_analytics/models/intermediate/_intermediate__models.yml/dbt_utils_unique_combination_o_c36125a32fa3db8da181b43dcc9aee6f.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        school_year, iso_week, school_year_week\n    from \"dev\".\"analytics\".\"int_school_weeks\"\n    group by school_year, iso_week, school_year_week\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_school_weeks", "attached_node": "model.cdo_analytics.int_school_weeks"}, "test.cdo_analytics.dbt_utils_unique_combination_of_columns_dim_user_stages_user_id__course_id__script_id__stage_id.e3e2e91a12": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["user_id", "course_id", "script_id", "stage_id"], "model": "{{ get_where_subquery(ref('dim_user_stages')) }}"}, "namespace": "dbt_utils"}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_dim_user_stages_user_id__course_id__script_id__stage_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "dbt_utils_unique_combination_o_fd7cb68f9709be83d95150f115c5f380.sql", "original_file_path": "models/marts/users/_users_models.yml", "unique_id": "test.cdo_analytics.dbt_utils_unique_combination_of_columns_dim_user_stages_user_id__course_id__script_id__stage_id.e3e2e91a12", "fqn": ["cdo_analytics", "marts", "users", "dbt_utils_unique_combination_of_columns_dim_user_stages_user_id__course_id__script_id__stage_id"], "alias": "dbt_utils_unique_combination_o_fd7cb68f9709be83d95150f115c5f380", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_fd7cb68f9709be83d95150f115c5f380", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_fd7cb68f9709be83d95150f115c5f380"}, "created_at": 1705873847.222784, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_fd7cb68f9709be83d95150f115c5f380\") }}", "language": "sql", "refs": [{"name": "dim_user_stages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.dim_user_stages"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/users/_users_models.yml/dbt_utils_unique_combination_o_fd7cb68f9709be83d95150f115c5f380.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        user_id, course_id, script_id, stage_id\n    from \"dev\".\"analytics\".\"dim_user_stages\"\n    group by user_id, course_id, script_id, stage_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_user_stages", "attached_node": "model.cdo_analytics.dim_user_stages"}, "test.cdo_analytics.not_null_dim_school_districs_school_district_id.9a516ad834": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_district_id", "model": "{{ get_where_subquery(ref('dim_school_districs')) }}"}, "namespace": null}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "not_null_dim_school_districs_school_district_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "not_null_dim_school_districs_school_district_id.sql", "original_file_path": "models/marts/schools/_schools__models.yml", "unique_id": "test.cdo_analytics.not_null_dim_school_districs_school_district_id.9a516ad834", "fqn": ["cdo_analytics", "marts", "schools", "not_null_dim_school_districs_school_district_id"], "alias": "not_null_dim_school_districs_school_district_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873847.233336, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_school_districs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "school_district_id", "file_key_name": "models.dim_school_districs", "attached_node": null}, "test.cdo_analytics.unique_dim_school_districs_school_district_id.06c48c1d90": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "school_district_id", "model": "{{ get_where_subquery(ref('dim_school_districs')) }}"}, "namespace": null}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "unique_dim_school_districs_school_district_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "unique_dim_school_districs_school_district_id.sql", "original_file_path": "models/marts/schools/_schools__models.yml", "unique_id": "test.cdo_analytics.unique_dim_school_districs_school_district_id.06c48c1d90", "fqn": ["cdo_analytics", "marts", "schools", "unique_dim_school_districs_school_district_id"], "alias": "unique_dim_school_districs_school_district_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873847.2350917, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_school_districs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "school_district_id", "file_key_name": "models.dim_school_districs", "attached_node": null}, "test.cdo_analytics.dbt_utils_unique_combination_of_columns_dim_school_stats_by_years_school_year__school_id.572288f478": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["school_year", "school_id"], "model": "{{ get_where_subquery(ref('dim_school_stats_by_years')) }}"}, "namespace": "dbt_utils"}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_dim_school_stats_by_years_school_year__school_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "dbt_utils_unique_combination_o_64be0f0e26902f0df3b24ff19eef09cd.sql", "original_file_path": "models/marts/schools/_schools__models.yml", "unique_id": "test.cdo_analytics.dbt_utils_unique_combination_of_columns_dim_school_stats_by_years_school_year__school_id.572288f478", "fqn": ["cdo_analytics", "marts", "schools", "dbt_utils_unique_combination_of_columns_dim_school_stats_by_years_school_year__school_id"], "alias": "dbt_utils_unique_combination_o_64be0f0e26902f0df3b24ff19eef09cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_64be0f0e26902f0df3b24ff19eef09cd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_64be0f0e26902f0df3b24ff19eef09cd"}, "created_at": 1705873847.2368302, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_64be0f0e26902f0df3b24ff19eef09cd\") }}", "language": "sql", "refs": [{"name": "dim_school_stats_by_years", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.dim_school_stats_by_years"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/schools/_schools__models.yml/dbt_utils_unique_combination_o_64be0f0e26902f0df3b24ff19eef09cd.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        school_year, school_id\n    from \"dev\".\"analytics\".\"dim_school_stats_by_years\"\n    group by school_year, school_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_school_stats_by_years", "attached_node": "model.cdo_analytics.dim_school_stats_by_years"}, "test.cdo_analytics.not_null_dim_schools_school_id.baadfc6c97": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_id", "model": "{{ get_where_subquery(ref('dim_schools')) }}"}, "namespace": null}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "not_null_dim_schools_school_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "not_null_dim_schools_school_id.sql", "original_file_path": "models/marts/schools/_schools__models.yml", "unique_id": "test.cdo_analytics.not_null_dim_schools_school_id.baadfc6c97", "fqn": ["cdo_analytics", "marts", "schools", "not_null_dim_schools_school_id"], "alias": "not_null_dim_schools_school_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873847.2414813, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_schools", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.dim_schools"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/schools/_schools__models.yml/not_null_dim_schools_school_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect school_id\nfrom \"dev\".\"analytics\".\"dim_schools\"\nwhere school_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "school_id", "file_key_name": "models.dim_schools", "attached_node": "model.cdo_analytics.dim_schools"}, "test.cdo_analytics.unique_dim_schools_school_id.50ab1b294e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "school_id", "model": "{{ get_where_subquery(ref('dim_schools')) }}"}, "namespace": null}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "unique_dim_schools_school_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "unique_dim_schools_school_id.sql", "original_file_path": "models/marts/schools/_schools__models.yml", "unique_id": "test.cdo_analytics.unique_dim_schools_school_id.50ab1b294e", "fqn": ["cdo_analytics", "marts", "schools", "unique_dim_schools_school_id"], "alias": "unique_dim_schools_school_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873847.24317, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_schools", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.dim_schools"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/schools/_schools__models.yml/unique_dim_schools_school_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    school_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"analytics\".\"dim_schools\"\nwhere school_id is not null\ngroup by school_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "school_id", "file_key_name": "models.dim_schools", "attached_node": "model.cdo_analytics.dim_schools"}, "test.cdo_analytics.not_null_dim_students_student_id.10ef5e35c7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "student_id", "model": "{{ get_where_subquery(ref('dim_students')) }}"}, "namespace": null}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "not_null_dim_students_student_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "not_null_dim_students_student_id.sql", "original_file_path": "models/marts/students/_students__models.yml", "unique_id": "test.cdo_analytics.not_null_dim_students_student_id.10ef5e35c7", "fqn": ["cdo_analytics", "marts", "students", "not_null_dim_students_student_id"], "alias": "not_null_dim_students_student_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873847.2492385, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_students", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.dim_students"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/students/_students__models.yml/not_null_dim_students_student_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect student_id\nfrom \"dev\".\"analytics\".\"dim_students\"\nwhere student_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "student_id", "file_key_name": "models.dim_students", "attached_node": "model.cdo_analytics.dim_students"}, "test.cdo_analytics.unique_dim_students_student_id.02754676d0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "student_id", "model": "{{ get_where_subquery(ref('dim_students')) }}"}, "namespace": null}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "unique_dim_students_student_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "unique_dim_students_student_id.sql", "original_file_path": "models/marts/students/_students__models.yml", "unique_id": "test.cdo_analytics.unique_dim_students_student_id.02754676d0", "fqn": ["cdo_analytics", "marts", "students", "unique_dim_students_student_id"], "alias": "unique_dim_students_student_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873847.2509706, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_students", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.dim_students"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/students/_students__models.yml/unique_dim_students_student_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    student_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"analytics\".\"dim_students\"\nwhere student_id is not null\ngroup by student_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "student_id", "file_key_name": "models.dim_students", "attached_node": "model.cdo_analytics.dim_students"}, "test.cdo_analytics.unique_dim_levels_level_id.5eefad6abc": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "level_id", "model": "{{ get_where_subquery(ref('dim_levels')) }}"}, "namespace": null}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "unique_dim_levels_level_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "unique_dim_levels_level_id.sql", "original_file_path": "models/marts/courses/_courses__models.yml", "unique_id": "test.cdo_analytics.unique_dim_levels_level_id.5eefad6abc", "fqn": ["cdo_analytics", "marts", "courses", "unique_dim_levels_level_id"], "alias": "unique_dim_levels_level_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873847.2551413, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_levels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.dim_levels"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/courses/_courses__models.yml/unique_dim_levels_level_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    level_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"analytics\".\"dim_levels\"\nwhere level_id is not null\ngroup by level_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "level_id", "file_key_name": "models.dim_levels", "attached_node": "model.cdo_analytics.dim_levels"}, "test.cdo_analytics.not_null_dim_levels_level_id.1f8c5dc9a7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "level_id", "model": "{{ get_where_subquery(ref('dim_levels')) }}"}, "namespace": null}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "not_null_dim_levels_level_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "not_null_dim_levels_level_id.sql", "original_file_path": "models/marts/courses/_courses__models.yml", "unique_id": "test.cdo_analytics.not_null_dim_levels_level_id.1f8c5dc9a7", "fqn": ["cdo_analytics", "marts", "courses", "not_null_dim_levels_level_id"], "alias": "not_null_dim_levels_level_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873847.2568898, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_levels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.dim_levels"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/courses/_courses__models.yml/not_null_dim_levels_level_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect level_id\nfrom \"dev\".\"analytics\".\"dim_levels\"\nwhere level_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "level_id", "file_key_name": "models.dim_levels", "attached_node": "model.cdo_analytics.dim_levels"}, "test.cdo_analytics.unique_dim_script_names_versioned_script_id.139446433d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "versioned_script_id", "model": "{{ get_where_subquery(ref('dim_script_names')) }}"}, "namespace": null}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "unique_dim_script_names_versioned_script_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "unique_dim_script_names_versioned_script_id.sql", "original_file_path": "models/marts/courses/_courses__models.yml", "unique_id": "test.cdo_analytics.unique_dim_script_names_versioned_script_id.139446433d", "fqn": ["cdo_analytics", "marts", "courses", "unique_dim_script_names_versioned_script_id"], "alias": "unique_dim_script_names_versioned_script_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873847.2588558, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_script_names", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.dim_script_names"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/courses/_courses__models.yml/unique_dim_script_names_versioned_script_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    versioned_script_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"analytics\".\"dim_script_names\"\nwhere versioned_script_id is not null\ngroup by versioned_script_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "versioned_script_id", "file_key_name": "models.dim_script_names", "attached_node": "model.cdo_analytics.dim_script_names"}, "test.cdo_analytics.not_null_dim_script_names_versioned_script_id.20b063a296": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "versioned_script_id", "model": "{{ get_where_subquery(ref('dim_script_names')) }}"}, "namespace": null}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "not_null_dim_script_names_versioned_script_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "not_null_dim_script_names_versioned_script_id.sql", "original_file_path": "models/marts/courses/_courses__models.yml", "unique_id": "test.cdo_analytics.not_null_dim_script_names_versioned_script_id.20b063a296", "fqn": ["cdo_analytics", "marts", "courses", "not_null_dim_script_names_versioned_script_id"], "alias": "not_null_dim_script_names_versioned_script_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873847.2605631, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_script_names", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.dim_script_names"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/courses/_courses__models.yml/not_null_dim_script_names_versioned_script_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect versioned_script_id\nfrom \"dev\".\"analytics\".\"dim_script_names\"\nwhere versioned_script_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "versioned_script_id", "file_key_name": "models.dim_script_names", "attached_node": "model.cdo_analytics.dim_script_names"}, "test.cdo_analytics.not_null_dim_teachers_teacher_id.c414c8c807": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "teacher_id", "model": "{{ get_where_subquery(ref('dim_teachers')) }}"}, "namespace": null}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "not_null_dim_teachers_teacher_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "not_null_dim_teachers_teacher_id.sql", "original_file_path": "models/marts/teachers/_teachers__models.yml", "unique_id": "test.cdo_analytics.not_null_dim_teachers_teacher_id.c414c8c807", "fqn": ["cdo_analytics", "marts", "teachers", "not_null_dim_teachers_teacher_id"], "alias": "not_null_dim_teachers_teacher_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873847.2665896, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_teachers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.dim_teachers"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/teachers/_teachers__models.yml/not_null_dim_teachers_teacher_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect teacher_id\nfrom \"dev\".\"analytics\".\"dim_teachers\"\nwhere teacher_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "teacher_id", "file_key_name": "models.dim_teachers", "attached_node": "model.cdo_analytics.dim_teachers"}, "test.cdo_analytics.unique_dim_teachers_teacher_id.55db8b21ab": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "teacher_id", "model": "{{ get_where_subquery(ref('dim_teachers')) }}"}, "namespace": null}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "unique_dim_teachers_teacher_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "unique_dim_teachers_teacher_id.sql", "original_file_path": "models/marts/teachers/_teachers__models.yml", "unique_id": "test.cdo_analytics.unique_dim_teachers_teacher_id.55db8b21ab", "fqn": ["cdo_analytics", "marts", "teachers", "unique_dim_teachers_teacher_id"], "alias": "unique_dim_teachers_teacher_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873847.2683837, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_teachers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.dim_teachers"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/teachers/_teachers__models.yml/unique_dim_teachers_teacher_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    teacher_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"analytics\".\"dim_teachers\"\nwhere teacher_id is not null\ngroup by teacher_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "teacher_id", "file_key_name": "models.dim_teachers", "attached_node": "model.cdo_analytics.dim_teachers"}, "test.cdo_analytics.dbt_utils_unique_combination_of_columns_dim_teacher_status_school_year__teacher_id.b0cc028c6b": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["school_year", "teacher_id"], "model": "{{ get_where_subquery(ref('dim_teacher_status')) }}"}, "namespace": "dbt_utils"}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_dim_teacher_status_school_year__teacher_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "dbt_utils_unique_combination_o_2e761cb039859f0b3677085605d465d1.sql", "original_file_path": "models/marts/teachers/_teachers__models.yml", "unique_id": "test.cdo_analytics.dbt_utils_unique_combination_of_columns_dim_teacher_status_school_year__teacher_id.b0cc028c6b", "fqn": ["cdo_analytics", "marts", "teachers", "dbt_utils_unique_combination_of_columns_dim_teacher_status_school_year__teacher_id"], "alias": "dbt_utils_unique_combination_o_2e761cb039859f0b3677085605d465d1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2e761cb039859f0b3677085605d465d1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2e761cb039859f0b3677085605d465d1"}, "created_at": 1705873847.2701168, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2e761cb039859f0b3677085605d465d1\") }}", "language": "sql", "refs": [{"name": "dim_teacher_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.dim_teacher_status"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/teachers/_teachers__models.yml/dbt_utils_unique_combination_o_2e761cb039859f0b3677085605d465d1.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        school_year, teacher_id\n    from \"dev\".\"analytics\".\"dim_teacher_status\"\n    group by school_year, teacher_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_teacher_status", "attached_node": "model.cdo_analytics.dim_teacher_status"}, "test.cdo_analytics.unique_dim_forms_form_id.3c980f09d6": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "form_id", "model": "{{ get_where_subquery(ref('dim_forms')) }}"}, "namespace": null}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "unique_dim_forms_form_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "unique_dim_forms_form_id.sql", "original_file_path": "models/marts/misc/_misc_models.yml", "unique_id": "test.cdo_analytics.unique_dim_forms_form_id.3c980f09d6", "fqn": ["cdo_analytics", "marts", "misc", "unique_dim_forms_form_id"], "alias": "unique_dim_forms_form_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873847.2753723, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_forms", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.dim_forms"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/misc/_misc_models.yml/unique_dim_forms_form_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    form_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"analytics\".\"dim_forms\"\nwhere form_id is not null\ngroup by form_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "form_id", "file_key_name": "models.dim_forms", "attached_node": "model.cdo_analytics.dim_forms"}, "test.cdo_analytics.not_null_dim_forms_form_id.51d004ca2c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "form_id", "model": "{{ get_where_subquery(ref('dim_forms')) }}"}, "namespace": null}, "database": "dev", "schema": "analytics_dbt_test__audit", "name": "not_null_dim_forms_form_id", "resource_type": "test", "package_name": "cdo_analytics", "path": "not_null_dim_forms_form_id.sql", "original_file_path": "models/marts/misc/_misc_models.yml", "unique_id": "test.cdo_analytics.not_null_dim_forms_form_id.51d004ca2c", "fqn": ["cdo_analytics", "marts", "misc", "not_null_dim_forms_form_id"], "alias": "not_null_dim_forms_form_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705873847.2770765, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_forms", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cdo_analytics.dim_forms"]}, "compiled_path": "target/compiled/cdo_analytics/models/marts/misc/_misc_models.yml/not_null_dim_forms_form_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect form_id\nfrom \"dev\".\"analytics\".\"dim_forms\"\nwhere form_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "form_id", "file_key_name": "models.dim_forms", "attached_node": "model.cdo_analytics.dim_forms"}}, "sources": {"source.cdo_analytics.dashboard_pii.foorm_forms": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "foorm_forms", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.foorm_forms", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "foorm_forms"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "foorm_forms", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"foorm_forms\"", "created_at": 1705873847.279978}, "source.cdo_analytics.dashboard_pii.foorm_libraries": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "foorm_libraries", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.foorm_libraries", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "foorm_libraries"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "foorm_libraries", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"foorm_libraries\"", "created_at": 1705873847.2801821}, "source.cdo_analytics.dashboard_pii.foorm_library_questions": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "foorm_library_questions", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.foorm_library_questions", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "foorm_library_questions"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "foorm_library_questions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"foorm_library_questions\"", "created_at": 1705873847.2803235}, "source.cdo_analytics.dashboard_pii.foorm_simple_survey_forms": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "foorm_simple_survey_forms", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.foorm_simple_survey_forms", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "foorm_simple_survey_forms"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "foorm_simple_survey_forms", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"foorm_simple_survey_forms\"", "created_at": 1705873847.280457}, "source.cdo_analytics.dashboard_pii.foorm_simple_survey_submissions": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "foorm_simple_survey_submissions", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.foorm_simple_survey_submissions", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "foorm_simple_survey_submissions"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "foorm_simple_survey_submissions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"foorm_simple_survey_submissions\"", "created_at": 1705873847.280584}, "source.cdo_analytics.dashboard_pii.foorm_submissions": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "foorm_submissions", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.foorm_submissions", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "foorm_submissions"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "foorm_submissions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"foorm_submissions\"", "created_at": 1705873847.280708}, "source.cdo_analytics.dashboard_pii.pd_applications": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "pd_applications", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.pd_applications", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "pd_applications"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "pd_applications", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"pd_applications\"", "created_at": 1705873847.2808335}, "source.cdo_analytics.dashboard_pii.pd_attendances": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "pd_attendances", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.pd_attendances", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "pd_attendances"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "pd_attendances", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"pd_attendances\"", "created_at": 1705873847.2809536}, "source.cdo_analytics.dashboard_pii.pd_enrollments": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "pd_enrollments", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.pd_enrollments", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "pd_enrollments"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "pd_enrollments", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"pd_enrollments\"", "created_at": 1705873847.2810707}, "source.cdo_analytics.dashboard_pii.pd_international_opt_ins": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "pd_international_opt_ins", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.pd_international_opt_ins", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "pd_international_opt_ins"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "pd_international_opt_ins", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"pd_international_opt_ins\"", "created_at": 1705873847.2811873}, "source.cdo_analytics.dashboard_pii.pd_misc_surveys": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "pd_misc_surveys", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.pd_misc_surveys", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "pd_misc_surveys"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "pd_misc_surveys", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"pd_misc_surveys\"", "created_at": 1705873847.281549}, "source.cdo_analytics.dashboard_pii.pd_post_course_surveys": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "pd_post_course_surveys", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.pd_post_course_surveys", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "pd_post_course_surveys"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "pd_post_course_surveys", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"pd_post_course_surveys\"", "created_at": 1705873847.2816985}, "source.cdo_analytics.dashboard_pii.pd_pre_workshop_surveys": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "pd_pre_workshop_surveys", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.pd_pre_workshop_surveys", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "pd_pre_workshop_surveys"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "pd_pre_workshop_surveys", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"pd_pre_workshop_surveys\"", "created_at": 1705873847.2818177}, "source.cdo_analytics.dashboard_pii.pd_regional_partner_contacts": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "pd_regional_partner_contacts", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.pd_regional_partner_contacts", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "pd_regional_partner_contacts"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "pd_regional_partner_contacts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"pd_regional_partner_contacts\"", "created_at": 1705873847.2819357}, "source.cdo_analytics.dashboard_pii.pd_regional_partner_mappings": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "pd_regional_partner_mappings", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.pd_regional_partner_mappings", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "pd_regional_partner_mappings"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "pd_regional_partner_mappings", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"pd_regional_partner_mappings\"", "created_at": 1705873847.2820535}, "source.cdo_analytics.dashboard_pii.pd_regional_partner_mini_contacts": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "pd_regional_partner_mini_contacts", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.pd_regional_partner_mini_contacts", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "pd_regional_partner_mini_contacts"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "pd_regional_partner_mini_contacts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"pd_regional_partner_mini_contacts\"", "created_at": 1705873847.2821832}, "source.cdo_analytics.dashboard_pii.pd_regional_partner_program_registrations": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "pd_regional_partner_program_registrations", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.pd_regional_partner_program_registrations", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "pd_regional_partner_program_registrations"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "pd_regional_partner_program_registrations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"pd_regional_partner_program_registrations\"", "created_at": 1705873847.2823005}, "source.cdo_analytics.dashboard_pii.pd_scholarship_infos": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "pd_scholarship_infos", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.pd_scholarship_infos", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "pd_scholarship_infos"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "pd_scholarship_infos", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"pd_scholarship_infos\"", "created_at": 1705873847.2824163}, "source.cdo_analytics.dashboard_pii.pd_sessions": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "pd_sessions", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.pd_sessions", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "pd_sessions"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "pd_sessions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"pd_sessions\"", "created_at": 1705873847.2825308}, "source.cdo_analytics.dashboard_pii.pd_survey_questions": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "pd_survey_questions", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.pd_survey_questions", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "pd_survey_questions"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "pd_survey_questions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"pd_survey_questions\"", "created_at": 1705873847.2826452}, "source.cdo_analytics.dashboard_pii.pd_teacher_applications": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "pd_teacher_applications", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.pd_teacher_applications", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "pd_teacher_applications"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "pd_teacher_applications", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"pd_teacher_applications\"", "created_at": 1705873847.2827616}, "source.cdo_analytics.dashboard_pii.pd_teachercon_surveys": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "pd_teachercon_surveys", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.pd_teachercon_surveys", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "pd_teachercon_surveys"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "pd_teachercon_surveys", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"pd_teachercon_surveys\"", "created_at": 1705873847.2828753}, "source.cdo_analytics.dashboard_pii.pd_teachercon1819_registrations": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "pd_teachercon1819_registrations", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.pd_teachercon1819_registrations", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "pd_teachercon1819_registrations"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "pd_teachercon1819_registrations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"pd_teachercon1819_registrations\"", "created_at": 1705873847.2829916}, "source.cdo_analytics.dashboard_pii.pd_workshop_daily_surveys": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "pd_workshop_daily_surveys", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.pd_workshop_daily_surveys", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "pd_workshop_daily_surveys"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "pd_workshop_daily_surveys", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"pd_workshop_daily_surveys\"", "created_at": 1705873847.2831068}, "source.cdo_analytics.dashboard_pii.pd_workshop_facilitator_daily_surveys": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "pd_workshop_facilitator_daily_surveys", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.pd_workshop_facilitator_daily_surveys", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "pd_workshop_facilitator_daily_surveys"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "pd_workshop_facilitator_daily_surveys", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"pd_workshop_facilitator_daily_surveys\"", "created_at": 1705873847.2832205}, "source.cdo_analytics.dashboard_pii.pd_workshop_survey_foorm_submissions": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "pd_workshop_survey_foorm_submissions", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.pd_workshop_survey_foorm_submissions", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "pd_workshop_survey_foorm_submissions"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "pd_workshop_survey_foorm_submissions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"pd_workshop_survey_foorm_submissions\"", "created_at": 1705873847.2833555}, "source.cdo_analytics.dashboard_pii.pd_workshop_surveys": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "pd_workshop_surveys", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.pd_workshop_surveys", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "pd_workshop_surveys"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "pd_workshop_surveys", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"pd_workshop_surveys\"", "created_at": 1705873847.283472}, "source.cdo_analytics.dashboard_pii.pd_workshops_facilitators": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "pd_workshops_facilitators", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.pd_workshops_facilitators", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "pd_workshops_facilitators"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "pd_workshops_facilitators", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"pd_workshops_facilitators\"", "created_at": 1705873847.2835891}, "source.cdo_analytics.dashboard_pii.pd_workshops": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "pd_workshops", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.pd_workshops", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "pd_workshops"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "pd_workshops", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"pd_workshops\"", "created_at": 1705873847.2837074}, "source.cdo_analytics.dashboard_pii.peer_reviews": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "peer_reviews", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.peer_reviews", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "peer_reviews"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "peer_reviews", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"peer_reviews\"", "created_at": 1705873847.2838244}, "source.cdo_analytics.dashboard_pii.projects": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "projects", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.projects", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "projects"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "projects", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"projects\"", "created_at": 1705873847.2839391}, "source.cdo_analytics.dashboard_pii.regional_partners": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "regional_partners", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.regional_partners", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "regional_partners"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "regional_partners", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"regional_partners\"", "created_at": 1705873847.2840524}, "source.cdo_analytics.dashboard_pii.teacher_feedbacks": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "teacher_feedbacks", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.teacher_feedbacks", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "teacher_feedbacks"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "teacher_feedbacks", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"teacher_feedbacks\"", "created_at": 1705873847.2841685}, "source.cdo_analytics.dashboard_pii.unit_groups": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "unit_groups", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.unit_groups", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "unit_groups"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "unit_groups", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"unit_groups\"", "created_at": 1705873847.284285}, "source.cdo_analytics.dashboard_pii.user_school_infos": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "user_school_infos", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.user_school_infos", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "user_school_infos"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "user_school_infos", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"user_school_infos\"", "created_at": 1705873847.2844014}, "source.cdo_analytics.dashboard_pii.users": {"database": "dashboard", "schema": "dashboard_production_pii", "name": "users", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "original_file_path": "models/staging/dashboard_pii/_dashboard_pii__sources.yml", "unique_id": "source.cdo_analytics.dashboard_pii.users", "fqn": ["cdo_analytics", "staging", "dashboard_pii", "dashboard_pii", "users"], "source_name": "dashboard_pii", "source_description": "", "loader": "", "identifier": "users", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production_pii\".\"users\"", "created_at": 1705873847.2845163}, "source.cdo_analytics.pegasus_pii.forms": {"database": "dashboard", "schema": "pegasus_pii", "name": "forms", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/pegasus_pii/_pegasus_pii__sources.yml", "original_file_path": "models/staging/pegasus_pii/_pegasus_pii__sources.yml", "unique_id": "source.cdo_analytics.pegasus_pii.forms", "fqn": ["cdo_analytics", "staging", "pegasus_pii", "pegasus_pii", "forms"], "source_name": "pegasus_pii", "source_description": "", "loader": "", "identifier": "forms", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"pegasus_pii\".\"forms\"", "created_at": 1705873847.2846327}, "source.cdo_analytics.pegasus_pii.form_geos": {"database": "dashboard", "schema": "pegasus_pii", "name": "form_geos", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/pegasus_pii/_pegasus_pii__sources.yml", "original_file_path": "models/staging/pegasus_pii/_pegasus_pii__sources.yml", "unique_id": "source.cdo_analytics.pegasus_pii.form_geos", "fqn": ["cdo_analytics", "staging", "pegasus_pii", "pegasus_pii", "form_geos"], "source_name": "pegasus_pii", "source_description": "", "loader": "", "identifier": "form_geos", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"pegasus_pii\".\"form_geos\"", "created_at": 1705873847.2847471}, "source.cdo_analytics.pegasus_pii.hoc_activity": {"database": "dashboard", "schema": "pegasus_pii", "name": "hoc_activity", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/pegasus_pii/_pegasus_pii__sources.yml", "original_file_path": "models/staging/pegasus_pii/_pegasus_pii__sources.yml", "unique_id": "source.cdo_analytics.pegasus_pii.hoc_activity", "fqn": ["cdo_analytics", "staging", "pegasus_pii", "pegasus_pii", "hoc_activity"], "source_name": "pegasus_pii", "source_description": "", "loader": "", "identifier": "hoc_activity", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"pegasus_pii\".\"hoc_activity\"", "created_at": 1705873847.2848613}, "source.cdo_analytics.legacy_pii.seed_international_partners": {"database": "dev", "schema": "analytics_pii", "name": "seed_international_partners", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/legacy_pii/_legacy_pii__sources.yml", "original_file_path": "models/staging/legacy_pii/_legacy_pii__sources.yml", "unique_id": "source.cdo_analytics.legacy_pii.seed_international_partners", "fqn": ["cdo_analytics", "staging", "legacy_pii", "legacy_pii", "seed_international_partners"], "source_name": "legacy_pii", "source_description": "", "loader": "", "identifier": "seed_international_partners", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"analytics_pii\".\"seed_international_partners\"", "created_at": 1705873847.2849758}, "source.cdo_analytics.dashboard.ap_cs_offerings": {"database": "dashboard", "schema": "dashboard_production", "name": "ap_cs_offerings", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.ap_cs_offerings", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "ap_cs_offerings"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "ap_cs_offerings", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"ap_cs_offerings\"", "created_at": 1705873847.2850914}, "source.cdo_analytics.dashboard.ap_school_codes": {"database": "dashboard", "schema": "dashboard_production", "name": "ap_school_codes", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.ap_school_codes", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "ap_school_codes"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "ap_school_codes", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"ap_school_codes\"", "created_at": 1705873847.2852044}, "source.cdo_analytics.dashboard.census_submissions": {"database": "dashboard", "schema": "dashboard_production", "name": "census_submissions", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.census_submissions", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "census_submissions"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "census_submissions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"census_submissions\"", "created_at": 1705873847.2853208}, "source.cdo_analytics.dashboard.contained_level_answers": {"database": "dashboard", "schema": "dashboard_production", "name": "contained_level_answers", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.contained_level_answers", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "contained_level_answers"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "contained_level_answers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"contained_level_answers\"", "created_at": 1705873847.2854414}, "source.cdo_analytics.dashboard.contained_levels": {"database": "dashboard", "schema": "dashboard_production", "name": "contained_levels", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.contained_levels", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "contained_levels"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "contained_levels", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"contained_levels\"", "created_at": 1705873847.2855563}, "source.cdo_analytics.dashboard.census_summaries": {"database": "dashboard", "schema": "dashboard_production", "name": "census_summaries", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.census_summaries", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "census_summaries"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "census_summaries", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"census_summaries\"", "created_at": 1705873847.285671}, "source.cdo_analytics.dashboard.course_scripts": {"database": "dashboard", "schema": "dashboard_production", "name": "course_scripts", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.course_scripts", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "course_scripts"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "course_scripts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"course_scripts\"", "created_at": 1705873847.2857835}, "source.cdo_analytics.dashboard.courses": {"database": "dashboard", "schema": "dashboard_production", "name": "courses", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.courses", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "courses"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "courses", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"courses\"", "created_at": 1705873847.2858963}, "source.cdo_analytics.dashboard.followers": {"database": "dashboard", "schema": "dashboard_production", "name": "followers", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.followers", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "followers"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "followers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"followers\"", "created_at": 1705873847.2860126}, "source.cdo_analytics.dashboard.foorm_forms": {"database": "dashboard", "schema": "dashboard_production", "name": "foorm_forms", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.foorm_forms", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "foorm_forms"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "foorm_forms", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"foorm_forms\"", "created_at": 1705873847.2861402}, "source.cdo_analytics.dashboard.foorm_libraries": {"database": "dashboard", "schema": "dashboard_production", "name": "foorm_libraries", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.foorm_libraries", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "foorm_libraries"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "foorm_libraries", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"foorm_libraries\"", "created_at": 1705873847.2862532}, "source.cdo_analytics.dashboard.foorm_library_questions": {"database": "dashboard", "schema": "dashboard_production", "name": "foorm_library_questions", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.foorm_library_questions", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "foorm_library_questions"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "foorm_library_questions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"foorm_library_questions\"", "created_at": 1705873847.2863698}, "source.cdo_analytics.dashboard.foorm_simple_survey_forms": {"database": "dashboard", "schema": "dashboard_production", "name": "foorm_simple_survey_forms", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.foorm_simple_survey_forms", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "foorm_simple_survey_forms"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "foorm_simple_survey_forms", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"foorm_simple_survey_forms\"", "created_at": 1705873847.2864857}, "source.cdo_analytics.dashboard.foorm_simple_survey_submissions": {"database": "dashboard", "schema": "dashboard_production", "name": "foorm_simple_survey_submissions", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.foorm_simple_survey_submissions", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "foorm_simple_survey_submissions"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "foorm_simple_survey_submissions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"foorm_simple_survey_submissions\"", "created_at": 1705873847.2866035}, "source.cdo_analytics.dashboard.foorm_submissions": {"database": "dashboard", "schema": "dashboard_production", "name": "foorm_submissions", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.foorm_submissions", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "foorm_submissions"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "foorm_submissions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"foorm_submissions\"", "created_at": 1705873847.2867215}, "source.cdo_analytics.dashboard.level_concept_difficulties": {"database": "dashboard", "schema": "dashboard_production", "name": "level_concept_difficulties", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.level_concept_difficulties", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "level_concept_difficulties"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "level_concept_difficulties", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"level_concept_difficulties\"", "created_at": 1705873847.2868657}, "source.cdo_analytics.dashboard.level_sources": {"database": "dashboard", "schema": "dashboard_production", "name": "level_sources", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.level_sources", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "level_sources"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "level_sources", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"level_sources\"", "created_at": 1705873847.2869818}, "source.cdo_analytics.dashboard.level_sources_multi_types": {"database": "dashboard", "schema": "dashboard_production", "name": "level_sources_multi_types", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.level_sources_multi_types", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "level_sources_multi_types"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "level_sources_multi_types", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"level_sources_multi_types\"", "created_at": 1705873847.287097}, "source.cdo_analytics.dashboard.levels": {"database": "dashboard", "schema": "dashboard_production", "name": "levels", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.levels", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "levels"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "levels", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"levels\"", "created_at": 1705873847.287215}, "source.cdo_analytics.dashboard.levels_script_levels": {"database": "dashboard", "schema": "dashboard_production", "name": "levels_script_levels", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.levels_script_levels", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "levels_script_levels"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "levels_script_levels", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"levels_script_levels\"", "created_at": 1705873847.2873468}, "source.cdo_analytics.dashboard.parent_levels_child_levels": {"database": "dashboard", "schema": "dashboard_production", "name": "parent_levels_child_levels", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.parent_levels_child_levels", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "parent_levels_child_levels"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "parent_levels_child_levels", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"parent_levels_child_levels\"", "created_at": 1705873847.2874637}, "source.cdo_analytics.dashboard.pd_applications": {"database": "dashboard", "schema": "dashboard_production", "name": "pd_applications", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.pd_applications", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "pd_applications"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "pd_applications", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"pd_applications\"", "created_at": 1705873847.2875786}, "source.cdo_analytics.dashboard.pd_attendances": {"database": "dashboard", "schema": "dashboard_production", "name": "pd_attendances", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.pd_attendances", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "pd_attendances"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "pd_attendances", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"pd_attendances\"", "created_at": 1705873847.2876945}, "source.cdo_analytics.dashboard.pd_enrollments": {"database": "dashboard", "schema": "dashboard_production", "name": "pd_enrollments", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.pd_enrollments", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "pd_enrollments"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "pd_enrollments", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"pd_enrollments\"", "created_at": 1705873847.2878103}, "source.cdo_analytics.dashboard.pd_misc_surveys": {"database": "dashboard", "schema": "dashboard_production", "name": "pd_misc_surveys", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.pd_misc_surveys", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "pd_misc_surveys"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "pd_misc_surveys", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"pd_misc_surveys\"", "created_at": 1705873847.2879255}, "source.cdo_analytics.dashboard.pd_post_course_surveys": {"database": "dashboard", "schema": "dashboard_production", "name": "pd_post_course_surveys", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.pd_post_course_surveys", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "pd_post_course_surveys"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "pd_post_course_surveys", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"pd_post_course_surveys\"", "created_at": 1705873847.2880404}, "source.cdo_analytics.dashboard.pd_pre_workshop_surveys": {"database": "dashboard", "schema": "dashboard_production", "name": "pd_pre_workshop_surveys", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.pd_pre_workshop_surveys", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "pd_pre_workshop_surveys"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "pd_pre_workshop_surveys", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"pd_pre_workshop_surveys\"", "created_at": 1705873847.2881567}, "source.cdo_analytics.dashboard.pd_regional_partner_contacts": {"database": "dashboard", "schema": "dashboard_production", "name": "pd_regional_partner_contacts", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.pd_regional_partner_contacts", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "pd_regional_partner_contacts"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "pd_regional_partner_contacts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"pd_regional_partner_contacts\"", "created_at": 1705873847.28827}, "source.cdo_analytics.dashboard.pd_regional_partner_mappings": {"database": "dashboard", "schema": "dashboard_production", "name": "pd_regional_partner_mappings", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.pd_regional_partner_mappings", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "pd_regional_partner_mappings"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "pd_regional_partner_mappings", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"pd_regional_partner_mappings\"", "created_at": 1705873847.2883823}, "source.cdo_analytics.dashboard.pd_regional_partner_mini_contacts": {"database": "dashboard", "schema": "dashboard_production", "name": "pd_regional_partner_mini_contacts", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.pd_regional_partner_mini_contacts", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "pd_regional_partner_mini_contacts"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "pd_regional_partner_mini_contacts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"pd_regional_partner_mini_contacts\"", "created_at": 1705873847.2885094}, "source.cdo_analytics.dashboard.pd_regional_partner_program_registrations": {"database": "dashboard", "schema": "dashboard_production", "name": "pd_regional_partner_program_registrations", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.pd_regional_partner_program_registrations", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "pd_regional_partner_program_registrations"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "pd_regional_partner_program_registrations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"pd_regional_partner_program_registrations\"", "created_at": 1705873847.2886374}, "source.cdo_analytics.dashboard.pd_scholarship_infos": {"database": "dashboard", "schema": "dashboard_production", "name": "pd_scholarship_infos", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.pd_scholarship_infos", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "pd_scholarship_infos"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "pd_scholarship_infos", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"pd_scholarship_infos\"", "created_at": 1705873847.2887568}, "source.cdo_analytics.dashboard.pd_sessions": {"database": "dashboard", "schema": "dashboard_production", "name": "pd_sessions", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.pd_sessions", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "pd_sessions"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "pd_sessions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"pd_sessions\"", "created_at": 1705873847.2888768}, "source.cdo_analytics.dashboard.pd_survey_questions": {"database": "dashboard", "schema": "dashboard_production", "name": "pd_survey_questions", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.pd_survey_questions", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "pd_survey_questions"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "pd_survey_questions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"pd_survey_questions\"", "created_at": 1705873847.288997}, "source.cdo_analytics.dashboard.pd_teacher_applications": {"database": "dashboard", "schema": "dashboard_production", "name": "pd_teacher_applications", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.pd_teacher_applications", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "pd_teacher_applications"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "pd_teacher_applications", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"pd_teacher_applications\"", "created_at": 1705873847.2891283}, "source.cdo_analytics.dashboard.pd_teachercon_surveys": {"database": "dashboard", "schema": "dashboard_production", "name": "pd_teachercon_surveys", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.pd_teachercon_surveys", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "pd_teachercon_surveys"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "pd_teachercon_surveys", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"pd_teachercon_surveys\"", "created_at": 1705873847.2892444}, "source.cdo_analytics.dashboard.pd_teachercon1819_registrations": {"database": "dashboard", "schema": "dashboard_production", "name": "pd_teachercon1819_registrations", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.pd_teachercon1819_registrations", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "pd_teachercon1819_registrations"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "pd_teachercon1819_registrations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"pd_teachercon1819_registrations\"", "created_at": 1705873847.2893584}, "source.cdo_analytics.dashboard.pd_workshop_daily_surveys": {"database": "dashboard", "schema": "dashboard_production", "name": "pd_workshop_daily_surveys", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.pd_workshop_daily_surveys", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "pd_workshop_daily_surveys"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "pd_workshop_daily_surveys", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"pd_workshop_daily_surveys\"", "created_at": 1705873847.289472}, "source.cdo_analytics.dashboard.pd_workshop_facilitator_daily_surveys": {"database": "dashboard", "schema": "dashboard_production", "name": "pd_workshop_facilitator_daily_surveys", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.pd_workshop_facilitator_daily_surveys", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "pd_workshop_facilitator_daily_surveys"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "pd_workshop_facilitator_daily_surveys", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"pd_workshop_facilitator_daily_surveys\"", "created_at": 1705873847.2895875}, "source.cdo_analytics.dashboard.pd_workshop_survey_foorm_submissions": {"database": "dashboard", "schema": "dashboard_production", "name": "pd_workshop_survey_foorm_submissions", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.pd_workshop_survey_foorm_submissions", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "pd_workshop_survey_foorm_submissions"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "pd_workshop_survey_foorm_submissions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"pd_workshop_survey_foorm_submissions\"", "created_at": 1705873847.2897031}, "source.cdo_analytics.dashboard.pd_workshop_surveys": {"database": "dashboard", "schema": "dashboard_production", "name": "pd_workshop_surveys", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.pd_workshop_surveys", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "pd_workshop_surveys"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "pd_workshop_surveys", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"pd_workshop_surveys\"", "created_at": 1705873847.2898164}, "source.cdo_analytics.dashboard.pd_workshops": {"database": "dashboard", "schema": "dashboard_production", "name": "pd_workshops", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.pd_workshops", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "pd_workshops"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "pd_workshops", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"pd_workshops\"", "created_at": 1705873847.2899294}, "source.cdo_analytics.dashboard.pd_workshops_facilitators": {"database": "dashboard", "schema": "dashboard_production", "name": "pd_workshops_facilitators", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.pd_workshops_facilitators", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "pd_workshops_facilitators"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "pd_workshops_facilitators", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"pd_workshops_facilitators\"", "created_at": 1705873847.2900424}, "source.cdo_analytics.dashboard.peer_reviews": {"database": "dashboard", "schema": "dashboard_production", "name": "peer_reviews", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.peer_reviews", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "peer_reviews"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "peer_reviews", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"peer_reviews\"", "created_at": 1705873847.2901678}, "source.cdo_analytics.dashboard.projects": {"database": "dashboard", "schema": "dashboard_production", "name": "projects", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.projects", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "projects"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "projects", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"projects\"", "created_at": 1705873847.2902825}, "source.cdo_analytics.dashboard.regional_partners": {"database": "dashboard", "schema": "dashboard_production", "name": "regional_partners", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.regional_partners", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "regional_partners"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "regional_partners", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"regional_partners\"", "created_at": 1705873847.2903984}, "source.cdo_analytics.dashboard.regional_partners_school_districts": {"database": "dashboard", "schema": "dashboard_production", "name": "regional_partners_school_districts", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.regional_partners_school_districts", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "regional_partners_school_districts"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "regional_partners_school_districts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"regional_partners_school_districts\"", "created_at": 1705873847.2905135}, "source.cdo_analytics.dashboard.school_districts": {"database": "dashboard", "schema": "dashboard_production", "name": "school_districts", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.school_districts", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "school_districts"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "school_districts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"school_districts\"", "created_at": 1705873847.290627}, "source.cdo_analytics.dashboard.school_infos": {"database": "dashboard", "schema": "dashboard_production", "name": "school_infos", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.school_infos", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "school_infos"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "school_infos", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"school_infos\"", "created_at": 1705873847.2907395}, "source.cdo_analytics.dashboard.school_stats_by_years": {"database": "dashboard", "schema": "dashboard_production", "name": "school_stats_by_years", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.school_stats_by_years", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "school_stats_by_years"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "school_stats_by_years", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"school_stats_by_years\"", "created_at": 1705873847.2908556}, "source.cdo_analytics.dashboard.schools": {"database": "dashboard", "schema": "dashboard_production", "name": "schools", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.schools", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "schools"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "schools", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"schools\"", "created_at": 1705873847.2909734}, "source.cdo_analytics.dashboard.script_levels": {"database": "dashboard", "schema": "dashboard_production", "name": "script_levels", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.script_levels", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "script_levels"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "script_levels", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"script_levels\"", "created_at": 1705873847.2910864}, "source.cdo_analytics.dashboard.scripts": {"database": "dashboard", "schema": "dashboard_production", "name": "scripts", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.scripts", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "scripts"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "scripts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"scripts\"", "created_at": 1705873847.2912016}, "source.cdo_analytics.dashboard.sections": {"database": "dashboard", "schema": "dashboard_production", "name": "sections", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.sections", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "sections"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "sections", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"sections\"", "created_at": 1705873847.2913284}, "source.cdo_analytics.dashboard.sign_ins": {"database": "dashboard", "schema": "dashboard_production", "name": "sign_ins", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.sign_ins", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "sign_ins"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "sign_ins", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"sign_ins\"", "created_at": 1705873847.291447}, "source.cdo_analytics.dashboard.stages": {"database": "dashboard", "schema": "dashboard_production", "name": "stages", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.stages", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "stages"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "stages", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"stages\"", "created_at": 1705873847.2915637}, "source.cdo_analytics.dashboard.studio_people": {"database": "dashboard", "schema": "dashboard_production", "name": "studio_people", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.studio_people", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "studio_people"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "studio_people", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"studio_people\"", "created_at": 1705873847.291705}, "source.cdo_analytics.dashboard.survey_results": {"database": "dashboard", "schema": "dashboard_production", "name": "survey_results", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.survey_results", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "survey_results"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "survey_results", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"survey_results\"", "created_at": 1705873847.29182}, "source.cdo_analytics.dashboard.teacher_feedbacks": {"database": "dashboard", "schema": "dashboard_production", "name": "teacher_feedbacks", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.teacher_feedbacks", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "teacher_feedbacks"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "teacher_feedbacks", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"teacher_feedbacks\"", "created_at": 1705873847.2919352}, "source.cdo_analytics.dashboard.unit_groups": {"database": "dashboard", "schema": "dashboard_production", "name": "unit_groups", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.unit_groups", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "unit_groups"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "unit_groups", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"unit_groups\"", "created_at": 1705873847.292052}, "source.cdo_analytics.dashboard.user_proficiencies": {"database": "dashboard", "schema": "dashboard_production", "name": "user_proficiencies", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.user_proficiencies", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "user_proficiencies"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "user_proficiencies", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"user_proficiencies\"", "created_at": 1705873847.2921689}, "source.cdo_analytics.dashboard.user_geos": {"database": "dashboard", "schema": "dashboard_production", "name": "user_geos", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.user_geos", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "user_geos"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "user_geos", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"user_geos\"", "created_at": 1705873847.2922878}, "source.cdo_analytics.dashboard.user_levels": {"database": "dashboard", "schema": "dashboard_production", "name": "user_levels", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.user_levels", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "user_levels"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "user_levels", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"user_levels\"", "created_at": 1705873847.292403}, "source.cdo_analytics.dashboard.user_project_storage_ids": {"database": "dashboard", "schema": "dashboard_production", "name": "user_project_storage_ids", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.user_project_storage_ids", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "user_project_storage_ids"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "user_project_storage_ids", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"user_project_storage_ids\"", "created_at": 1705873847.292518}, "source.cdo_analytics.dashboard.user_scripts": {"database": "dashboard", "schema": "dashboard_production", "name": "user_scripts", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.user_scripts", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "user_scripts"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "user_scripts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"user_scripts\"", "created_at": 1705873847.292634}, "source.cdo_analytics.dashboard.users": {"database": "dashboard", "schema": "dashboard_production", "name": "users", "resource_type": "source", "package_name": "cdo_analytics", "path": "models/staging/dashboard/_dashboard__sources.yml", "original_file_path": "models/staging/dashboard/_dashboard__sources.yml", "unique_id": "source.cdo_analytics.dashboard.users", "fqn": ["cdo_analytics", "staging", "dashboard", "dashboard", "users"], "source_name": "dashboard", "source_description": "", "loader": "", "identifier": "users", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dashboard\".\"dashboard_production\".\"users\"", "created_at": 1705873847.2927492}}, "macros": {"macro.dbt_redshift.redshift__get_relations": {"name": "redshift__get_relations", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_redshift.redshift__get_relations", "macro_sql": "{% macro redshift__get_relations() -%}\n\n{%- call statement('relations', fetch_result=True) -%}\n\nwith\n    relation as (\n        select\n            pg_class.oid as relation_id,\n            pg_class.relname as relation_name,\n            pg_class.relnamespace as schema_id,\n            pg_namespace.nspname as schema_name,\n            pg_class.relkind as relation_type\n        from pg_class\n        join pg_namespace\n          on pg_class.relnamespace = pg_namespace.oid\n        where pg_namespace.nspname != 'information_schema'\n          and pg_namespace.nspname not like 'pg\\_%'\n    ),\n    dependency as (\n        select distinct\n            coalesce(pg_rewrite.ev_class, pg_depend.objid) as dep_relation_id,\n            pg_depend.refobjid as ref_relation_id,\n            pg_depend.refclassid as ref_class_id\n        from pg_depend\n        left join pg_rewrite\n          on pg_depend.objid = pg_rewrite.oid\n        where coalesce(pg_rewrite.ev_class, pg_depend.objid) != pg_depend.refobjid\n    )\n\nselect distinct\n    dep.schema_name as dependent_schema,\n    dep.relation_name as dependent_name,\n    ref.schema_name as referenced_schema,\n    ref.relation_name as referenced_name\nfrom dependency\njoin relation ref\n    on dependency.ref_relation_id = ref.relation_id\njoin relation dep\n    on dependency.dep_relation_id = dep.relation_id\n\n{%- endcall -%}\n\n{{ return(load_result('relations').table) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.8944378, "supported_languages": null}, "macro.dbt_redshift.redshift__get_base_catalog": {"name": "redshift__get_base_catalog", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_redshift.redshift__get_base_catalog", "macro_sql": "{% macro redshift__get_base_catalog(information_schema, schemas) -%}\n  {%- call statement('base_catalog', fetch_result=True) -%}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    with late_binding as (\n      select\n        '{{ database }}'::varchar as table_database,\n        table_schema,\n        table_name,\n        'LATE BINDING VIEW'::varchar as table_type,\n        null::text as table_comment,\n\n        column_name,\n        column_index,\n        column_type,\n        null::text as column_comment\n      from pg_get_late_binding_view_cols()\n        cols(table_schema name, table_name name, column_name name,\n             column_type varchar,\n             column_index int)\n        order by \"column_index\"\n    ),\n\n    materialized_views as (\n        select\n            table_schema  as nspname,\n            table_name    as relname\n        from information_schema.views\n        where (\n            {%- for schema in schemas -%}\n                upper(table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n            {%- endfor -%}\n        )\n        and table_catalog = '{{ database }}'\n        and view_definition ilike '%create materialized view%'\n    ),\n\n    early_binding as (\n        select\n            '{{ database }}'::varchar as table_database,\n            sch.nspname as table_schema,\n            tbl.relname as table_name,\n            case\n                when tbl.relkind = 'v' and materialized_views.relname is not null then 'MATERIALIZED VIEW'\n                when tbl.relkind = 'v' then 'VIEW'\n                else 'BASE TABLE'\n            end as table_type,\n            tbl_desc.description as table_comment,\n            col.attname as column_name,\n            col.attnum as column_index,\n            pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n            col_desc.description as column_comment\n\n        from pg_catalog.pg_namespace sch\n        join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n        join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n        left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n        left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n        left outer join materialized_views on (materialized_views.nspname = sch.nspname and materialized_views.relname = tbl.relname)\n        where (\n            {%- for schema in schemas -%}\n              upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n            {%- endfor -%}\n          )\n            and tbl.relkind in ('r', 'v', 'f', 'p')\n            and col.attnum > 0\n            and not col.attisdropped\n    ),\n\n    table_owners as (\n\n        select\n            '{{ database }}'::varchar as table_database,\n            schemaname as table_schema,\n            tablename as table_name,\n            tableowner as table_owner\n\n        from pg_tables\n\n        union all\n\n        select\n            '{{ database }}'::varchar as table_database,\n            schemaname as table_schema,\n            viewname as table_name,\n            viewowner as table_owner\n\n        from pg_views\n\n    ),\n\n    unioned as (\n\n        select *\n        from early_binding\n\n        union all\n\n        select *\n        from late_binding\n\n    )\n\n    select *,\n        table_database || '.' || table_schema || '.' || table_name as table_id\n\n    from unioned\n    join table_owners using (table_database, table_schema, table_name)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n\n    order by \"column_index\"\n  {%- endcall -%}\n\n  {{ return(load_result('base_catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9024806, "supported_languages": null}, "macro.dbt_redshift.redshift__get_extended_catalog": {"name": "redshift__get_extended_catalog", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_redshift.redshift__get_extended_catalog", "macro_sql": "{% macro redshift__get_extended_catalog(schemas) %}\n  {%- call statement('extended_catalog', fetch_result=True) -%}\n\n    select\n        \"database\" || '.' || \"schema\" || '.' || \"table\" as table_id,\n\n        'Encoded'::text as \"stats:encoded:label\",\n        encoded as \"stats:encoded:value\",\n        'Indicates whether any column in the table has compression encoding defined.'::text as \"stats:encoded:description\",\n        true as \"stats:encoded:include\",\n\n        'Dist Style' as \"stats:diststyle:label\",\n        diststyle as \"stats:diststyle:value\",\n        'Distribution style or distribution key column, if key distribution is defined.'::text as \"stats:diststyle:description\",\n        true as \"stats:diststyle:include\",\n\n        'Sort Key 1' as \"stats:sortkey1:label\",\n        -- handle 0xFF byte in response for interleaved sort styles\n        case\n            when sortkey1 like 'INTERLEAVED%' then 'INTERLEAVED'::text\n            else sortkey1\n        end as \"stats:sortkey1:value\",\n        'First column in the sort key.'::text as \"stats:sortkey1:description\",\n        (sortkey1 is not null) as \"stats:sortkey1:include\",\n\n        'Max Varchar' as \"stats:max_varchar:label\",\n        max_varchar as \"stats:max_varchar:value\",\n        'Size of the largest column that uses a VARCHAR data type.'::text as \"stats:max_varchar:description\",\n        true as \"stats:max_varchar:include\",\n\n        -- exclude this, as the data is strangely returned with null-byte characters\n        'Sort Key 1 Encoding' as \"stats:sortkey1_enc:label\",\n        sortkey1_enc as \"stats:sortkey1_enc:value\",\n        'Compression encoding of the first column in the sort key.' as \"stats:sortkey1_enc:description\",\n        false as \"stats:sortkey1_enc:include\",\n\n        '# Sort Keys' as \"stats:sortkey_num:label\",\n        sortkey_num as \"stats:sortkey_num:value\",\n        'Number of columns defined as sort keys.' as \"stats:sortkey_num:description\",\n        (sortkey_num > 0) as \"stats:sortkey_num:include\",\n\n        'Approximate Size' as \"stats:size:label\",\n        size * 1000000 as \"stats:size:value\",\n        'Approximate size of the table, calculated from a count of 1MB blocks'::text as \"stats:size:description\",\n        true as \"stats:size:include\",\n\n        'Disk Utilization' as \"stats:pct_used:label\",\n        pct_used / 100.0 as \"stats:pct_used:value\",\n        'Percent of available space that is used by the table.'::text as \"stats:pct_used:description\",\n        true as \"stats:pct_used:include\",\n\n        'Unsorted %' as \"stats:unsorted:label\",\n        unsorted / 100.0 as \"stats:unsorted:value\",\n        'Percent of unsorted rows in the table.'::text as \"stats:unsorted:description\",\n        (unsorted is not null) as \"stats:unsorted:include\",\n\n        'Stats Off' as \"stats:stats_off:label\",\n        stats_off as \"stats:stats_off:value\",\n        'Number that indicates how stale the table statistics are; 0 is current, 100 is out of date.'::text as \"stats:stats_off:description\",\n        true as \"stats:stats_off:include\",\n\n        'Approximate Row Count' as \"stats:rows:label\",\n        tbl_rows as \"stats:rows:value\",\n        'Approximate number of rows in the table. This value includes rows marked for deletion, but not yet vacuumed.'::text as \"stats:rows:description\",\n        true as \"stats:rows:include\",\n\n        'Sort Key Skew' as \"stats:skew_sortkey1:label\",\n        skew_sortkey1 as \"stats:skew_sortkey1:value\",\n        'Ratio of the size of the largest non-sort key column to the size of the first column of the sort key.'::text as \"stats:skew_sortkey1:description\",\n        (skew_sortkey1 is not null) as \"stats:skew_sortkey1:include\",\n\n        'Skew Rows' as \"stats:skew_rows:label\",\n        skew_rows as \"stats:skew_rows:value\",\n        'Ratio of the number of rows in the slice with the most rows to the number of rows in the slice with the fewest rows.'::text as \"stats:skew_rows:description\",\n        (skew_rows is not null) as \"stats:skew_rows:include\"\n\n    from svv_table_info\n    where (\n        {%- for schema in schemas -%}\n          upper(schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n\n  {%- endcall -%}\n\n  {{ return(load_result('extended_catalog').table) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9034085, "supported_languages": null}, "macro.dbt_redshift.redshift__can_select_from": {"name": "redshift__can_select_from", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_redshift.redshift__can_select_from", "macro_sql": "{% macro redshift__can_select_from(table_name) %}\n\n  {%- call statement('has_table_privilege', fetch_result=True) -%}\n\n    select has_table_privilege(current_user, '{{ table_name }}', 'SELECT') as can_select\n\n  {%- endcall -%}\n\n  {% set can_select = load_result('has_table_privilege').table[0]['can_select'] %}\n  {{ return(can_select) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.90398, "supported_languages": null}, "macro.dbt_redshift.redshift__no_svv_table_info_warning": {"name": "redshift__no_svv_table_info_warning", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_redshift.redshift__no_svv_table_info_warning", "macro_sql": "{% macro redshift__no_svv_table_info_warning() %}\n\n    {% set msg %}\n\n    Warning: The database user \"{{ target.user }}\" has insufficient permissions to\n    query the \"svv_table_info\" table. Please grant SELECT permissions on this table\n    to the \"{{ target.user }}\" user to fetch extended table details from Redshift.\n\n    {% endset %}\n\n    {{ log(msg, info=True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9044018, "supported_languages": null}, "macro.dbt_redshift.redshift__get_catalog": {"name": "redshift__get_catalog", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_redshift.redshift__get_catalog", "macro_sql": "{% macro redshift__get_catalog(information_schema, schemas) %}\n\n    {#-- Compute a left-outer join in memory. Some Redshift queries are\n      -- leader-only, and cannot be joined to other compute-based queries #}\n\n    {% set catalog = redshift__get_base_catalog(information_schema, schemas) %}\n\n    {% set select_extended =  redshift__can_select_from('svv_table_info') %}\n    {% if select_extended %}\n        {% set extended_catalog = redshift__get_extended_catalog(schemas) %}\n        {% set catalog = catalog.join(extended_catalog, 'table_id') %}\n    {% else %}\n        {{ redshift__no_svv_table_info_warning() }}\n    {% endif %}\n\n    {{ return(catalog.exclude(['table_id'])) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_base_catalog", "macro.dbt_redshift.redshift__can_select_from", "macro.dbt_redshift.redshift__get_extended_catalog", "macro.dbt_redshift.redshift__no_svv_table_info_warning"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.905324, "supported_languages": null}, "macro.dbt_redshift.redshift__current_timestamp": {"name": "redshift__current_timestamp", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_redshift.redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() -%}\n    getdate()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9056976, "supported_languages": null}, "macro.dbt_redshift.redshift__snapshot_get_time": {"name": "redshift__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_redshift.redshift__snapshot_get_time", "macro_sql": "{% macro redshift__snapshot_get_time() -%}\n    {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9058719, "supported_languages": null}, "macro.dbt_redshift.redshift__snapshot_string_as_time": {"name": "redshift__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_redshift.redshift__snapshot_string_as_time", "macro_sql": "{% macro redshift__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9061804, "supported_languages": null}, "macro.dbt_redshift.redshift__current_timestamp_backcompat": {"name": "redshift__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_redshift.redshift__current_timestamp_backcompat", "macro_sql": "{% macro redshift__current_timestamp_backcompat() -%}\n    getdate()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9063091, "supported_languages": null}, "macro.dbt_redshift.redshift__current_timestamp_in_utc_backcompat": {"name": "redshift__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_redshift.redshift__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro redshift__current_timestamp_in_utc_backcompat() -%}\n    getdate()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9064338, "supported_languages": null}, "macro.dbt_redshift.dist": {"name": "dist", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.dist", "macro_sql": "{% macro dist(dist) %}\n  {%- if dist is not none -%}\n      {%- set dist = dist.strip().lower() -%}\n\n      {%- if dist in ['all', 'even'] -%}\n        diststyle {{ dist }}\n      {%- elif dist == \"auto\" -%}\n      {%- else -%}\n        diststyle key distkey ({{ dist }})\n      {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.921962, "supported_languages": null}, "macro.dbt_redshift.sort": {"name": "sort", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.sort", "macro_sql": "{% macro sort(sort_type, sort) %}\n  {%- if sort is not none %}\n      {{ sort_type | default('compound', boolean=true) }} sortkey(\n      {%- if sort is string -%}\n        {%- set sort = [sort] -%}\n      {%- endif -%}\n      {%- for item in sort -%}\n        {{ item }}\n        {%- if not loop.last -%},{%- endif -%}\n      {%- endfor -%}\n      )\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9227407, "supported_languages": null}, "macro.dbt_redshift.redshift__create_table_as": {"name": "redshift__create_table_as", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__create_table_as", "macro_sql": "{% macro redshift__create_table_as(temporary, relation, sql) -%}\n\n  {%- set _dist = config.get('dist') -%}\n  {%- set _sort_type = config.get(\n          'sort_type',\n          validator=validation.any['compound', 'interleaved']) -%}\n  {%- set _sort = config.get(\n          'sort',\n          validator=validation.any[list, basestring]) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {%- set backup = config.get('backup') -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n\n  create {% if temporary -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n    {{ get_table_columns_and_constraints() }}\n    {{ get_assert_columns_equivalent(sql) }}\n    {%- set sql = get_select_subquery(sql) %}\n    {% if backup == false -%}backup no{%- endif %}\n    {{ dist(_dist) }}\n    {{ sort(_sort_type, _sort) }}\n  ;\n\n  insert into {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n    (\n      {{ sql }}\n    )\n  ;\n\n  {%- else %}\n\n  create {% if temporary -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n    {% if backup == false -%}backup no{%- endif %}\n    {{ dist(_dist) }}\n    {{ sort(_sort_type, _sort) }}\n  as (\n    {{ sql }}\n  );\n\n  {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt_redshift.dist", "macro.dbt_redshift.sort"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.925497, "supported_languages": null}, "macro.dbt_redshift.redshift__create_view_as": {"name": "redshift__create_view_as", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__create_view_as", "macro_sql": "{% macro redshift__create_view_as(relation, sql) -%}\n  {%- set binding = config.get('bind', default=True) -%}\n\n  {% set bind_qualifier = '' if binding else 'with no schema binding' %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create view {{ relation }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %} as (\n    {{ sql }}\n  ) {{ bind_qualifier }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9264984, "supported_languages": null}, "macro.dbt_redshift.redshift__create_schema": {"name": "redshift__create_schema", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__create_schema", "macro_sql": "{% macro redshift__create_schema(relation) -%}\n  {{ postgres__create_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9267197, "supported_languages": null}, "macro.dbt_redshift.redshift__drop_schema": {"name": "redshift__drop_schema", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__drop_schema", "macro_sql": "{% macro redshift__drop_schema(relation) -%}\n  {{ postgres__drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.92692, "supported_languages": null}, "macro.dbt_redshift.redshift__get_columns_in_relation": {"name": "redshift__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__get_columns_in_relation", "macro_sql": "{% macro redshift__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      with bound_views as (\n        select\n          ordinal_position,\n          table_schema,\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n        from information_schema.\"columns\"\n        where table_name = '{{ relation.identifier }}'\n    ),\n\n    unbound_views as (\n      select\n        ordinal_position,\n        view_schema,\n        col_name,\n        case\n          when col_type ilike 'character varying%' then\n            'character varying'\n          when col_type ilike 'numeric%' then 'numeric'\n          else col_type\n        end as col_type,\n        case\n          when col_type like 'character%'\n          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int\n          else null\n        end as character_maximum_length,\n        case\n          when col_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),\n            '')::int\n          else null\n        end as numeric_precision,\n        case\n          when col_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),\n            '')::int\n          else null\n        end as numeric_scale\n\n      from pg_get_late_binding_view_cols()\n      cols(view_schema name, view_name name, col_name name,\n           col_type varchar, ordinal_position int)\n      where view_name = '{{ relation.identifier }}'\n    ),\n\n    external_views as (\n      select\n        columnnum,\n        schemaname,\n        columnname,\n        case\n          when external_type ilike 'character varying%' or external_type ilike 'varchar%'\n          then 'character varying'\n          when external_type ilike 'numeric%' then 'numeric'\n          else external_type\n        end as external_type,\n        case\n          when external_type like 'character%' or external_type like 'varchar%'\n          then nullif(\n            REGEXP_SUBSTR(external_type, '[0-9]+'),\n            '')::int\n          else null\n        end as character_maximum_length,\n        case\n          when external_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),\n            '')::int\n          else null\n        end as numeric_precision,\n        case\n          when external_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),\n            '')::int\n          else null\n        end as numeric_scale\n      from\n        pg_catalog.svv_external_columns\n      where\n        schemaname = '{{ relation.schema }}'\n        and tablename = '{{ relation.identifier }}'\n\n    ),\n\n    unioned as (\n      select * from bound_views\n      union all\n      select * from unbound_views\n      union all\n      select * from external_views\n    )\n\n    select\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n    from unioned\n    {% if relation.schema %}\n    where table_schema = '{{ relation.schema }}'\n    {% endif %}\n    order by ordinal_position\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9279604, "supported_languages": null}, "macro.dbt_redshift.redshift__list_relations_without_caching": {"name": "redshift__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__list_relations_without_caching", "macro_sql": "{% macro redshift__list_relations_without_caching(schema_relation) %}\n\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n        table_catalog as database,\n        table_name as name,\n        table_schema as schema,\n        'table' as type\n    from information_schema.tables\n    where table_schema ilike '{{ schema_relation.schema }}'\n    and table_type = 'BASE TABLE'\n    union all\n    select\n      table_catalog as database,\n      table_name as name,\n      table_schema as schema,\n      case\n        when view_definition ilike '%create materialized view%'\n          then 'materialized_view'\n        else 'view'\n      end as type\n    from information_schema.views\n    where table_schema ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9285054, "supported_languages": null}, "macro.dbt_redshift.redshift__information_schema_name": {"name": "redshift__information_schema_name", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__information_schema_name", "macro_sql": "{% macro redshift__information_schema_name(database) -%}\n  {{ return(postgres__information_schema_name(database)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.928734, "supported_languages": null}, "macro.dbt_redshift.redshift__list_schemas": {"name": "redshift__list_schemas", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__list_schemas", "macro_sql": "{% macro redshift__list_schemas(database) -%}\n  {{ return(postgres__list_schemas(database)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.928955, "supported_languages": null}, "macro.dbt_redshift.redshift__check_schema_exists": {"name": "redshift__check_schema_exists", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__check_schema_exists", "macro_sql": "{% macro redshift__check_schema_exists(information_schema, schema) -%}\n  {{ return(postgres__check_schema_exists(information_schema, schema)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9292073, "supported_languages": null}, "macro.dbt_redshift.redshift__persist_docs": {"name": "redshift__persist_docs", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__persist_docs", "macro_sql": "{% macro redshift__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {# Override: do not set column comments for LBVs #}\n  {% set is_lbv = config.get('materialized') == 'view' and config.get('bind') == false %}\n  {% if for_columns and config.persist_column_docs() and model.columns and not is_lbv %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9302354, "supported_languages": null}, "macro.dbt_redshift.redshift__alter_relation_comment": {"name": "redshift__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__alter_relation_comment", "macro_sql": "{% macro redshift__alter_relation_comment(relation, comment) %}\n  {% do return(postgres__alter_relation_comment(relation, comment)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9305246, "supported_languages": null}, "macro.dbt_redshift.redshift__alter_column_comment": {"name": "redshift__alter_column_comment", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__alter_column_comment", "macro_sql": "{% macro redshift__alter_column_comment(relation, column_dict) %}\n  {% do return(postgres__alter_column_comment(relation, column_dict)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.930797, "supported_languages": null}, "macro.dbt_redshift.redshift__alter_relation_add_remove_columns": {"name": "redshift__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__alter_relation_add_remove_columns", "macro_sql": "{% macro redshift__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% for column in add_columns %}\n      {% set sql -%}\n          alter {{ relation.type }} {{ relation }} add column {{ column.name }} {{ column.data_type }}\n      {% endset %}\n      {% do run_query(sql) %}\n    {% endfor %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% for column in remove_columns %}\n      {% set sql -%}\n          alter {{ relation.type }} {{ relation }} drop column {{ column.name }}\n      {% endset %}\n      {% do run_query(sql) %}\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9319398, "supported_languages": null}, "macro.dbt_redshift.redshift__drop_view": {"name": "redshift__drop_view", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_redshift.redshift__drop_view", "macro_sql": "{%- macro redshift__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.932205, "supported_languages": null}, "macro.dbt_redshift.redshift__get_rename_view_sql": {"name": "redshift__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_redshift.redshift__get_rename_view_sql", "macro_sql": "{% macro redshift__get_rename_view_sql(relation, new_name) %}\n    alter view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.932492, "supported_languages": null}, "macro.dbt_redshift.redshift__get_replace_view_sql": {"name": "redshift__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_redshift.redshift__get_replace_view_sql", "macro_sql": "{% macro redshift__get_replace_view_sql(relation, sql) -%}\n\n  {%- set binding = config.get('bind', default=True) -%}\n\n  {% set bind_qualifier = '' if binding else 'with no schema binding' %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %} as (\n    {{ sql }}\n  ) {{ bind_qualifier }};\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9336684, "supported_languages": null}, "macro.dbt_redshift.redshift__drop_table": {"name": "redshift__drop_table", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_redshift.redshift__drop_table", "macro_sql": "{%- macro redshift__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.934019, "supported_languages": null}, "macro.dbt_redshift.redshift__get_rename_table_sql": {"name": "redshift__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_redshift.redshift__get_rename_table_sql", "macro_sql": "{% macro redshift__get_rename_table_sql(relation, new_name) %}\n    alter table {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9343348, "supported_languages": null}, "macro.dbt_redshift.redshift__get_create_materialized_view_as_sql": {"name": "redshift__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_redshift.redshift__get_create_materialized_view_as_sql", "macro_sql": "{% macro redshift__get_create_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = relation.from_runtime_config(config) -%}\n\n    create materialized view {{ materialized_view.path }}\n        backup {% if materialized_view.backup %}yes{% else %}no{% endif %}\n        diststyle {{ materialized_view.dist.diststyle }}\n        {% if materialized_view.dist.distkey %}distkey ({{ materialized_view.dist.distkey }}){% endif %}\n        {% if materialized_view.sort.sortkey %}sortkey ({{ ','.join(materialized_view.sort.sortkey) }}){% endif %}\n        auto refresh {% if materialized_view.autorefresh %}yes{% else %}no{% endif %}\n    as (\n        {{ materialized_view.query }}\n    );\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9356518, "supported_languages": null}, "macro.dbt_redshift.redshift__drop_materialized_view": {"name": "redshift__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_redshift.redshift__drop_materialized_view", "macro_sql": "{% macro redshift__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9358945, "supported_languages": null}, "macro.dbt_redshift.redshift__describe_materialized_view": {"name": "redshift__describe_materialized_view", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/relations/materialized_view/describe.sql", "original_file_path": "macros/relations/materialized_view/describe.sql", "unique_id": "macro.dbt_redshift.redshift__describe_materialized_view", "macro_sql": "{% macro redshift__describe_materialized_view(relation) %}\n    {#-\n        These need to be separate queries because redshift will not let you run queries\n        against svv_table_info and pg_views in the same query. The same is true of svv_redshift_columns.\n    -#}\n\n    {%- set _materialized_view_sql -%}\n        select\n            tb.database,\n            tb.schema,\n            tb.table,\n            tb.diststyle,\n            tb.sortkey1,\n            mv.autorefresh\n        from svv_table_info tb\n        -- svv_mv_info is queryable by Redshift Serverless, but stv_mv_info is not\n        left join svv_mv_info mv\n            on mv.database_name = tb.database\n            and mv.schema_name = tb.schema\n            and mv.name = tb.table\n        where tb.table ilike '{{ relation.identifier }}'\n        and tb.schema ilike '{{ relation.schema }}'\n        and tb.database ilike '{{ relation.database }}'\n    {%- endset %}\n    {% set _materialized_view = run_query(_materialized_view_sql) %}\n\n    {%- set _query_sql -%}\n        select\n            vw.definition\n        from pg_views vw\n        where vw.viewname = '{{ relation.identifier }}'\n        and vw.schemaname = '{{ relation.schema }}'\n        and vw.definition ilike '%create materialized view%'\n    {%- endset %}\n    {% set _query = run_query(_query_sql) %}\n\n    {% do return({'materialized_view': _materialized_view, 'query': _query}) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.937143, "supported_languages": null}, "macro.dbt_redshift.redshift__refresh_materialized_view": {"name": "redshift__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_redshift.redshift__refresh_materialized_view", "macro_sql": "{% macro redshift__refresh_materialized_view(relation) -%}\n    refresh materialized view {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9373786, "supported_languages": null}, "macro.dbt_redshift.redshift__get_alter_materialized_view_as_sql": {"name": "redshift__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_redshift.redshift__get_alter_materialized_view_as_sql", "macro_sql": "{% macro redshift__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    -- apply a full refresh immediately if needed\n    {% if configuration_changes.requires_full_refresh %}\n\n        {{ get_replace_sql(existing_relation, relation,  sql) }}\n\n    -- otherwise apply individual changes as needed\n    {% else %}\n\n        {%- set autorefresh = configuration_changes.autorefresh -%}\n        {%- if autorefresh -%}{{- log('Applying UPDATE AUTOREFRESH to: ' ~ relation) -}}{%- endif -%}\n\n        alter materialized view {{ relation }}\n            auto refresh {% if autorefresh.context %}yes{% else %}no{% endif %}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.938435, "supported_languages": null}, "macro.dbt_redshift.materialization_view_redshift": {"name": "materialization_view_redshift", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_redshift.materialization_view_redshift", "macro_sql": "{%- materialization view, adapter='redshift' -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {% if existing_relation.can_be_renamed %}\n            {{ adapter.rename_relation(existing_relation, backup_relation) }}\n        {% else  %}\n            {{ drop_relation_if_exists(existing_relation) }}\n        {% endif %}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9430585, "supported_languages": ["sql"]}, "macro.dbt_redshift.redshift__get_materialized_view_configuration_changes": {"name": "redshift__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_redshift.redshift__get_materialized_view_configuration_changes", "macro_sql": "{% macro redshift__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = redshift__describe_materialized_view(existing_relation) %}\n    {% set _configuration_changes = existing_relation.materialized_view_config_changeset(_existing_materialized_view, new_config) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__describe_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9436638, "supported_languages": null}, "macro.dbt_redshift.redshift__snapshot_merge_sql": {"name": "redshift__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "unique_id": "macro.dbt_redshift.redshift__snapshot_merge_sql", "macro_sql": "{% macro redshift__snapshot_merge_sql(target, source, insert_cols) -%}\n    {{ postgres__snapshot_merge_sql(target, source, insert_cols) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9440033, "supported_languages": null}, "macro.dbt_redshift.materialization_table_redshift": {"name": "materialization_table_redshift", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_redshift.materialization_table_redshift", "macro_sql": "{% materialization table, adapter='redshift' %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {% if existing_relation.can_be_renamed %}\n            {{ adapter.rename_relation(existing_relation, backup_relation) }}\n        {% else  %}\n            {{ drop_relation_if_exists(existing_relation) }}\n        {% endif %}\n    {% endif %}\n  {% endif %}\n\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9485385, "supported_languages": ["sql"]}, "macro.dbt_redshift.redshift__get_merge_sql": {"name": "redshift__get_merge_sql", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/materializations/incremental_merge.sql", "original_file_path": "macros/materializations/incremental_merge.sql", "unique_id": "macro.dbt_redshift.redshift__get_merge_sql", "macro_sql": "{% macro redshift__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] -%}\n    {% if incremental_predicates is not none %}\n        {%- set incremental_predicates_list = [] + incremental_predicates -%}\n        {%- for pred in incremental_predicates_list -%}\n            {% if \"DBT_INTERNAL_DEST.\" in pred %}\n                {%- set pred =  pred | replace(\"DBT_INTERNAL_DEST.\", target ~ \".\" ) -%}\n            {% endif %}\n            {% if \"dbt_internal_dest.\" in pred %}\n                {%- set pred =  pred | replace(\"dbt_internal_dest.\", target ~ \".\" ) -%}\n            {% endif %}\n            {% do predicates.append(pred) %}\n        {% endfor %}\n    {% endif %}\n\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set insert_columns = get_merge_update_columns(none, none, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = {{ target }}.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = {{ target }}.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }}\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {% endif %}\n        {% endfor %}\n    {% endif %}\n\n    when not matched then insert (\n        {% for column_name in insert_columns -%}\n            {{ column_name }}\n            {%- if not loop.last %}, {% endif %}\n        {% endfor %}\n    )\n    values (\n        {% for column_name in insert_columns -%}\n            DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {% endif %}\n        {% endfor %}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9549334, "supported_languages": null}, "macro.dbt_redshift.redshift__create_csv_table": {"name": "redshift__create_csv_table", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt_redshift.redshift__create_csv_table", "macro_sql": "{% macro redshift__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n  {%- set _dist = model['config'].get('dist', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n    {{ dist(_dist) }}\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.dist", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9570947, "supported_languages": null}, "macro.dbt_redshift.redshift__get_batch_size": {"name": "redshift__get_batch_size", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt_redshift.redshift__get_batch_size", "macro_sql": "{% macro redshift__get_batch_size() %}\n  {{ return(500) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9573133, "supported_languages": null}, "macro.dbt_redshift.redshift__cast_bool_to_text": {"name": "redshift__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt_redshift.redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9576073, "supported_languages": null}, "macro.dbt_redshift.redshift__datediff": {"name": "redshift__datediff", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_redshift.redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9579482, "supported_languages": null}, "macro.dbt_redshift.redshift__dateadd": {"name": "redshift__dateadd", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_redshift.redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.958299, "supported_languages": null}, "macro.dbt_redshift.redshift__split_part": {"name": "redshift__split_part", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_redshift.redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9589448, "supported_languages": null}, "macro.dbt_redshift.redshift__last_day": {"name": "redshift__last_day", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_redshift.redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9595542, "supported_languages": null}, "macro.dbt_redshift.redshift__array_construct": {"name": "redshift__array_construct", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_redshift.redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9600158, "supported_languages": null}, "macro.dbt_redshift.redshift__array_concat": {"name": "redshift__array_concat", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_redshift.redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.96032, "supported_languages": null}, "macro.dbt_redshift.redshift__length": {"name": "redshift__length", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt_redshift.redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9606457, "supported_languages": null}, "macro.dbt_redshift.redshift__listagg": {"name": "redshift__listagg", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_redshift.redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}\n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9631443, "supported_languages": null}, "macro.dbt_redshift.redshift__array_append": {"name": "redshift__array_append", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_redshift.redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9635544, "supported_languages": null}, "macro.dbt_redshift.redshift__get_show_grant_sql": {"name": "redshift__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_redshift.redshift__get_show_grant_sql", "macro_sql": "{% macro redshift__get_show_grant_sql(relation) %}\n\nwith privileges as (\n\n    -- valid options per https://docs.aws.amazon.com/redshift/latest/dg/r_HAS_TABLE_PRIVILEGE.html\n    select 'select' as privilege_type\n    union all\n    select 'insert' as privilege_type\n    union all\n    select 'update' as privilege_type\n    union all\n    select 'delete' as privilege_type\n    union all\n    select 'references' as privilege_type\n\n)\n\nselect\n    u.usename as grantee,\n    p.privilege_type\nfrom pg_user u\ncross join privileges p\nwhere has_table_privilege(u.usename, '{{ relation }}', privilege_type)\n    and u.usename != current_user\n    and not u.usesuper\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9638832, "supported_languages": null}, "macro.dbt_postgres.postgres__get_relations": {"name": "postgres__get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres__get_relations", "macro_sql": "{% macro postgres__get_relations() -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v', 'm')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9647484, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"name": "postgres_get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres_get_relations", "macro_sql": "{% macro postgres_get_relations() %}\n  {{ return(postgres__get_relations()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9649644, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog_relations": {"name": "postgres__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog_relations", "macro_sql": "{% macro postgres__get_catalog_relations(information_schema, relations) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            when 'm' then 'MATERIALIZED VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n    where (\n      {%- for relation in relations -%}\n        {%- if relation.identifier -%}\n          (upper(sch.nspname) = upper('{{ relation.schema }}') and\n           upper(tbl.relname) = upper('{{ relation.identifier }}'))\n        {%- else-%}\n          upper(sch.nspname) = upper('{{ relation.schema }}')\n        {%- endif -%}\n        {%- if not loop.last %} or {% endif -%}\n      {%- endfor -%}\n    )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p', 'm') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table, [m]aterialized view. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.967146, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"name": "postgres__get_catalog", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n  {%- set relations = [] -%}\n  {%- for schema in schemas -%}\n    {%- set dummy = relations.append({'schema': schema}) -%}\n  {%- endfor -%}\n  {{ return(postgres__get_catalog_relations(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9677906, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp": {"name": "postgres__current_timestamp", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.96821, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"name": "postgres__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9685063, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"name": "postgres__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9686797, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"name": "postgres__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9688535, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"name": "postgres__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9690218, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"name": "postgres__create_table_as", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {% endif -%}\n  {% if contract_config.enforced and (not temporary) -%}\n      {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} (\n      {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    )\n    {%- set sql = get_select_subquery(sql) %}\n  {% else %}\n    as\n  {% endif %}\n  (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.default__get_column_names", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9796288, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"name": "postgres__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9804566, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"name": "postgres__create_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9809613, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"name": "postgres__drop_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9814656, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"name": "postgres__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9822235, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"name": "postgres__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9829152, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"name": "postgres__information_schema_name", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9831948, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"name": "postgres__list_schemas", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9837708, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"name": "postgres__check_schema_exists", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9843996, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"name": "postgres__make_relation_with_suffix", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9861805, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"name": "postgres__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9865193, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"name": "postgres__make_temp_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9870362, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"name": "postgres__make_backup_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9874897, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"name": "postgres_escape_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9881847, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"name": "postgres__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9885588, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"name": "postgres__alter_column_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9895172, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"name": "postgres__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9898436, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"name": "postgres__copy_grants", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9900343, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_indexes_sql": {"name": "postgres__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_indexes_sql", "macro_sql": "{% macro postgres__get_show_indexes_sql(relation) %}\n    select\n        i.relname                                   as name,\n        m.amname                                    as method,\n        ix.indisunique                              as \"unique\",\n        array_to_string(array_agg(a.attname), ',')  as column_names\n    from pg_index ix\n    join pg_class i\n        on i.oid = ix.indexrelid\n    join pg_am m\n        on m.oid=i.relam\n    join pg_class t\n        on t.oid = ix.indrelid\n    join pg_namespace n\n        on n.oid = t.relnamespace\n    join pg_attribute a\n        on a.attrelid = t.oid\n        and a.attnum = ANY(ix.indkey)\n    where t.relname = '{{ relation.identifier }}'\n      and n.nspname = '{{ relation.schema }}'\n      and t.relkind in ('r', 'm')\n    group by 1, 2, 3\n    order by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9903247, "supported_languages": null}, "macro.dbt_postgres.postgres__get_drop_index_sql": {"name": "postgres__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_drop_index_sql", "macro_sql": "\n\n\n{%- macro postgres__get_drop_index_sql(relation, index_name) -%}\n    drop index if exists \"{{ relation.schema }}\".\"{{ index_name }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9905527, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_view": {"name": "postgres__drop_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_view", "macro_sql": "{% macro postgres__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.990791, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_view_sql": {"name": "postgres__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_view_sql", "macro_sql": "{% macro postgres__get_rename_view_sql(relation, new_name) %}\n    alter view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9910626, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_view_sql": {"name": "postgres__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_view_sql", "macro_sql": "{% macro postgres__get_replace_view_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace view {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n        {%- endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.991941, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_table": {"name": "postgres__drop_table", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_table", "macro_sql": "{% macro postgres__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9921808, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_table_sql": {"name": "postgres__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_table_sql", "macro_sql": "{% macro postgres__get_rename_table_sql(relation, new_name) %}\n    alter table {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9924536, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_table_sql": {"name": "postgres__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_table_sql", "macro_sql": "{% macro postgres__get_replace_table_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n            {{ get_table_columns_and_constraints() }}\n            {%- set sql = get_select_subquery(sql) %}\n        {% endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9935038, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql": {"name": "postgres__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_create_materialized_view_as_sql(relation, sql) %}\n    create materialized view if not exists {{ relation }} as {{ sql }};\n\n    {% for _index_dict in config.get('indexes', []) -%}\n        {{- get_create_index_sql(relation, _index_dict) -}}\n    {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9940987, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_materialized_view": {"name": "postgres__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_materialized_view", "macro_sql": "{% macro postgres__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9943283, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_materialized_view_sql": {"name": "postgres__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_materialized_view_sql", "macro_sql": "{% macro postgres__get_rename_materialized_view_sql(relation, new_name) %}\n    alter materialized view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9945998, "supported_languages": null}, "macro.dbt_postgres.postgres__describe_materialized_view": {"name": "postgres__describe_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/describe.sql", "original_file_path": "macros/relations/materialized_view/describe.sql", "unique_id": "macro.dbt_postgres.postgres__describe_materialized_view", "macro_sql": "{% macro postgres__describe_materialized_view(relation) %}\n    -- for now just get the indexes, we don't need the name or the query yet\n    {% set _indexes = run_query(get_show_indexes_sql(relation)) %}\n    {% do return({'indexes': _indexes}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9950655, "supported_languages": null}, "macro.dbt_postgres.postgres__refresh_materialized_view": {"name": "postgres__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_postgres.postgres__refresh_materialized_view", "macro_sql": "{% macro postgres__refresh_materialized_view(relation) %}\n    refresh materialized view {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9952824, "supported_languages": null}, "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql": {"name": "postgres__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    -- apply a full refresh immediately if needed\n    {% if configuration_changes.requires_full_refresh %}\n\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n\n    -- otherwise apply individual changes as needed\n    {% else %}\n\n        {{ postgres__update_indexes_on_materialized_view(relation, configuration_changes.indexes) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_postgres.postgres__update_indexes_on_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9964833, "supported_languages": null}, "macro.dbt_postgres.postgres__update_indexes_on_materialized_view": {"name": "postgres__update_indexes_on_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__update_indexes_on_materialized_view", "macro_sql": "\n\n\n{%- macro postgres__update_indexes_on_materialized_view(relation, index_changes) -%}\n    {{- log(\"Applying UPDATE INDEXES to: \" ~ relation) -}}\n\n    {%- for _index_change in index_changes -%}\n        {%- set _index = _index_change.context -%}\n\n        {%- if _index_change.action == \"drop\" -%}\n\n            {{ postgres__get_drop_index_sql(relation, _index.name) }};\n\n        {%- elif _index_change.action == \"create\" -%}\n\n            {{ postgres__get_create_index_sql(relation, _index.as_node_config) }}\n\n        {%- endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql", "macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.997392, "supported_languages": null}, "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes": {"name": "postgres__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes", "macro_sql": "{% macro postgres__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = postgres__describe_materialized_view(existing_relation) %}\n    {% set _configuration_changes = existing_relation.get_materialized_view_config_change_collection(_existing_materialized_view, new_config) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__describe_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.997868, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"name": "postgres__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9984868, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"name": "postgres__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873844.9995444, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_postgres.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0040479, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_postgres.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0044143, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_postgres.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0050576, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_postgres.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0058448, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_postgres.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0067792, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_postgres.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0070202, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0077713, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0082173, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0086827, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.00927, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0096762, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0102873, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.010907, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0114396, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.011785, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0123017, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0127392, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.013413, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0142517, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0152178, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0158362, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0161338, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.016465, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0167844, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0177505, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0184686, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0188048, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0192614, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.019777, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.020108, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.021116, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0230625, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0236645, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0240798, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0246758, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0249357, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0252562, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0259361, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.026381, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0265586, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0269716, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0273533, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0284953, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.028753, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0305324, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0308561, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.031222, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0324175, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0327132, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0333993, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0345223, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0354078, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0357287, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0360162, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0364425, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.036619, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0370414, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.037282, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0376976, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0379357, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0383782, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0386162, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0390277, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0392091, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.039754, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0400057, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0404356, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0406766, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.041152, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0413775, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0422614, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0425687, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0430417, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0432775, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0446439, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0448453, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.045695, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0459616, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0461926, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0482724, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0490084, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.049553, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0501285, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0506237, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0511117, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0527122, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0530536, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0532968, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0535266, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.053756, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0543194, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.054942, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0555959, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.056095, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0602565, "supported_languages": ["sql"]}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.068403, "supported_languages": ["sql"]}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0730724, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0733612, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0737371, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.074904, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.075178, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0754817, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.077704, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0799456, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0844057, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0848866, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0851614, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0853114, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0855446, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0857341, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0860612, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0874755, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0877912, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.088198, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0888817, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.089512, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0899408, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0956254, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0970623, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0974393, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0982208, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0985317, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0987515, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0989778, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0991647, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0995553, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.0997536, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1005173, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1008043, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1028013, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1075618, "supported_languages": ["sql"]}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1117024, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.117742, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1183872, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.118791, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1208758, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.121256, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1223152, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1269076, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1273553, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1275609, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1325989, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1330955, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1333222, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1345274, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1349118, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1352117, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1357086, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.136012, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1364708, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1367671, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1371863, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1374824, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1377237, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.138175, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1447756, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1475067, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1479406, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1495702, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1500022, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1510453, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.157415, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1598108, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1617608, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.163172, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1641598, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.166265, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1671622, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1682622, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.168647, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1697958, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1774118, "supported_languages": ["sql"]}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1778655, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1781476, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1791022, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1800737, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1804533, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.181034, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1815383, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1818068, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.182258, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1824853, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1828477, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.182976, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1834922, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1837566, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1844437, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1847134, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1850777, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1855896, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1860147, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.186267, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1866245, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1867585, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.187336, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1875803, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1879928, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.188214, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1892881, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.189971, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1902885, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1911275, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1917498, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1921546, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1934664, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1937134, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1939702, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1942284, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.194492, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1947358, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1949906, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.195267, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1955383, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.195779, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1960464, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1962824, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1966403, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1968732, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1972835, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1974607, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1978874, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.198118, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1985605, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.198786, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1991894, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.1993868, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2002294, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2008936, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2013433, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2015653, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2019517, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2021391, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2026412, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2029755, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.203406, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.203617, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.204014, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2042773, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.204691, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2050185, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.205426, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2056017, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2060215, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2064133, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2091317, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2094078, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2099228, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2102864, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2106276, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.210927, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2127686, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.21333, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2136314, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2141984, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2145572, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2155192, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2159145, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2172797, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2197883, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2200727, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2204278, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2209003, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.221299, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2218094, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2221117, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2223778, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.222766, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.223647, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2240064, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2242336, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2251792, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.225458, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.225784, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2260501, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2264829, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2273614, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_redshift.redshift__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2280762, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2283273, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2285588, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2287352, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2290032, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.22913, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2294014, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_redshift.redshift__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2296667, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2308114, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2310362, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.231291, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2319655, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.232275, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.232496, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.232749, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2329597, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2350981, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2353299, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.235608, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2358017, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.236497, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2368152, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.236988, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2373457, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2376504, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2380147, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2383332, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2386978, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2398057, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2401092, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2405035, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2408636, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2427053, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2462673, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2466981, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2470255, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2474647, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2477655, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2480307, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2483182, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2487128, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2490435, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2495189, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2499251, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2502005, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2504733, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.250719, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.251047, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2513442, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2521222, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2524226, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2526412, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.253206, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2535207, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2537868, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2540972, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2547233, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2554307, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2559476, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2568085, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2572927, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2576795, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2599769, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2619936, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2632158, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2636232, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2658246, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2667632, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.267239, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2692893, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.269545, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2708485, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2715175, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.272448, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.273202, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2733283, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2740662, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2744484, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2749064, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2753613, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2769175, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2793114, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2800815, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2812707, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2822304, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.283178, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2835789, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2841558, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.redshift__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2850971, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2854376, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.285754, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2860641, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2863495, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.28663, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.287067, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2874916, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.288052, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.289001, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2896595, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.290702, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2921352, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2936127, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2947383, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2961295, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2966285, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.297176, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.297728, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2986078, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.2999856, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3004267, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3013396, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3026607, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3037925, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3044767, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3047812, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.305623, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3070993, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3096385, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.311744, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3123438, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3135214, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3143563, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3149786, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3154466, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3161483, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.316385, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3166115, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.31683, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3173826, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3182638, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.319957, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3227973, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3235254, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.324679, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3252065, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3257606, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3263516, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3267224, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3271472, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3273818, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3283386, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3290749, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3293812, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.33287, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.338502, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3395028, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3408504, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.341267, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3415499, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3419983, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3423233, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3432686, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3436892, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.34395, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3451655, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.345854, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3465014, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3475246, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3480332, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.348752, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3492258, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3497298, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3536446, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.356243, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3571587, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.358474, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.359389, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3599467, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3609645, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3624167, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3632886, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3640687, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3650808, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3664265, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.367791, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.369418, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3700383, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3706448, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3718438, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3734183, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3743086, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3753703, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3762624, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3775396, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3786862, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3804684, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3812258, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.381789, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3825552, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.383183, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.383869, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3846202, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.385309, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3857937, "supported_languages": null}, "macro.redshift.try_cast": {"name": "try_cast", "resource_type": "macro", "package_name": "redshift", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.redshift.try_cast", "macro_sql": "{%- macro try_cast(str, datatype) -%}\n\n{%- if datatype == 'bigint' or datatype == 'int' -%}\n\n    case\n        when trim({{str}}) ~ '^[0-9]+$' then trim({{str}})\n        else null\n    end::{{datatype}}\n\n{% else %}\n\n    {{ exceptions.raise_compiler_error(\n            \"non-integer datatypes are not currently supported\") }}\n\n{% endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3864856, "supported_languages": null}, "macro.redshift.get_data": {"name": "get_data", "resource_type": "macro", "package_name": "redshift", "path": "macros/introspection.sql", "original_file_path": "macros/introspection.sql", "unique_id": "macro.redshift.get_data", "macro_sql": "{% macro get_data(query, columns) %}\n\n  {%- call statement('_', fetch_result=True) %}\n    {{ query }}\n  {% endcall %}\n\n  {%- set records = load_result('_') -%}\n\n  {% if not records %}\n    {{ return([]) }}\n  {% endif %}\n\n  {%- set ret = [] -%}\n  {% for record in records['data'] %}\n    {% set processing = {} %}\n    {% for column in columns %}\n        {% set _ = processing.update({column: record[loop.index0]}) %}\n    {% endfor %}\n    {% set _ = ret.append(processing) %}\n  {% endfor %}\n\n  {{ return(ret) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.391795, "supported_languages": null}, "macro.redshift.fetch_table_data": {"name": "fetch_table_data", "resource_type": "macro", "package_name": "redshift", "path": "macros/introspection.sql", "original_file_path": "macros/introspection.sql", "unique_id": "macro.redshift.fetch_table_data", "macro_sql": "{% macro fetch_table_data(schema_name, table_name) %}\n\n  {% set sql %}\n    select\n        schemaname,\n        tablename,\n        description,\n        relation_type\n    from ({{ redshift.fetch_table_data_sql() }})\n    where schemaname = '{{ schema_name }}'\n      and tablename = '{{ table_name }}'\n  {% endset %}\n\n  {% set table = redshift.get_data(sql, ['schema', 'name', 'description', 'type']) %}\n  {{ return(table) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.redshift.fetch_table_data_sql", "macro.redshift.get_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3925614, "supported_languages": null}, "macro.redshift.fetch_column_data": {"name": "fetch_column_data", "resource_type": "macro", "package_name": "redshift", "path": "macros/introspection.sql", "original_file_path": "macros/introspection.sql", "unique_id": "macro.redshift.fetch_column_data", "macro_sql": "{% macro fetch_column_data(schema_name, table_name) %}\n\n  {% set sql %}\n    select\n        col_index,\n        col_name,\n        description,\n        col_datatype,\n        col_encoding,\n        col_default,\n        col_not_null\n    from ({{ redshift.fetch_column_data_sql() }})\n    where schemaname = '{{ schema_name }}'\n      and tablename = '{{ table_name }}'\n  {% endset %}\n\n  {% set columns = redshift.get_data(sql, ['position', 'name', 'description', 'type', 'encoding', 'default', 'not_null']) %}\n\n  {% set ret = {} %}\n  {% for column in columns %}\n      {%- set _ = ret.update({column.name: column}) -%}\n  {% endfor %}\n\n  {{ return(ret) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.redshift.fetch_column_data_sql", "macro.redshift.get_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3935614, "supported_languages": null}, "macro.redshift.fetch_sort_dist_key_data": {"name": "fetch_sort_dist_key_data", "resource_type": "macro", "package_name": "redshift", "path": "macros/introspection.sql", "original_file_path": "macros/introspection.sql", "unique_id": "macro.redshift.fetch_sort_dist_key_data", "macro_sql": "{% macro fetch_sort_dist_key_data(schema_name, table_name) %}\n\n  {% set sql %}\n    select\n        sort_style,\n        sort_keys,\n        diststyle,\n        dist_key\n    from ({{ redshift.fetch_sort_dist_key_data_sql() }})\n    where schemaname = '{{ schema_name }}'\n      and tablename = '{{ table_name }}'\n  {% endset %}\n\n  {% set keys = redshift.get_data(sql, ['sort_style', 'sort_keys', 'dist_style', 'dist_key']) %}\n  {% for key in keys %}\n    {% set _ = key.update({'sort_keys': key['sort_keys'].split('|')}) %}\n  {% endfor %}\n\n  {{ return(keys) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.redshift.fetch_sort_dist_key_data_sql", "macro.redshift.get_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.394535, "supported_languages": null}, "macro.redshift.fetch_constraints": {"name": "fetch_constraints", "resource_type": "macro", "package_name": "redshift", "path": "macros/introspection.sql", "original_file_path": "macros/introspection.sql", "unique_id": "macro.redshift.fetch_constraints", "macro_sql": "{% macro fetch_constraints(schema_name, table_name) %}\n\n  {% set sql %}\n    select\n        constraint_type,\n        col_constraint\n    from ({{ redshift.fetch_constraint_data_sql() }})\n    where schemaname = '{{ schema_name }}'\n      and tablename = '{{ table_name }}'\n  {% endset %}\n\n  {% set constraints = redshift.get_data(sql, ['constraint_type', 'col_constraint']) %}\n  {{ return(constraints) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.redshift.fetch_constraint_data_sql", "macro.redshift.get_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3951216, "supported_languages": null}, "macro.redshift.fetch_table_definition": {"name": "fetch_table_definition", "resource_type": "macro", "package_name": "redshift", "path": "macros/introspection.sql", "original_file_path": "macros/introspection.sql", "unique_id": "macro.redshift.fetch_table_definition", "macro_sql": "{% macro fetch_table_definition(schema_name, table_name) %}\n  {% set tables = redshift.fetch_table_data(schema_name, table_name) %}\n\n  {% if (tables | length) == 0 %}\n    {{ return(none) }}\n  {% elif (tables | length) > 1 %}\n    {{ log(tables) }}\n    {{ exceptions.raise_compiler_error(\"Expected one table\") }}\n  {% endif %}\n\n  {% set table = tables[0] %}\n  {% set columns = redshift.fetch_column_data(schema_name, table_name) %}\n  {% set keys = redshift.fetch_sort_dist_key_data(schema_name, table_name) | first %}\n  {% set constraints = redshift.fetch_constraints(schema_name, table_name) %}\n\n  {% set _ = table.update({\"columns\": columns}) %}\n  {% set _ = table.update({\"keys\": keys}) %}\n  {% set _ = table.update({\"constraints\": constraints}) %}\n\n  {{ return(table) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.redshift.fetch_table_data", "macro.redshift.fetch_column_data", "macro.redshift.fetch_sort_dist_key_data", "macro.redshift.fetch_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.396831, "supported_languages": null}, "macro.redshift.vacuumable_tables_sql": {"name": "vacuumable_tables_sql", "resource_type": "macro", "package_name": "redshift", "path": "macros/redshift_maintenance_operation.sql", "original_file_path": "macros/redshift_maintenance_operation.sql", "unique_id": "macro.redshift.vacuumable_tables_sql", "macro_sql": "{% macro vacuumable_tables_sql() %}\n    {#-\n    Pull the arguments out of the kwargs dictionary. This allows folks to define\n    whatever arguments they want, e.g. a variable limit\n    -#}\n    {%- set exclude_schemas=kwargs.get('exclude_schemas', []) -%}\n    {%- set exclude_schemas_like=kwargs.get('exclude_schemas_like', []) -%}\n\n    select\n        current_database() as table_database,\n        table_schema,\n        table_name\n    from information_schema.tables\n    where table_type = 'BASE TABLE'\n        and table_schema not in ('information_schema', 'pg_catalog')\n        {% if exclude_schemas %}\n        and table_schema not in ('{{exclude_schemas | join(\"', '\")}}')\n        {% endif %}\n        {% for exclude_schema_like in exclude_schemas_like %}\n        and table_schema not like '{{ exclude_schema_like }}'\n        {% endfor %}\n    order by table_schema, table_name\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.3987772, "supported_languages": null}, "macro.redshift.redshift_maintenance": {"name": "redshift_maintenance", "resource_type": "macro", "package_name": "redshift", "path": "macros/redshift_maintenance_operation.sql", "original_file_path": "macros/redshift_maintenance_operation.sql", "unique_id": "macro.redshift.redshift_maintenance", "macro_sql": "{% macro redshift_maintenance() %}\n    {#-\n    This logic means that if you add your own macro named `vacuumable_tables_sql`\n    to your project, that will be used, giving you the flexibility of defining\n    your own query. Passing it the `kwargs` variable means you can define your\n    own keyword arguments.\n    -#}\n    {% set root_project = context.project_name %}\n    {% if context.get(root_project, {}).get('vacuumable_tables_sql')  %}\n        {% set vacuumable_tables_sql=context[root_project].vacuumable_tables_sql(**kwargs) %}\n    {% else %}\n        {% set vacuumable_tables_sql=redshift.vacuumable_tables_sql(**kwargs) %}\n    {% endif %}\n\n    {% set vacuumable_tables=run_query(vacuumable_tables_sql) %}\n\n    {% for row in vacuumable_tables %}\n        {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n\n        {%- set relation_to_vacuum = adapter.get_relation(\n                                                database=row['table_database'],\n                                                schema=row['table_schema'],\n                                                identifier=row['table_name']\n                                    ) -%}\n        {% do run_query(\"commit\") %}\n\n        {% if relation_to_vacuum %}\n            {% set start=modules.datetime.datetime.now() %}\n            {{ dbt_utils.log_info(message_prefix ~ \" Vacuuming \" ~ relation_to_vacuum) }}\n            {% do run_query(\"vacuum \" ~ relation_to_vacuum) %}\n            {{ dbt_utils.log_info(message_prefix ~ \" Analyzing \" ~ relation_to_vacuum) }}\n            {% do run_query(\"analyze \" ~ relation_to_vacuum) %}\n            {% set end=modules.datetime.datetime.now() %}\n            {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n            {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ relation_to_vacuum ~ \" in \" ~ total_seconds ~ \"s\") }}\n        {% else %}\n            {{ dbt_utils.log_info(message_prefix ~ ' Skipping relation \"' ~ row.values() | join ('\".\"') ~ '\" as it does not exist') }}\n        {% endif %}\n\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.redshift.vacuumable_tables_sql", "macro.dbt.run_query", "macro.dbt_utils.log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.4013338, "supported_languages": null}, "macro.redshift.decode_reldiststyle": {"name": "decode_reldiststyle", "resource_type": "macro", "package_name": "redshift", "path": "macros/utilities.sql", "original_file_path": "macros/utilities.sql", "unique_id": "macro.redshift.decode_reldiststyle", "macro_sql": "{% macro decode_reldiststyle(diststyle_field, distkey_field) -%}\n  decode({{diststyle_field}}, 0, 'even',\n                              1, {{distkey_field}},\n                              'all')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.4017613, "supported_languages": null}, "macro.redshift.percentage": {"name": "percentage", "resource_type": "macro", "package_name": "redshift", "path": "macros/utilities.sql", "original_file_path": "macros/utilities.sql", "unique_id": "macro.redshift.percentage", "macro_sql": "{% macro percentage(num, denom) -%}\n  (case {{denom}}\n        when 0 then 0\n        else ({{num}}::float / {{denom}}::float) * 100.0 end)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.4020107, "supported_languages": null}, "macro.redshift.find_analyze_recommendations": {"name": "find_analyze_recommendations", "resource_type": "macro", "package_name": "redshift", "path": "macros/compression.sql", "original_file_path": "macros/compression.sql", "unique_id": "macro.redshift.find_analyze_recommendations", "macro_sql": "{% macro find_analyze_recommendations(schema, table, comprows=none) %}\n\n  {% set comprows_s = '' if comprows is none else 'comprows ' ~ comprows %}\n  {% set query %}\n    analyze compression \"{{ schema }}\".\"{{ table }}\" {{ comprows_s }}\n  {% endset %}\n\n  {% set columns = redshift.get_data(query, ['table', 'column', 'encoding', 'reduction_pct']) %}\n\n  {% set ret = {} %}\n  {% for column in columns %}\n      {%- set _ = ret.update({column.column: column}) -%}\n  {% endfor %}\n\n  {{ return(ret) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.redshift.get_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.4071167, "supported_languages": null}, "macro.redshift.build_optimized_definition": {"name": "build_optimized_definition", "resource_type": "macro", "package_name": "redshift", "path": "macros/compression.sql", "original_file_path": "macros/compression.sql", "unique_id": "macro.redshift.build_optimized_definition", "macro_sql": "{% macro build_optimized_definition(definition, recommendation) -%}\n\n    {% set optimized = {} %}\n    {% set _ = optimized.update(definition) %}\n    {% for name, column in definition['columns'].items() %}\n        {% set recommended_encoding = recommendation[name] %}\n\n        {% if recommended_encoding['encoding'] != column['encoding'] %}\n            {{ log(\"    Changing \" ~ name ~ \": \" ~ column['encoding'] ~ \" -> \" ~ recommended_encoding['encoding'] ~ \" (\" ~ recommended_encoding['reduction_pct'] ~ \"%)\") }}\n        {% else %}\n            {{ log(\"Not Changing \" ~ name ~ \": \" ~ column['encoding']) }}\n        {% endif %}\n\n        {% set _ = optimized['columns'][name].update({\"encoding\": recommended_encoding['encoding']}) %}\n    {% endfor %}\n\n    {{ return(optimized) }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.4086297, "supported_languages": null}, "macro.redshift.insert_into_sql": {"name": "insert_into_sql", "resource_type": "macro", "package_name": "redshift", "path": "macros/compression.sql", "original_file_path": "macros/compression.sql", "unique_id": "macro.redshift.insert_into_sql", "macro_sql": "\n\n{%- macro insert_into_sql(from_schema, from_table, to_schema, to_table) -%}\n\n    insert into \"{{ to_schema }}\".\"{{ to_table }}\" (\n        select * from \"{{ from_schema }}\".\"{{ from_table }}\"\n    );\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.408967, "supported_languages": null}, "macro.redshift.atomic_swap_sql": {"name": "atomic_swap_sql", "resource_type": "macro", "package_name": "redshift", "path": "macros/compression.sql", "original_file_path": "macros/compression.sql", "unique_id": "macro.redshift.atomic_swap_sql", "macro_sql": "{%- macro atomic_swap_sql(schema, from_table, to_table, drop_backup) -%}\n\n    begin;\n    -- drop table if exists \"{{ schema }}\".\"{{ from_table }}__backup\" cascade;\n    alter table \"{{ schema }}\".\"{{ from_table }}\" rename to \"{{ from_table }}__backup\";\n    alter table \"{{ schema }}\".\"{{ to_table }}\" rename to \"{{ from_table }}\";\n    {% if drop_backup %}\n        drop table \"{{ schema }}\".\"{{ from_table }}__backup\" cascade;\n    {% else %}\n        {{ log('drop_backup is False -- not dropping ' ~ from_table ~ \"__backup\") }}\n    {% endif %}\n    commit;\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.4096801, "supported_languages": null}, "macro.redshift.compress_table": {"name": "compress_table", "resource_type": "macro", "package_name": "redshift", "path": "macros/compression.sql", "original_file_path": "macros/compression.sql", "unique_id": "macro.redshift.compress_table", "macro_sql": "{%- macro compress_table(schema, table, drop_backup=False,\n                         comprows=none, sort_style=none, sort_keys=none,\n                         dist_style=none, dist_key=none, skip_if_incremental=False) -%}\n\n  {% if not execute %}\n    {{ return(none) }}\n  {% endif %}\n  \n  {% if skip_if_incremental and is_incremental() %}\n    {{ return('') }}\n  {% endif %}\n\n  {% set recommendation = redshift.find_analyze_recommendations(schema, table, comprows) %}\n  {% set definition = redshift.fetch_table_definition(schema, table) %}\n\n  {% if definition is none %}\n    {{ return(none) }}\n  {% endif %}\n\n  {% set optimized = redshift.build_optimized_definition(definition, recommendation) %}\n\n  {% set _ = optimized.update({\"keys\": optimized.get('keys', {}) | default({})}) %}\n  {% if sort_style %} {% set _ = optimized['keys'].update({\"sort_style\": sort_style}) %} {% endif %}\n  {% if sort_keys %}  {% set _ = optimized['keys'].update({\"sort_keys\": sort_keys}) %} {% endif %}\n  {% if dist_style %} {% set _ = optimized['keys'].update({\"dist_style\": dist_style}) %} {% endif %}\n  {% if dist_key %}   {% set _ = optimized['keys'].update({\"dist_key\": dist_key}) %} {% endif %}\n\n  {% set new_table = table ~ \"__compressed\" %}\n  {% set _ = optimized.update({'name': new_table}) %}\n\n  {# Build the DDL #}\n  {{ redshift.build_ddl_sql(optimized) }}\n  {{ redshift.insert_into_sql(schema, table, schema, new_table) }}\n  {{ redshift.atomic_swap_sql(schema, table, new_table, drop_backup) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.redshift.find_analyze_recommendations", "macro.redshift.fetch_table_definition", "macro.redshift.build_optimized_definition", "macro.redshift.build_ddl_sql", "macro.redshift.insert_into_sql", "macro.redshift.atomic_swap_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.4138432, "supported_languages": null}, "macro.redshift.fetch_table_data_sql": {"name": "fetch_table_data_sql", "resource_type": "macro", "package_name": "redshift", "path": "macros/queries.sql", "original_file_path": "macros/queries.sql", "unique_id": "macro.redshift.fetch_table_data_sql", "macro_sql": "{% macro fetch_table_data_sql() %}\n\n    select\n        n.nspname AS schemaname,\n        c.relname AS tablename,\n        d.description,\n        case\n            when c.relkind = 'v' then 'view'\n            when c.relkind = 'r' then 'table'\n            else null\n        end as relation_type\n\n    from pg_catalog.pg_namespace n\n    join pg_catalog.pg_class c on n.oid = c.relnamespace\n    left outer join pg_catalog.pg_description d ON (d.objoid = c.oid AND d.objsubid = 0)\n\n    where schemaname not like 'pg_%'\n      and schemaname != 'information_schema'\n      and relkind in ('v', 'r')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.4157326, "supported_languages": null}, "macro.redshift.fetch_column_data_sql": {"name": "fetch_column_data_sql", "resource_type": "macro", "package_name": "redshift", "path": "macros/queries.sql", "original_file_path": "macros/queries.sql", "unique_id": "macro.redshift.fetch_column_data_sql", "macro_sql": "{% macro fetch_column_data_sql() %}\n\n    with columns as (\n        select\n            n.nspname as schemaname,\n            c.relname as tablename,\n            a.attnum as col_index,\n            a.attname as col_name,\n            d.description,\n\n            case\n                when strpos(upper(format_type(a.atttypid, a.atttypmod)), 'CHARACTER VARYING') > 0\n                then replace(upper(format_type(a.atttypid, a.atttypmod)), 'CHARACTER VARYING', 'VARCHAR')\n\n                when strpos(upper(format_type(a.atttypid, a.atttypmod)), 'CHARACTER') > 0\n                then replace(upper(format_type(a.atttypid, a.atttypmod)), 'CHARACTER', 'CHAR')\n\n                else upper(format_type(a.atttypid, a.atttypmod))\n            end as col_datatype,\n\n            case\n                when format_encoding((a.attencodingtype)::integer) = 'none' then 'raw'\n                else format_encoding((a.attencodingtype)::integer)\n            end as col_encoding,\n\n            case\n                when a.atthasdef is true then adef.adsrc\n                else null\n            end as col_default,\n\n            a.attnotnull as col_not_null\n\n        from pg_catalog.pg_namespace as n\n        inner join pg_catalog.pg_class as c on n.oid = c.relnamespace\n        inner join pg_catalog.pg_attribute as a on c.oid = a.attrelid\n        left outer join pg_catalog.pg_description as d ON (d.objoid = a.attrelid AND d.objsubid = a.attnum)\n        left outer join pg_catalog.pg_attrdef as adef on a.attrelid = adef.adrelid and a.attnum = adef.adnum\n        where c.relkind = 'r'\n          and a.attnum > 0\n\n    )\n    select *\n    from columns\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.41613, "supported_languages": null}, "macro.redshift.fetch_constraint_data_sql": {"name": "fetch_constraint_data_sql", "resource_type": "macro", "package_name": "redshift", "path": "macros/queries.sql", "original_file_path": "macros/queries.sql", "unique_id": "macro.redshift.fetch_constraint_data_sql", "macro_sql": "{% macro fetch_constraint_data_sql() %}\n\n    select\n        c.nspname as schemaname,\n        b.relname as tablename,\n        case\n            when a.contype = 'p' then 'primary key'\n            when a.contype = 'u' then 'unique'\n            when a.contype = 'f' then 'foreign key'\n            else null\n        end as constraint_type,\n        pg_get_constraintdef(a.oid) as col_constraint\n\n    from pg_catalog.pg_constraint a\n    join pg_catalog.pg_class b on(a.conrelid=b.oid)\n    join pg_catalog.pg_namespace c on(a.connamespace=c.oid)\n    where a.contype in ('p', 'u', 'f')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.416392, "supported_languages": null}, "macro.redshift.fetch_sort_dist_key_data_sql": {"name": "fetch_sort_dist_key_data_sql", "resource_type": "macro", "package_name": "redshift", "path": "macros/queries.sql", "original_file_path": "macros/queries.sql", "unique_id": "macro.redshift.fetch_sort_dist_key_data_sql", "macro_sql": "{% macro fetch_sort_dist_key_data_sql() %}\n\n    with dist_config as (\n\n        -- gets distyle and distkey (if there is one)\n        select distinct\n            trim(n.nspname) as schemaname,\n            trim(c.relname) as tablename,\n\n            case\n                when c.reldiststyle = 0 then 'even'\n                when c.reldiststyle = 1 then 'key'\n                when c.reldiststyle = 8 then 'all'\n                else null\n            end as diststyle,\n\n            max(case when c.reldiststyle = 1 and a.attisdistkey IS TRUE and a.attnum > 0 then a.attname else null end) over (partition by n.nspname, c.relname) as dist_key\n\n        from pg_catalog.pg_namespace as n\n        inner join pg_catalog.pg_class as c on n.oid = c.relnamespace\n        inner join pg_catalog.pg_attribute as a on c.oid = a.attrelid\n        where c.relkind = 'r'\n\n    ),\n\n    sort_config as (\n\n        -- get sortstyle and sortkeys\n        select distinct\n            trim(n.nspname) as schemaname,\n            trim(c.relname) as tablename,\n            case\n                when min(a.attsortkeyord) over (partition by n.nspname, c.relname) = -1 then 'interleaved'\n                else 'compound'\n            end as sort_style,\n            listagg(a.attname, '|') within group (order by a.attsortkeyord) over (partition by n.nspname, c.relname) as sort_keys\n\n        from pg_catalog.pg_namespace as n\n        inner join pg_catalog.pg_class as c on n.oid = c.relnamespace\n        inner join pg_catalog.pg_attribute as a on c.oid = a.attrelid\n        where c.relkind = 'r'\n          and abs(a.attsortkeyord) > 0\n          and a.attnum > 0\n    )\n\n    select *\n    from sort_config\n    join dist_config using (schemaname, tablename)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.4167807, "supported_languages": null}, "macro.redshift.unload_table": {"name": "unload_table", "resource_type": "macro", "package_name": "redshift", "path": "macros/unload.sql", "original_file_path": "macros/unload.sql", "unique_id": "macro.redshift.unload_table", "macro_sql": "{% macro unload_table(schema,\n                table,\n                s3_path,\n                iam_role=None,\n                aws_key=None,\n                aws_secret=None,\n                aws_region=None,\n                aws_token=None,\n                manifest=False,\n                header=False,\n                format=None,\n                delimiter=\",\",\n                null_as=\"\",\n                max_file_size='6 GB',\n                escape=True,\n                compression=None,\n                add_quotes=False,\n                encrypted=False,\n                overwrite=False,\n                cleanpath=False,\n                parallel=False,\n                partition_by=None,\n                extension=None\n                ) %}\n\n  -- compile UNLOAD statement\n  UNLOAD ('SELECT * FROM \"{{ schema }}\".\"{{ table }}\"')\n  TO '{{ s3_path }}'\n  {% if iam_role %}\n  IAM_ROLE '{{ iam_role }}'\n  {% elif aws_key and aws_secret %}\n  ACCESS_KEY_ID '{{ aws_key }}'\n  SECRET_ACCESS_KEY '{{ aws_secret }}'\n  {% if aws_token %}\n    SESSION_TOKEN '{{ aws_token }}'\n  {% endif %}\n  {% else %}\n  -- Raise an error if authorization args are not present\n  {{ exceptions.raise_compiler_error(\"You must provide AWS authorization parameters via 'iam_role' or 'aws_key' and 'aws_secret'.\") }}\n  {% endif %}\n  {% if manifest %}\n  MANIFEST VERBOSE\n  {% endif %}\n  {% if header %}\n  HEADER\n  {% endif %}\n  {% if format %}\n  FORMAT AS {{format|upper}}\n  {% endif %}\n  {% if not format %}\n  DELIMITER AS '{{ delimiter }}'\n  {% endif %}\n  NULL AS '{{ null_as }}'\n  MAXFILESIZE AS {{ max_file_size }}\n  {% if escape %}\n  ESCAPE\n  {% endif %}\n  {% if compression %}\n  {{ compression|upper }}\n  {% endif %}\n  {% if add_quotes %}\n  ADDQUOTES\n  {% endif %}\n  {% if encrypted %}\n  ENCRYPTED\n  {% endif %}\n  {% if overwrite %}\n  ALLOWOVERWRITE\n  {% endif %}\n  {% if cleanpath %}\n  CLEANPATH\n  {% endif %}  \n  {% if not parallel %}\n  PARALLEL OFF\n  {% endif %}\n  {% if aws_region %}\n  REGION '{{ aws_region }}'\n  {% endif %}\n  {% if partition_by %}\n  PARTITION BY ( {{ partition_by | join(', ') }} )\n  {% endif %}\n  {% if extension %}\n  EXTENSION '{{ extension }}'\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.4220204, "supported_languages": null}, "macro.redshift.build_ddl_sql": {"name": "build_ddl_sql", "resource_type": "macro", "package_name": "redshift", "path": "macros/ddl.sql", "original_file_path": "macros/ddl.sql", "unique_id": "macro.redshift.build_ddl_sql", "macro_sql": "{% macro build_ddl_sql(def) %}\n\n    -- DROP\n    drop table if exists \"{{ def['schema'] }}\".\"{{ def['name'] }}\";\n    -- CREATE\n    create table \"{{ def['schema'] }}\".\"{{ def['name'] }}\" (\n        -- COLUMNS\n        {% for column in def['columns'].values() | sort(attribute='position') -%}\n            \"{{ column['name'] }}\" {{ column['type'] }}\n            {%- if column['encoding'] is not none %} encode {{ column['encoding'] }} {% endif -%}\n            {%- if column['default'] is not none %} default {{ column['default'] }} {% endif -%}\n            {%- if column['not_null'] %} not null {% endif -%}\n            {%- if not loop.last %}, {% endif %}\n        {% endfor %}\n\n        -- CONSTRAINTS\n        {% for constraint in def['constraints'] -%}\n            , {{ constraint['col_constraint'] }}\n        {% endfor %}\n    )\n\n    --KEYS\n    {% if def['keys'] %}\n        {% set dist_style = def['keys']['dist_style'] %}\n        {% set dist_key = def['keys']['dist_key'] %}\n        -- DIST\n        {% if dist_style %} diststyle {{ dist_style }} {% endif %}\n        {% if dist_key %} distkey(\"{{ dist_key }}\") {% endif %}\n\n        -- SORT\n        {% set sort_style = def['keys']['sort_style'] %}\n        {% set sort_keys = def['keys']['sort_keys'] %}\n        {% set sort_keys_s = sort_keys | join('\", \"') %}\n        {% if sort_keys %} {{ sort_style }} sortkey(\"{{ sort_keys_s }}\") {% endif %}\n    {% endif %}\n    ;\n\n    -- TABLE COMMENT\n    {% if def['description'] %}\n        comment on table \"{{ def['schema'] }}\".\"{{ def['name'] }}\" is '{{ def[\"description\"] }}';\n    {% endif %}\n\n    -- COLUMN COMMENTS\n    {% for column in def['columns'].values() -%}\n        {%- if column['description'] -%}\n            comment on column \"{{ def['schema'] }}\".\"{{ def['name'] }}\".\"{{ column['name'] }}\" is '{{ column[\"description\"] }}';\n\n        {% endif -%}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705873845.4272535, "supported_languages": null}}, "docs": {"doc.cdo_analytics.dim_school_status_status": {"name": "dim_school_status_status", "resource_type": "doc", "package_name": "cdo_analytics", "path": "marts/marts_docs.md", "original_file_path": "models/marts/marts_docs.md", "unique_id": "doc.cdo_analytics.dim_school_status_status", "block_contents": "### Active status of a school in a given school year. Can be one of the following: \n- Market- The school is not currently active and has never been active.\n- Inactive Churn- The school is not currently active, was not active in the previous year, but has been active in the past.\n- Inactive This Year- The school is not currently active but was active in the previous year.\n- Active New- The school is currently active, was not active in the previous year, and has never been active before.\n- Active Reacquired- The school is currently active, was not active in the previous year, but has been active in some previous years.\n- Active Retained- The school is currently active and has been active in the previous year."}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.cdo_analytics.stg_dashboard_pii__regional_partners": ["model.cdo_analytics.base_dashboard_pii__regional_partners"], "model.cdo_analytics.stg_dashboard_pii__users": ["model.cdo_analytics.base_dashboard_pii__users"], "model.cdo_analytics.stg_dashboard_pii__pd_international_opt_ins": ["model.cdo_analytics.base_dashboard_pii__pd_international_opt_ins"], "model.cdo_analytics.stg_dashboard_pii__pd_enrollments": ["model.cdo_analytics.base_dashboard_pii__pd_enrollments"], "model.cdo_analytics.stg_dashboard_pii__pd_sessions": ["model.cdo_analytics.base_dashboard_pii__pd_sessions"], "model.cdo_analytics.stg_dashboard_pii__pd_workshop_facilitators": ["model.cdo_analytics.base_dashboard_pii__pd_workshops_facilitators"], "model.cdo_analytics.stg_dashboard_pii__user_school_infos": ["model.cdo_analytics.base_dashboard_pii__user_school_infos"], "model.cdo_analytics.stg_dashboard_pii__pd_workshops": ["model.cdo_analytics.base_dashboard_pii__pd_workshops"], "model.cdo_analytics.stg_dashboard_pii__pd_attendances": ["model.cdo_analytics.base_dashboard_pii__pd_attendances"], "model.cdo_analytics.stg_dashboard_pii__pd_regional_partner_mappings": ["model.cdo_analytics.base_dashboard_pii__pd_regional_partner_mappings"], "model.cdo_analytics.stg_dashboard_pii__pd_applications": ["model.cdo_analytics.base_dashboard_pii__pd_applications"], "model.cdo_analytics.base_dashboard_pii__pd_workshop_surveys": ["source.cdo_analytics.dashboard_pii.pd_workshop_surveys"], "model.cdo_analytics.base_dashboard_pii__teacher_feedbacks": ["source.cdo_analytics.dashboard_pii.teacher_feedbacks"], "model.cdo_analytics.base_dashboard_pii__users": ["source.cdo_analytics.dashboard_pii.users"], "model.cdo_analytics.base_dashboard_pii__pd_teacher_applications": ["source.cdo_analytics.dashboard_pii.pd_teacher_applications"], "model.cdo_analytics.base_dashboard_pii__pd_regional_partner_mappings": ["source.cdo_analytics.dashboard_pii.pd_regional_partner_mappings"], "model.cdo_analytics.base_dashboard_pii__pd_attendances": ["source.cdo_analytics.dashboard_pii.pd_attendances"], "model.cdo_analytics.base_dashboard_pii__pd_scholarship_infos": ["source.cdo_analytics.dashboard_pii.pd_scholarship_infos"], "model.cdo_analytics.base_dashboard_pii__foorm_forms": ["source.cdo_analytics.dashboard_pii.foorm_forms"], "model.cdo_analytics.base_dashboard_pii__user_school_infos": ["source.cdo_analytics.dashboard_pii.user_school_infos"], "model.cdo_analytics.base_dashboard_pii__peer_reviews": ["source.cdo_analytics.dashboard_pii.peer_reviews"], "model.cdo_analytics.base_dashboard_pii__pd_teachercon1819_registrations": ["source.cdo_analytics.dashboard_pii.pd_teachercon1819_registrations"], "model.cdo_analytics.base_dashboard_pii__pd_teachercon_surveys": ["source.cdo_analytics.dashboard_pii.pd_teachercon_surveys"], "model.cdo_analytics.base_dashboard_pii__foorm_submissions": ["source.cdo_analytics.dashboard_pii.foorm_submissions"], "model.cdo_analytics.base_dashboard_pii__foorm_libraries": ["source.cdo_analytics.dashboard_pii.foorm_libraries"], "model.cdo_analytics.base_dashboard_pii__foorm_simple_survey_forms": ["source.cdo_analytics.dashboard_pii.foorm_simple_survey_forms"], "model.cdo_analytics.base_dashboard_pii__regional_partners": ["source.cdo_analytics.dashboard_pii.regional_partners"], "model.cdo_analytics.base_dashboard_pii__pd_misc_surveys": ["source.cdo_analytics.dashboard_pii.pd_misc_surveys"], "model.cdo_analytics.base_dashboard_pii__pd_survey_questions": ["source.cdo_analytics.dashboard_pii.pd_survey_questions"], "model.cdo_analytics.base_dashboard_pii__foorm_simple_survey_submissions": ["source.cdo_analytics.dashboard_pii.foorm_simple_survey_submissions"], "model.cdo_analytics.base_dashboard_pii__pd_international_opt_ins": ["source.cdo_analytics.dashboard_pii.pd_international_opt_ins"], "model.cdo_analytics.base_dashboard_pii__pd_workshops": ["source.cdo_analytics.dashboard_pii.pd_workshops"], "model.cdo_analytics.base_dashboard_pii__pd_workshop_facilitator_daily_surveys": ["source.cdo_analytics.dashboard_pii.pd_workshop_facilitator_daily_surveys"], "model.cdo_analytics.base_dashboard_pii__pd_workshops_facilitators": ["source.cdo_analytics.dashboard_pii.pd_workshops_facilitators"], "model.cdo_analytics.base_dashboard_pii__pd_workshop_survey_foorm_submissions": ["source.cdo_analytics.dashboard_pii.pd_workshop_survey_foorm_submissions"], "model.cdo_analytics.base_dashboard_pii__pd_workshop_daily_surveys": ["source.cdo_analytics.dashboard_pii.pd_workshop_daily_surveys"], "model.cdo_analytics.base_dashboard_pii__pd_pre_workshop_surveys": ["source.cdo_analytics.dashboard_pii.pd_pre_workshop_surveys"], "model.cdo_analytics.base_dashboard_pii__pd_regional_partner_program_registrations": ["source.cdo_analytics.dashboard_pii.pd_regional_partner_program_registrations"], "model.cdo_analytics.base_dashboard_pii__pd_regional_partner_contacts": ["source.cdo_analytics.dashboard_pii.pd_regional_partner_contacts"], "model.cdo_analytics.base_dashboard_pii__pd_applications": ["source.cdo_analytics.dashboard_pii.pd_applications"], "model.cdo_analytics.base_dashboard_pii__projects": ["source.cdo_analytics.dashboard_pii.projects"], "model.cdo_analytics.base_dashboard_pii__pd_enrollments": ["source.cdo_analytics.dashboard_pii.pd_enrollments"], "model.cdo_analytics.base_dashboard_pii__pd_sessions": ["source.cdo_analytics.dashboard_pii.pd_sessions"], "model.cdo_analytics.base_dashboard_pii__pd_post_course_surveys": ["source.cdo_analytics.dashboard_pii.pd_post_course_surveys"], "model.cdo_analytics.base_dashboard_pii__foorm_library_questions": ["source.cdo_analytics.dashboard_pii.foorm_library_questions"], "model.cdo_analytics.base_dashboard_pii__pd_regional_partner_mini_contacts": ["source.cdo_analytics.dashboard_pii.pd_regional_partner_mini_contacts"], "model.cdo_analytics.stg_pegasus_pii__hoc_activity": ["model.cdo_analytics.base_pegasus_pii__hoc_activity"], "model.cdo_analytics.stg_pegasus_pii__form_geos": ["model.cdo_analytics.base_pegasus_pii__form_geos"], "model.cdo_analytics.stg_pegasus_pii__forms": ["model.cdo_analytics.base_pegasus_pii__forms"], "model.cdo_analytics.base_pegasus_pii__form_geos": ["source.cdo_analytics.pegasus_pii.form_geos"], "model.cdo_analytics.base_pegasus_pii__forms": ["source.cdo_analytics.pegasus_pii.forms"], "model.cdo_analytics.base_pegasus_pii__hoc_activity": ["source.cdo_analytics.pegasus_pii.hoc_activity"], "model.cdo_analytics.stg_legacy_pii__international_partners": ["model.cdo_analytics.base_legacy_pii__international_partners"], "model.cdo_analytics.base_legacy_pii__international_partners": ["source.cdo_analytics.legacy_pii.seed_international_partners"], "model.cdo_analytics.stg_dashboard__scripts": ["model.cdo_analytics.base_dashboard__scripts"], "model.cdo_analytics.stg_dashboard__school_stats_by_years": ["model.cdo_analytics.base_dashboard__school_stats_by_years"], "model.cdo_analytics.stg_dashboard__sections": ["model.cdo_analytics.base_dashboard__sections"], "model.cdo_analytics.stg_dashboard__stages": ["model.cdo_analytics.base_dashboard__stages"], "model.cdo_analytics.stg_dashboard__school_infos": ["model.cdo_analytics.base_dashboard__school_infos"], "model.cdo_analytics.stg_dashboard__users": ["model.cdo_analytics.base_dashboard__users"], "model.cdo_analytics.stg_dashboard__followers": ["model.cdo_analytics.base_dashboard__followers"], "model.cdo_analytics.stg_dashboard__schools": ["model.cdo_analytics.base_dashboard__schools"], "model.cdo_analytics.stg_dashboard__user_levels": ["model.cdo_analytics.base_dashboard__user_levels"], "model.cdo_analytics.stg_dashboard__levels_script_levels": ["model.cdo_analytics.base_dashboard__levels_script_levels"], "model.cdo_analytics.stg_dashboard__unit_groups": ["model.cdo_analytics.base_dashboard__unit_groups"], "model.cdo_analytics.stg_dashboard__script_levels": ["model.cdo_analytics.base_dashboard__script_levels"], "model.cdo_analytics.stg_dashboard__levels": ["model.cdo_analytics.base_dashboard__levels"], "model.cdo_analytics.stg_dashboard__school_districts": ["model.cdo_analytics.base_dashboard__school_districts"], "model.cdo_analytics.stg_dashboard__user_geos": ["model.cdo_analytics.base_dashboard__user_geos"], "model.cdo_analytics.stg_dashboard__course_scripts": ["model.cdo_analytics.base_dashboard__course_scripts"], "model.cdo_analytics.base_dashboard__school_stats_by_years": ["source.cdo_analytics.dashboard.school_stats_by_years"], "model.cdo_analytics.base_dashboard__courses": ["source.cdo_analytics.dashboard.courses"], "model.cdo_analytics.base_dashboard__parent_levels_child_levels": ["source.cdo_analytics.dashboard.parent_levels_child_levels"], "model.cdo_analytics.base_dashboard__regional_partners_school_districts": ["source.cdo_analytics.dashboard.regional_partners_school_districts"], "model.cdo_analytics.base_dashboard__sign_ins": ["source.cdo_analytics.dashboard.sign_ins"], "model.cdo_analytics.base_dashboard__survey_results": ["source.cdo_analytics.dashboard.survey_results"], "model.cdo_analytics.base_dashboard__scripts": ["source.cdo_analytics.dashboard.scripts"], "model.cdo_analytics.base_dashboard__school_infos": ["source.cdo_analytics.dashboard.school_infos"], "model.cdo_analytics.base_dashboard__census_summaries": ["source.cdo_analytics.dashboard.census_summaries"], "model.cdo_analytics.base_dashboard__level_sources_multi_types": ["source.cdo_analytics.dashboard.level_sources_multi_types"], "model.cdo_analytics.base_dashboard__level_sources": ["source.cdo_analytics.dashboard.level_sources"], "model.cdo_analytics.base_dashboard__user_scripts": ["source.cdo_analytics.dashboard.user_scripts"], "model.cdo_analytics.base_dashboard__ap_school_codes": ["source.cdo_analytics.dashboard.ap_school_codes"], "model.cdo_analytics.base_dashboard__sections": ["source.cdo_analytics.dashboard.sections"], "model.cdo_analytics.base_dashboard__user_levels": ["source.cdo_analytics.dashboard.user_levels"], "model.cdo_analytics.base_dashboard__users": ["source.cdo_analytics.dashboard.users"], "model.cdo_analytics.base_dashboard__followers": ["source.cdo_analytics.dashboard.followers"], "model.cdo_analytics.base_dashboard__schools": ["source.cdo_analytics.dashboard.schools"], "model.cdo_analytics.base_dashboard__course_scripts": ["source.cdo_analytics.dashboard.course_scripts"], "model.cdo_analytics.base_dashboard__level_concept_difficulties": ["source.cdo_analytics.dashboard.level_concept_difficulties"], "model.cdo_analytics.base_dashboard__school_districts": ["source.cdo_analytics.dashboard.school_districts"], "model.cdo_analytics.base_dashboard__stages": ["source.cdo_analytics.dashboard.stages"], "model.cdo_analytics.base_dashboard__user_project_storage_ids": ["source.cdo_analytics.dashboard.user_project_storage_ids"], "model.cdo_analytics.base_dashboard__unit_groups": ["source.cdo_analytics.dashboard.unit_groups"], "model.cdo_analytics.base_dashboard__studio_people": ["source.cdo_analytics.dashboard.studio_people"], "model.cdo_analytics.base_dashboard__contained_levels": ["source.cdo_analytics.dashboard.contained_levels"], "model.cdo_analytics.base_dashboard__levels_script_levels": ["source.cdo_analytics.dashboard.levels_script_levels"], "model.cdo_analytics.base_dashboard__script_levels": ["source.cdo_analytics.dashboard.script_levels"], "model.cdo_analytics.base_dashboard__census_submissions": ["source.cdo_analytics.dashboard.census_submissions"], "model.cdo_analytics.base_dashboard__user_geos": ["source.cdo_analytics.dashboard.user_geos"], "model.cdo_analytics.base_dashboard__user_proficiencies": ["source.cdo_analytics.dashboard.user_proficiencies"], "model.cdo_analytics.base_dashboard__ap_cs_offerings": ["source.cdo_analytics.dashboard.ap_cs_offerings"], "model.cdo_analytics.base_dashboard__contained_level_answers": ["source.cdo_analytics.dashboard.contained_level_answers"], "model.cdo_analytics.base_dashboard__levels": ["source.cdo_analytics.dashboard.levels"], "model.cdo_analytics.int_school_weeks": ["seed.cdo_analytics.seed_school_years"], "model.cdo_analytics.int_school_years": ["seed.cdo_analytics.seed_school_years"], "model.cdo_analytics.int_user_levels": ["model.cdo_analytics.dim_students", "model.cdo_analytics.stg_dashboard__user_levels"], "model.cdo_analytics.int_active_sections": ["model.cdo_analytics.dim_student_courses", "model.cdo_analytics.int_section_mapping"], "model.cdo_analytics.int_section_mapping": ["model.cdo_analytics.dim_teachers", "model.cdo_analytics.int_school_years", "model.cdo_analytics.stg_dashboard__followers", "model.cdo_analytics.stg_dashboard__sections"], "model.cdo_analytics.int_teacher_schools_historical": ["model.cdo_analytics.int_school_years", "model.cdo_analytics.stg_dashboard__school_infos", "model.cdo_analytics.stg_dashboard_pii__user_school_infos"], "model.cdo_analytics.dim_user_stages": ["model.cdo_analytics.stg_dashboard__course_scripts", "model.cdo_analytics.stg_dashboard__levels", "model.cdo_analytics.stg_dashboard__levels_script_levels", "model.cdo_analytics.stg_dashboard__script_levels", "model.cdo_analytics.stg_dashboard__stages", "model.cdo_analytics.stg_dashboard__user_levels"], "model.cdo_analytics.dim_school_status": ["model.cdo_analytics.dim_schools", "model.cdo_analytics.int_active_sections", "model.cdo_analytics.int_school_years", "model.cdo_analytics.int_teacher_schools_historical"], "model.cdo_analytics.dim_school_districts": ["model.cdo_analytics.dim_schools", "model.cdo_analytics.stg_dashboard__school_districts"], "model.cdo_analytics.dim_school_stats_by_years": ["model.cdo_analytics.stg_dashboard__school_stats_by_years"], "model.cdo_analytics.dim_schools": ["model.cdo_analytics.stg_dashboard__school_districts", "model.cdo_analytics.stg_dashboard__school_stats_by_years", "model.cdo_analytics.stg_dashboard__schools"], "model.cdo_analytics.dim_districts": ["model.cdo_analytics.dim_schools", "model.cdo_analytics.stg_dashboard__school_districts"], "model.cdo_analytics.dim_district_status": ["model.cdo_analytics.dim_districts", "model.cdo_analytics.dim_schools", "model.cdo_analytics.int_active_sections", "model.cdo_analytics.int_school_years", "model.cdo_analytics.int_teacher_schools_historical"], "model.cdo_analytics.dim_students": ["model.cdo_analytics.int_school_years", "model.cdo_analytics.stg_dashboard__user_geos", "model.cdo_analytics.stg_dashboard__users"], "model.cdo_analytics.dim_student_status": ["model.cdo_analytics.dim_student_courses", "model.cdo_analytics.dim_students", "model.cdo_analytics.int_school_years"], "model.cdo_analytics.dim_student_courses": ["model.cdo_analytics.dim_course_structure", "model.cdo_analytics.int_school_years", "model.cdo_analytics.stg_dashboard__user_levels"], "model.cdo_analytics.dim_levels": ["model.cdo_analytics.stg_dashboard__levels"], "model.cdo_analytics.dim_script_names": ["seed.cdo_analytics.seed_script_names"], "model.cdo_analytics.dim_course_names": ["seed.cdo_analytics.seed_course_names"], "model.cdo_analytics.dim_course_structure": ["model.cdo_analytics.dim_course_names", "model.cdo_analytics.dim_script_names", "model.cdo_analytics.stg_dashboard__course_scripts", "model.cdo_analytics.stg_dashboard__levels", "model.cdo_analytics.stg_dashboard__levels_script_levels", "model.cdo_analytics.stg_dashboard__script_levels", "model.cdo_analytics.stg_dashboard__scripts", "model.cdo_analytics.stg_dashboard__stages", "model.cdo_analytics.stg_dashboard__unit_groups"], "model.cdo_analytics.fct_weekly_school_acquisition_metrics": ["model.cdo_analytics.dim_school_status", "model.cdo_analytics.dim_schools", "model.cdo_analytics.int_school_weeks"], "model.cdo_analytics.dim_teachers": ["model.cdo_analytics.int_school_years", "model.cdo_analytics.stg_dashboard__school_infos", "model.cdo_analytics.stg_dashboard__user_geos", "model.cdo_analytics.stg_dashboard__users", "model.cdo_analytics.stg_dashboard_pii__user_school_infos"], "model.cdo_analytics.dim_teacher_status": ["model.cdo_analytics.dim_teachers", "model.cdo_analytics.int_active_sections", "model.cdo_analytics.int_school_years"], "model.cdo_analytics.dim_forms": ["model.cdo_analytics.stg_pegasus_pii__form_geos", "model.cdo_analytics.stg_pegasus_pii__forms"], "seed.cdo_analytics.seed_school_years": [], "seed.cdo_analytics.seed_training_school_years": [], "seed.cdo_analytics.seed_csf_stages_for_completion": [], "seed.cdo_analytics.seed_course_names": [], "seed.cdo_analytics.seed_workshop_state_zip_manual": [], "seed.cdo_analytics.seed_state_abbreviations": [], "seed.cdo_analytics.seed_csf_plugged_stage_counts": [], "seed.cdo_analytics.seed_script_names": [], "model.redshift.redshift_admin_users_table_view_privileges": ["model.redshift.pg_tables", "model.redshift.pg_user", "model.redshift.pg_views"], "model.redshift.redshift_admin_users_schema_privileges": ["model.redshift.pg_tables", "model.redshift.pg_user", "model.redshift.pg_views"], "model.redshift.redshift_admin_dependencies": ["model.redshift.pg_class", "model.redshift.pg_depend", "model.redshift.pg_namespace"], "model.redshift.redshift_admin_queries": ["model.redshift.pg_user", "model.redshift.redshift_cost", "model.redshift.stl_query", "model.redshift.stl_wlm_query"], "model.redshift.redshift_admin_table_stats": ["model.redshift.pg_attribute", "model.redshift.pg_class", "model.redshift.pg_namespace", "model.redshift.stv_blocklist", "model.redshift.stv_partitions", "model.redshift.stv_tbl_perm", "model.redshift.svv_diskusage"], "model.redshift.stl_explain": [], "model.redshift.stl_wlm_query": [], "model.redshift.stv_tbl_perm": [], "model.redshift.pg_class": [], "model.redshift.stl_query": [], "model.redshift.stv_blocklist": [], "model.redshift.svv_diskusage": [], "model.redshift.pg_attribute": [], "model.redshift.pg_views": [], "model.redshift.pg_tables": [], "model.redshift.redshift_cost": ["model.redshift.stl_explain"], "model.redshift.pg_depend": [], "model.redshift.pg_namespace": [], "model.redshift.stv_partitions": [], "model.redshift.pg_user": [], "model.redshift.redshift_columns": [], "model.redshift.redshift_constraints": [], "model.redshift.redshift_sort_dist_keys": [], "model.redshift.redshift_tables": [], "test.cdo_analytics.unique_stg_dashboard__followers_follower_id.37c6c5ee61": ["model.cdo_analytics.stg_dashboard__followers"], "test.cdo_analytics.not_null_stg_dashboard__followers_follower_id.8675db9e61": ["model.cdo_analytics.stg_dashboard__followers"], "test.cdo_analytics.not_null_stg_dashboard__followers_student_id.d0d21c3ffe": ["model.cdo_analytics.stg_dashboard__followers"], "test.cdo_analytics.unique_stg_dashboard__user_levels_user_level_id.850f4f8bc6": ["model.cdo_analytics.stg_dashboard__user_levels"], "test.cdo_analytics.not_null_stg_dashboard__user_levels_user_level_id.1a9bb0d738": ["model.cdo_analytics.stg_dashboard__user_levels"], "test.cdo_analytics.not_null_stg_dashboard__sections_section_id.7d8448a05a": ["model.cdo_analytics.stg_dashboard__sections"], "test.cdo_analytics.unique_stg_dashboard__sections_section_id.55d1fb278a": ["model.cdo_analytics.stg_dashboard__sections"], "test.cdo_analytics.unique_stg_dashboard__schools_school_id.a9b6308569": ["model.cdo_analytics.stg_dashboard__schools"], "test.cdo_analytics.not_null_stg_dashboard__schools_school_id.dca2bd97dd": ["model.cdo_analytics.stg_dashboard__schools"], "test.cdo_analytics.not_null_stg_dashboard__school_stats_by_years_school_id.7dce256f1f": ["model.cdo_analytics.stg_dashboard__school_stats_by_years"], "test.cdo_analytics.dbt_utils_unique_combination_of_columns_stg_dashboard__school_stats_by_years_school_id__school_year.2ac6586976": ["model.cdo_analytics.stg_dashboard__school_stats_by_years"], "test.cdo_analytics.dbt_utils_unique_combination_of_columns_int_active_sections_teacher_id__school_year__course_name__section_id.df94559703": ["model.cdo_analytics.int_active_sections"], "test.cdo_analytics.dbt_utils_unique_combination_of_columns_int_section_mapping_student_id__school_year__section_id__teacher_id__school_id.1fd3b5f84d": ["model.cdo_analytics.int_section_mapping"], "test.cdo_analytics.dbt_utils_unique_combination_of_columns_int_user_levels_user_id__level_id__script_id.b41082019b": ["model.cdo_analytics.int_user_levels"], "test.cdo_analytics.dbt_utils_unique_combination_of_columns_int_school_weeks_school_year__iso_week__school_year_week.26450d8be2": ["model.cdo_analytics.int_school_weeks"], "test.cdo_analytics.dbt_utils_unique_combination_of_columns_dim_user_stages_user_id__course_id__script_id__stage_id.e3e2e91a12": ["model.cdo_analytics.dim_user_stages"], "test.cdo_analytics.not_null_dim_school_districs_school_district_id.9a516ad834": [], "test.cdo_analytics.unique_dim_school_districs_school_district_id.06c48c1d90": [], "test.cdo_analytics.dbt_utils_unique_combination_of_columns_dim_school_stats_by_years_school_year__school_id.572288f478": ["model.cdo_analytics.dim_school_stats_by_years"], "test.cdo_analytics.not_null_dim_schools_school_id.baadfc6c97": ["model.cdo_analytics.dim_schools"], "test.cdo_analytics.unique_dim_schools_school_id.50ab1b294e": ["model.cdo_analytics.dim_schools"], "test.cdo_analytics.not_null_dim_students_student_id.10ef5e35c7": ["model.cdo_analytics.dim_students"], "test.cdo_analytics.unique_dim_students_student_id.02754676d0": ["model.cdo_analytics.dim_students"], "test.cdo_analytics.unique_dim_levels_level_id.5eefad6abc": ["model.cdo_analytics.dim_levels"], "test.cdo_analytics.not_null_dim_levels_level_id.1f8c5dc9a7": ["model.cdo_analytics.dim_levels"], "test.cdo_analytics.unique_dim_script_names_versioned_script_id.139446433d": ["model.cdo_analytics.dim_script_names"], "test.cdo_analytics.not_null_dim_script_names_versioned_script_id.20b063a296": ["model.cdo_analytics.dim_script_names"], "test.cdo_analytics.not_null_dim_teachers_teacher_id.c414c8c807": ["model.cdo_analytics.dim_teachers"], "test.cdo_analytics.unique_dim_teachers_teacher_id.55db8b21ab": ["model.cdo_analytics.dim_teachers"], "test.cdo_analytics.dbt_utils_unique_combination_of_columns_dim_teacher_status_school_year__teacher_id.b0cc028c6b": ["model.cdo_analytics.dim_teacher_status"], "test.cdo_analytics.unique_dim_forms_form_id.3c980f09d6": ["model.cdo_analytics.dim_forms"], "test.cdo_analytics.not_null_dim_forms_form_id.51d004ca2c": ["model.cdo_analytics.dim_forms"], "source.cdo_analytics.dashboard_pii.foorm_forms": [], "source.cdo_analytics.dashboard_pii.foorm_libraries": [], "source.cdo_analytics.dashboard_pii.foorm_library_questions": [], "source.cdo_analytics.dashboard_pii.foorm_simple_survey_forms": [], "source.cdo_analytics.dashboard_pii.foorm_simple_survey_submissions": [], "source.cdo_analytics.dashboard_pii.foorm_submissions": [], "source.cdo_analytics.dashboard_pii.pd_applications": [], "source.cdo_analytics.dashboard_pii.pd_attendances": [], "source.cdo_analytics.dashboard_pii.pd_enrollments": [], "source.cdo_analytics.dashboard_pii.pd_international_opt_ins": [], "source.cdo_analytics.dashboard_pii.pd_misc_surveys": [], "source.cdo_analytics.dashboard_pii.pd_post_course_surveys": [], "source.cdo_analytics.dashboard_pii.pd_pre_workshop_surveys": [], "source.cdo_analytics.dashboard_pii.pd_regional_partner_contacts": [], "source.cdo_analytics.dashboard_pii.pd_regional_partner_mappings": [], "source.cdo_analytics.dashboard_pii.pd_regional_partner_mini_contacts": [], "source.cdo_analytics.dashboard_pii.pd_regional_partner_program_registrations": [], "source.cdo_analytics.dashboard_pii.pd_scholarship_infos": [], "source.cdo_analytics.dashboard_pii.pd_sessions": [], "source.cdo_analytics.dashboard_pii.pd_survey_questions": [], "source.cdo_analytics.dashboard_pii.pd_teacher_applications": [], "source.cdo_analytics.dashboard_pii.pd_teachercon_surveys": [], "source.cdo_analytics.dashboard_pii.pd_teachercon1819_registrations": [], "source.cdo_analytics.dashboard_pii.pd_workshop_daily_surveys": [], "source.cdo_analytics.dashboard_pii.pd_workshop_facilitator_daily_surveys": [], "source.cdo_analytics.dashboard_pii.pd_workshop_survey_foorm_submissions": [], "source.cdo_analytics.dashboard_pii.pd_workshop_surveys": [], "source.cdo_analytics.dashboard_pii.pd_workshops_facilitators": [], "source.cdo_analytics.dashboard_pii.pd_workshops": [], "source.cdo_analytics.dashboard_pii.peer_reviews": [], "source.cdo_analytics.dashboard_pii.projects": [], "source.cdo_analytics.dashboard_pii.regional_partners": [], "source.cdo_analytics.dashboard_pii.teacher_feedbacks": [], "source.cdo_analytics.dashboard_pii.unit_groups": [], "source.cdo_analytics.dashboard_pii.user_school_infos": [], "source.cdo_analytics.dashboard_pii.users": [], "source.cdo_analytics.pegasus_pii.forms": [], "source.cdo_analytics.pegasus_pii.form_geos": [], "source.cdo_analytics.pegasus_pii.hoc_activity": [], "source.cdo_analytics.legacy_pii.seed_international_partners": [], "source.cdo_analytics.dashboard.ap_cs_offerings": [], "source.cdo_analytics.dashboard.ap_school_codes": [], "source.cdo_analytics.dashboard.census_submissions": [], "source.cdo_analytics.dashboard.contained_level_answers": [], "source.cdo_analytics.dashboard.contained_levels": [], "source.cdo_analytics.dashboard.census_summaries": [], "source.cdo_analytics.dashboard.course_scripts": [], "source.cdo_analytics.dashboard.courses": [], "source.cdo_analytics.dashboard.followers": [], "source.cdo_analytics.dashboard.foorm_forms": [], "source.cdo_analytics.dashboard.foorm_libraries": [], "source.cdo_analytics.dashboard.foorm_library_questions": [], "source.cdo_analytics.dashboard.foorm_simple_survey_forms": [], "source.cdo_analytics.dashboard.foorm_simple_survey_submissions": [], "source.cdo_analytics.dashboard.foorm_submissions": [], "source.cdo_analytics.dashboard.level_concept_difficulties": [], "source.cdo_analytics.dashboard.level_sources": [], "source.cdo_analytics.dashboard.level_sources_multi_types": [], "source.cdo_analytics.dashboard.levels": [], "source.cdo_analytics.dashboard.levels_script_levels": [], "source.cdo_analytics.dashboard.parent_levels_child_levels": [], "source.cdo_analytics.dashboard.pd_applications": [], "source.cdo_analytics.dashboard.pd_attendances": [], "source.cdo_analytics.dashboard.pd_enrollments": [], "source.cdo_analytics.dashboard.pd_misc_surveys": [], "source.cdo_analytics.dashboard.pd_post_course_surveys": [], "source.cdo_analytics.dashboard.pd_pre_workshop_surveys": [], "source.cdo_analytics.dashboard.pd_regional_partner_contacts": [], "source.cdo_analytics.dashboard.pd_regional_partner_mappings": [], "source.cdo_analytics.dashboard.pd_regional_partner_mini_contacts": [], "source.cdo_analytics.dashboard.pd_regional_partner_program_registrations": [], "source.cdo_analytics.dashboard.pd_scholarship_infos": [], "source.cdo_analytics.dashboard.pd_sessions": [], "source.cdo_analytics.dashboard.pd_survey_questions": [], "source.cdo_analytics.dashboard.pd_teacher_applications": [], "source.cdo_analytics.dashboard.pd_teachercon_surveys": [], "source.cdo_analytics.dashboard.pd_teachercon1819_registrations": [], "source.cdo_analytics.dashboard.pd_workshop_daily_surveys": [], "source.cdo_analytics.dashboard.pd_workshop_facilitator_daily_surveys": [], "source.cdo_analytics.dashboard.pd_workshop_survey_foorm_submissions": [], "source.cdo_analytics.dashboard.pd_workshop_surveys": [], "source.cdo_analytics.dashboard.pd_workshops": [], "source.cdo_analytics.dashboard.pd_workshops_facilitators": [], "source.cdo_analytics.dashboard.peer_reviews": [], "source.cdo_analytics.dashboard.projects": [], "source.cdo_analytics.dashboard.regional_partners": [], "source.cdo_analytics.dashboard.regional_partners_school_districts": [], "source.cdo_analytics.dashboard.school_districts": [], "source.cdo_analytics.dashboard.school_infos": [], "source.cdo_analytics.dashboard.school_stats_by_years": [], "source.cdo_analytics.dashboard.schools": [], "source.cdo_analytics.dashboard.script_levels": [], "source.cdo_analytics.dashboard.scripts": [], "source.cdo_analytics.dashboard.sections": [], "source.cdo_analytics.dashboard.sign_ins": [], "source.cdo_analytics.dashboard.stages": [], "source.cdo_analytics.dashboard.studio_people": [], "source.cdo_analytics.dashboard.survey_results": [], "source.cdo_analytics.dashboard.teacher_feedbacks": [], "source.cdo_analytics.dashboard.unit_groups": [], "source.cdo_analytics.dashboard.user_proficiencies": [], "source.cdo_analytics.dashboard.user_geos": [], "source.cdo_analytics.dashboard.user_levels": [], "source.cdo_analytics.dashboard.user_project_storage_ids": [], "source.cdo_analytics.dashboard.user_scripts": [], "source.cdo_analytics.dashboard.users": []}, "child_map": {"model.cdo_analytics.stg_dashboard_pii__regional_partners": [], "model.cdo_analytics.stg_dashboard_pii__users": [], "model.cdo_analytics.stg_dashboard_pii__pd_international_opt_ins": [], "model.cdo_analytics.stg_dashboard_pii__pd_enrollments": [], "model.cdo_analytics.stg_dashboard_pii__pd_sessions": [], "model.cdo_analytics.stg_dashboard_pii__pd_workshop_facilitators": [], "model.cdo_analytics.stg_dashboard_pii__user_school_infos": ["model.cdo_analytics.dim_teachers", "model.cdo_analytics.int_teacher_schools_historical"], "model.cdo_analytics.stg_dashboard_pii__pd_workshops": [], "model.cdo_analytics.stg_dashboard_pii__pd_attendances": [], "model.cdo_analytics.stg_dashboard_pii__pd_regional_partner_mappings": [], "model.cdo_analytics.stg_dashboard_pii__pd_applications": [], "model.cdo_analytics.base_dashboard_pii__pd_workshop_surveys": [], "model.cdo_analytics.base_dashboard_pii__teacher_feedbacks": [], "model.cdo_analytics.base_dashboard_pii__users": ["model.cdo_analytics.stg_dashboard_pii__users"], "model.cdo_analytics.base_dashboard_pii__pd_teacher_applications": [], "model.cdo_analytics.base_dashboard_pii__pd_regional_partner_mappings": ["model.cdo_analytics.stg_dashboard_pii__pd_regional_partner_mappings"], "model.cdo_analytics.base_dashboard_pii__pd_attendances": ["model.cdo_analytics.stg_dashboard_pii__pd_attendances"], "model.cdo_analytics.base_dashboard_pii__pd_scholarship_infos": [], "model.cdo_analytics.base_dashboard_pii__foorm_forms": [], "model.cdo_analytics.base_dashboard_pii__user_school_infos": ["model.cdo_analytics.stg_dashboard_pii__user_school_infos"], "model.cdo_analytics.base_dashboard_pii__peer_reviews": [], "model.cdo_analytics.base_dashboard_pii__pd_teachercon1819_registrations": [], "model.cdo_analytics.base_dashboard_pii__pd_teachercon_surveys": [], "model.cdo_analytics.base_dashboard_pii__foorm_submissions": [], "model.cdo_analytics.base_dashboard_pii__foorm_libraries": [], "model.cdo_analytics.base_dashboard_pii__foorm_simple_survey_forms": [], "model.cdo_analytics.base_dashboard_pii__regional_partners": ["model.cdo_analytics.stg_dashboard_pii__regional_partners"], "model.cdo_analytics.base_dashboard_pii__pd_misc_surveys": [], "model.cdo_analytics.base_dashboard_pii__pd_survey_questions": [], "model.cdo_analytics.base_dashboard_pii__foorm_simple_survey_submissions": [], "model.cdo_analytics.base_dashboard_pii__pd_international_opt_ins": ["model.cdo_analytics.stg_dashboard_pii__pd_international_opt_ins"], "model.cdo_analytics.base_dashboard_pii__pd_workshops": ["model.cdo_analytics.stg_dashboard_pii__pd_workshops"], "model.cdo_analytics.base_dashboard_pii__pd_workshop_facilitator_daily_surveys": [], "model.cdo_analytics.base_dashboard_pii__pd_workshops_facilitators": ["model.cdo_analytics.stg_dashboard_pii__pd_workshop_facilitators"], "model.cdo_analytics.base_dashboard_pii__pd_workshop_survey_foorm_submissions": [], "model.cdo_analytics.base_dashboard_pii__pd_workshop_daily_surveys": [], "model.cdo_analytics.base_dashboard_pii__pd_pre_workshop_surveys": [], "model.cdo_analytics.base_dashboard_pii__pd_regional_partner_program_registrations": [], "model.cdo_analytics.base_dashboard_pii__pd_regional_partner_contacts": [], "model.cdo_analytics.base_dashboard_pii__pd_applications": ["model.cdo_analytics.stg_dashboard_pii__pd_applications"], "model.cdo_analytics.base_dashboard_pii__projects": [], "model.cdo_analytics.base_dashboard_pii__pd_enrollments": ["model.cdo_analytics.stg_dashboard_pii__pd_enrollments"], "model.cdo_analytics.base_dashboard_pii__pd_sessions": ["model.cdo_analytics.stg_dashboard_pii__pd_sessions"], "model.cdo_analytics.base_dashboard_pii__pd_post_course_surveys": [], "model.cdo_analytics.base_dashboard_pii__foorm_library_questions": [], "model.cdo_analytics.base_dashboard_pii__pd_regional_partner_mini_contacts": [], "model.cdo_analytics.stg_pegasus_pii__hoc_activity": [], "model.cdo_analytics.stg_pegasus_pii__form_geos": ["model.cdo_analytics.dim_forms"], "model.cdo_analytics.stg_pegasus_pii__forms": ["model.cdo_analytics.dim_forms"], "model.cdo_analytics.base_pegasus_pii__form_geos": ["model.cdo_analytics.stg_pegasus_pii__form_geos"], "model.cdo_analytics.base_pegasus_pii__forms": ["model.cdo_analytics.stg_pegasus_pii__forms"], "model.cdo_analytics.base_pegasus_pii__hoc_activity": ["model.cdo_analytics.stg_pegasus_pii__hoc_activity"], "model.cdo_analytics.stg_legacy_pii__international_partners": [], "model.cdo_analytics.base_legacy_pii__international_partners": ["model.cdo_analytics.stg_legacy_pii__international_partners"], "model.cdo_analytics.stg_dashboard__scripts": ["model.cdo_analytics.dim_course_structure"], "model.cdo_analytics.stg_dashboard__school_stats_by_years": ["model.cdo_analytics.dim_school_stats_by_years", "model.cdo_analytics.dim_schools", "test.cdo_analytics.dbt_utils_unique_combination_of_columns_stg_dashboard__school_stats_by_years_school_id__school_year.2ac6586976", "test.cdo_analytics.not_null_stg_dashboard__school_stats_by_years_school_id.7dce256f1f"], "model.cdo_analytics.stg_dashboard__sections": ["model.cdo_analytics.int_section_mapping", "test.cdo_analytics.not_null_stg_dashboard__sections_section_id.7d8448a05a", "test.cdo_analytics.unique_stg_dashboard__sections_section_id.55d1fb278a"], "model.cdo_analytics.stg_dashboard__stages": ["model.cdo_analytics.dim_course_structure", "model.cdo_analytics.dim_user_stages"], "model.cdo_analytics.stg_dashboard__school_infos": ["model.cdo_analytics.dim_teachers", "model.cdo_analytics.int_teacher_schools_historical"], "model.cdo_analytics.stg_dashboard__users": ["model.cdo_analytics.dim_students", "model.cdo_analytics.dim_teachers"], "model.cdo_analytics.stg_dashboard__followers": ["model.cdo_analytics.int_section_mapping", "test.cdo_analytics.not_null_stg_dashboard__followers_follower_id.8675db9e61", "test.cdo_analytics.not_null_stg_dashboard__followers_student_id.d0d21c3ffe", "test.cdo_analytics.unique_stg_dashboard__followers_follower_id.37c6c5ee61"], "model.cdo_analytics.stg_dashboard__schools": ["model.cdo_analytics.dim_schools", "test.cdo_analytics.not_null_stg_dashboard__schools_school_id.dca2bd97dd", "test.cdo_analytics.unique_stg_dashboard__schools_school_id.a9b6308569"], "model.cdo_analytics.stg_dashboard__user_levels": ["model.cdo_analytics.dim_student_courses", "model.cdo_analytics.dim_user_stages", "model.cdo_analytics.int_user_levels", "test.cdo_analytics.not_null_stg_dashboard__user_levels_user_level_id.1a9bb0d738", "test.cdo_analytics.unique_stg_dashboard__user_levels_user_level_id.850f4f8bc6"], "model.cdo_analytics.stg_dashboard__levels_script_levels": ["model.cdo_analytics.dim_course_structure", "model.cdo_analytics.dim_user_stages"], "model.cdo_analytics.stg_dashboard__unit_groups": ["model.cdo_analytics.dim_course_structure"], "model.cdo_analytics.stg_dashboard__script_levels": ["model.cdo_analytics.dim_course_structure", "model.cdo_analytics.dim_user_stages"], "model.cdo_analytics.stg_dashboard__levels": ["model.cdo_analytics.dim_course_structure", "model.cdo_analytics.dim_levels", "model.cdo_analytics.dim_user_stages"], "model.cdo_analytics.stg_dashboard__school_districts": ["model.cdo_analytics.dim_districts", "model.cdo_analytics.dim_school_districts", "model.cdo_analytics.dim_schools"], "model.cdo_analytics.stg_dashboard__user_geos": ["model.cdo_analytics.dim_students", "model.cdo_analytics.dim_teachers"], "model.cdo_analytics.stg_dashboard__course_scripts": ["model.cdo_analytics.dim_course_structure", "model.cdo_analytics.dim_user_stages"], "model.cdo_analytics.base_dashboard__school_stats_by_years": ["model.cdo_analytics.stg_dashboard__school_stats_by_years"], "model.cdo_analytics.base_dashboard__courses": [], "model.cdo_analytics.base_dashboard__parent_levels_child_levels": [], "model.cdo_analytics.base_dashboard__regional_partners_school_districts": [], "model.cdo_analytics.base_dashboard__sign_ins": [], "model.cdo_analytics.base_dashboard__survey_results": [], "model.cdo_analytics.base_dashboard__scripts": ["model.cdo_analytics.stg_dashboard__scripts"], "model.cdo_analytics.base_dashboard__school_infos": ["model.cdo_analytics.stg_dashboard__school_infos"], "model.cdo_analytics.base_dashboard__census_summaries": [], "model.cdo_analytics.base_dashboard__level_sources_multi_types": [], "model.cdo_analytics.base_dashboard__level_sources": [], "model.cdo_analytics.base_dashboard__user_scripts": [], "model.cdo_analytics.base_dashboard__ap_school_codes": [], "model.cdo_analytics.base_dashboard__sections": ["model.cdo_analytics.stg_dashboard__sections"], "model.cdo_analytics.base_dashboard__user_levels": ["model.cdo_analytics.stg_dashboard__user_levels"], "model.cdo_analytics.base_dashboard__users": ["model.cdo_analytics.stg_dashboard__users"], "model.cdo_analytics.base_dashboard__followers": ["model.cdo_analytics.stg_dashboard__followers"], "model.cdo_analytics.base_dashboard__schools": ["model.cdo_analytics.stg_dashboard__schools"], "model.cdo_analytics.base_dashboard__course_scripts": ["model.cdo_analytics.stg_dashboard__course_scripts"], "model.cdo_analytics.base_dashboard__level_concept_difficulties": [], "model.cdo_analytics.base_dashboard__school_districts": ["model.cdo_analytics.stg_dashboard__school_districts"], "model.cdo_analytics.base_dashboard__stages": ["model.cdo_analytics.stg_dashboard__stages"], "model.cdo_analytics.base_dashboard__user_project_storage_ids": [], "model.cdo_analytics.base_dashboard__unit_groups": ["model.cdo_analytics.stg_dashboard__unit_groups"], "model.cdo_analytics.base_dashboard__studio_people": [], "model.cdo_analytics.base_dashboard__contained_levels": [], "model.cdo_analytics.base_dashboard__levels_script_levels": ["model.cdo_analytics.stg_dashboard__levels_script_levels"], "model.cdo_analytics.base_dashboard__script_levels": ["model.cdo_analytics.stg_dashboard__script_levels"], "model.cdo_analytics.base_dashboard__census_submissions": [], "model.cdo_analytics.base_dashboard__user_geos": ["model.cdo_analytics.stg_dashboard__user_geos"], "model.cdo_analytics.base_dashboard__user_proficiencies": [], "model.cdo_analytics.base_dashboard__ap_cs_offerings": [], "model.cdo_analytics.base_dashboard__contained_level_answers": [], "model.cdo_analytics.base_dashboard__levels": ["model.cdo_analytics.stg_dashboard__levels"], "model.cdo_analytics.int_school_weeks": ["model.cdo_analytics.fct_weekly_school_acquisition_metrics", "test.cdo_analytics.dbt_utils_unique_combination_of_columns_int_school_weeks_school_year__iso_week__school_year_week.26450d8be2"], "model.cdo_analytics.int_school_years": ["model.cdo_analytics.dim_district_status", "model.cdo_analytics.dim_school_status", "model.cdo_analytics.dim_student_courses", "model.cdo_analytics.dim_student_status", "model.cdo_analytics.dim_students", "model.cdo_analytics.dim_teacher_status", "model.cdo_analytics.dim_teachers", "model.cdo_analytics.int_section_mapping", "model.cdo_analytics.int_teacher_schools_historical"], "model.cdo_analytics.int_user_levels": ["test.cdo_analytics.dbt_utils_unique_combination_of_columns_int_user_levels_user_id__level_id__script_id.b41082019b"], "model.cdo_analytics.int_active_sections": ["model.cdo_analytics.dim_district_status", "model.cdo_analytics.dim_school_status", "model.cdo_analytics.dim_teacher_status", "test.cdo_analytics.dbt_utils_unique_combination_of_columns_int_active_sections_teacher_id__school_year__course_name__section_id.df94559703"], "model.cdo_analytics.int_section_mapping": ["model.cdo_analytics.int_active_sections", "test.cdo_analytics.dbt_utils_unique_combination_of_columns_int_section_mapping_student_id__school_year__section_id__teacher_id__school_id.1fd3b5f84d"], "model.cdo_analytics.int_teacher_schools_historical": ["model.cdo_analytics.dim_district_status", "model.cdo_analytics.dim_school_status"], "model.cdo_analytics.dim_user_stages": ["test.cdo_analytics.dbt_utils_unique_combination_of_columns_dim_user_stages_user_id__course_id__script_id__stage_id.e3e2e91a12"], "model.cdo_analytics.dim_school_status": ["model.cdo_analytics.fct_weekly_school_acquisition_metrics"], "model.cdo_analytics.dim_school_districts": [], "model.cdo_analytics.dim_school_stats_by_years": ["test.cdo_analytics.dbt_utils_unique_combination_of_columns_dim_school_stats_by_years_school_year__school_id.572288f478"], "model.cdo_analytics.dim_schools": ["model.cdo_analytics.dim_district_status", "model.cdo_analytics.dim_districts", "model.cdo_analytics.dim_school_districts", "model.cdo_analytics.dim_school_status", "model.cdo_analytics.fct_weekly_school_acquisition_metrics", "test.cdo_analytics.not_null_dim_schools_school_id.baadfc6c97", "test.cdo_analytics.unique_dim_schools_school_id.50ab1b294e"], "model.cdo_analytics.dim_districts": ["model.cdo_analytics.dim_district_status"], "model.cdo_analytics.dim_district_status": [], "model.cdo_analytics.dim_students": ["model.cdo_analytics.dim_student_status", "model.cdo_analytics.int_user_levels", "test.cdo_analytics.not_null_dim_students_student_id.10ef5e35c7", "test.cdo_analytics.unique_dim_students_student_id.02754676d0"], "model.cdo_analytics.dim_student_status": [], "model.cdo_analytics.dim_student_courses": ["model.cdo_analytics.dim_student_status", "model.cdo_analytics.int_active_sections"], "model.cdo_analytics.dim_levels": ["test.cdo_analytics.not_null_dim_levels_level_id.1f8c5dc9a7", "test.cdo_analytics.unique_dim_levels_level_id.5eefad6abc"], "model.cdo_analytics.dim_script_names": ["model.cdo_analytics.dim_course_structure", "test.cdo_analytics.not_null_dim_script_names_versioned_script_id.20b063a296", "test.cdo_analytics.unique_dim_script_names_versioned_script_id.139446433d"], "model.cdo_analytics.dim_course_names": ["model.cdo_analytics.dim_course_structure"], "model.cdo_analytics.dim_course_structure": ["model.cdo_analytics.dim_student_courses"], "model.cdo_analytics.fct_weekly_school_acquisition_metrics": [], "model.cdo_analytics.dim_teachers": ["model.cdo_analytics.dim_teacher_status", "model.cdo_analytics.int_section_mapping", "test.cdo_analytics.not_null_dim_teachers_teacher_id.c414c8c807", "test.cdo_analytics.unique_dim_teachers_teacher_id.55db8b21ab"], "model.cdo_analytics.dim_teacher_status": ["test.cdo_analytics.dbt_utils_unique_combination_of_columns_dim_teacher_status_school_year__teacher_id.b0cc028c6b"], "model.cdo_analytics.dim_forms": ["test.cdo_analytics.not_null_dim_forms_form_id.51d004ca2c", "test.cdo_analytics.unique_dim_forms_form_id.3c980f09d6"], "seed.cdo_analytics.seed_school_years": ["model.cdo_analytics.int_school_weeks", "model.cdo_analytics.int_school_years"], "seed.cdo_analytics.seed_training_school_years": [], "seed.cdo_analytics.seed_csf_stages_for_completion": [], "seed.cdo_analytics.seed_course_names": ["model.cdo_analytics.dim_course_names"], "seed.cdo_analytics.seed_workshop_state_zip_manual": [], "seed.cdo_analytics.seed_state_abbreviations": [], "seed.cdo_analytics.seed_csf_plugged_stage_counts": [], "seed.cdo_analytics.seed_script_names": ["model.cdo_analytics.dim_script_names"], "model.redshift.redshift_admin_users_table_view_privileges": [], "model.redshift.redshift_admin_users_schema_privileges": [], "model.redshift.redshift_admin_dependencies": [], "model.redshift.redshift_admin_queries": [], "model.redshift.redshift_admin_table_stats": [], "model.redshift.stl_explain": ["model.redshift.redshift_cost"], "model.redshift.stl_wlm_query": ["model.redshift.redshift_admin_queries"], "model.redshift.stv_tbl_perm": ["model.redshift.redshift_admin_table_stats"], "model.redshift.pg_class": ["model.redshift.redshift_admin_dependencies", "model.redshift.redshift_admin_table_stats"], "model.redshift.stl_query": ["model.redshift.redshift_admin_queries"], "model.redshift.stv_blocklist": ["model.redshift.redshift_admin_table_stats"], "model.redshift.svv_diskusage": ["model.redshift.redshift_admin_table_stats"], "model.redshift.pg_attribute": ["model.redshift.redshift_admin_table_stats"], "model.redshift.pg_views": ["model.redshift.redshift_admin_users_schema_privileges", "model.redshift.redshift_admin_users_table_view_privileges"], "model.redshift.pg_tables": ["model.redshift.redshift_admin_users_schema_privileges", "model.redshift.redshift_admin_users_table_view_privileges"], "model.redshift.redshift_cost": ["model.redshift.redshift_admin_queries"], "model.redshift.pg_depend": ["model.redshift.redshift_admin_dependencies"], "model.redshift.pg_namespace": ["model.redshift.redshift_admin_dependencies", "model.redshift.redshift_admin_table_stats"], "model.redshift.stv_partitions": ["model.redshift.redshift_admin_table_stats"], "model.redshift.pg_user": ["model.redshift.redshift_admin_queries", "model.redshift.redshift_admin_users_schema_privileges", "model.redshift.redshift_admin_users_table_view_privileges"], "model.redshift.redshift_columns": [], "model.redshift.redshift_constraints": [], "model.redshift.redshift_sort_dist_keys": [], "model.redshift.redshift_tables": [], "test.cdo_analytics.unique_stg_dashboard__followers_follower_id.37c6c5ee61": [], "test.cdo_analytics.not_null_stg_dashboard__followers_follower_id.8675db9e61": [], "test.cdo_analytics.not_null_stg_dashboard__followers_student_id.d0d21c3ffe": [], "test.cdo_analytics.unique_stg_dashboard__user_levels_user_level_id.850f4f8bc6": [], "test.cdo_analytics.not_null_stg_dashboard__user_levels_user_level_id.1a9bb0d738": [], "test.cdo_analytics.not_null_stg_dashboard__sections_section_id.7d8448a05a": [], "test.cdo_analytics.unique_stg_dashboard__sections_section_id.55d1fb278a": [], "test.cdo_analytics.unique_stg_dashboard__schools_school_id.a9b6308569": [], "test.cdo_analytics.not_null_stg_dashboard__schools_school_id.dca2bd97dd": [], "test.cdo_analytics.not_null_stg_dashboard__school_stats_by_years_school_id.7dce256f1f": [], "test.cdo_analytics.dbt_utils_unique_combination_of_columns_stg_dashboard__school_stats_by_years_school_id__school_year.2ac6586976": [], "test.cdo_analytics.dbt_utils_unique_combination_of_columns_int_active_sections_teacher_id__school_year__course_name__section_id.df94559703": [], "test.cdo_analytics.dbt_utils_unique_combination_of_columns_int_section_mapping_student_id__school_year__section_id__teacher_id__school_id.1fd3b5f84d": [], "test.cdo_analytics.dbt_utils_unique_combination_of_columns_int_user_levels_user_id__level_id__script_id.b41082019b": [], "test.cdo_analytics.dbt_utils_unique_combination_of_columns_int_school_weeks_school_year__iso_week__school_year_week.26450d8be2": [], "test.cdo_analytics.dbt_utils_unique_combination_of_columns_dim_user_stages_user_id__course_id__script_id__stage_id.e3e2e91a12": [], "test.cdo_analytics.not_null_dim_school_districs_school_district_id.9a516ad834": [], "test.cdo_analytics.unique_dim_school_districs_school_district_id.06c48c1d90": [], "test.cdo_analytics.dbt_utils_unique_combination_of_columns_dim_school_stats_by_years_school_year__school_id.572288f478": [], "test.cdo_analytics.not_null_dim_schools_school_id.baadfc6c97": [], "test.cdo_analytics.unique_dim_schools_school_id.50ab1b294e": [], "test.cdo_analytics.not_null_dim_students_student_id.10ef5e35c7": [], "test.cdo_analytics.unique_dim_students_student_id.02754676d0": [], "test.cdo_analytics.unique_dim_levels_level_id.5eefad6abc": [], "test.cdo_analytics.not_null_dim_levels_level_id.1f8c5dc9a7": [], "test.cdo_analytics.unique_dim_script_names_versioned_script_id.139446433d": [], "test.cdo_analytics.not_null_dim_script_names_versioned_script_id.20b063a296": [], "test.cdo_analytics.not_null_dim_teachers_teacher_id.c414c8c807": [], "test.cdo_analytics.unique_dim_teachers_teacher_id.55db8b21ab": [], "test.cdo_analytics.dbt_utils_unique_combination_of_columns_dim_teacher_status_school_year__teacher_id.b0cc028c6b": [], "test.cdo_analytics.unique_dim_forms_form_id.3c980f09d6": [], "test.cdo_analytics.not_null_dim_forms_form_id.51d004ca2c": [], "source.cdo_analytics.dashboard_pii.foorm_forms": ["model.cdo_analytics.base_dashboard_pii__foorm_forms"], "source.cdo_analytics.dashboard_pii.foorm_libraries": ["model.cdo_analytics.base_dashboard_pii__foorm_libraries"], "source.cdo_analytics.dashboard_pii.foorm_library_questions": ["model.cdo_analytics.base_dashboard_pii__foorm_library_questions"], "source.cdo_analytics.dashboard_pii.foorm_simple_survey_forms": ["model.cdo_analytics.base_dashboard_pii__foorm_simple_survey_forms"], "source.cdo_analytics.dashboard_pii.foorm_simple_survey_submissions": ["model.cdo_analytics.base_dashboard_pii__foorm_simple_survey_submissions"], "source.cdo_analytics.dashboard_pii.foorm_submissions": ["model.cdo_analytics.base_dashboard_pii__foorm_submissions"], "source.cdo_analytics.dashboard_pii.pd_applications": ["model.cdo_analytics.base_dashboard_pii__pd_applications"], "source.cdo_analytics.dashboard_pii.pd_attendances": ["model.cdo_analytics.base_dashboard_pii__pd_attendances"], "source.cdo_analytics.dashboard_pii.pd_enrollments": ["model.cdo_analytics.base_dashboard_pii__pd_enrollments"], "source.cdo_analytics.dashboard_pii.pd_international_opt_ins": ["model.cdo_analytics.base_dashboard_pii__pd_international_opt_ins"], "source.cdo_analytics.dashboard_pii.pd_misc_surveys": ["model.cdo_analytics.base_dashboard_pii__pd_misc_surveys"], "source.cdo_analytics.dashboard_pii.pd_post_course_surveys": ["model.cdo_analytics.base_dashboard_pii__pd_post_course_surveys"], "source.cdo_analytics.dashboard_pii.pd_pre_workshop_surveys": ["model.cdo_analytics.base_dashboard_pii__pd_pre_workshop_surveys"], "source.cdo_analytics.dashboard_pii.pd_regional_partner_contacts": ["model.cdo_analytics.base_dashboard_pii__pd_regional_partner_contacts"], "source.cdo_analytics.dashboard_pii.pd_regional_partner_mappings": ["model.cdo_analytics.base_dashboard_pii__pd_regional_partner_mappings"], "source.cdo_analytics.dashboard_pii.pd_regional_partner_mini_contacts": ["model.cdo_analytics.base_dashboard_pii__pd_regional_partner_mini_contacts"], "source.cdo_analytics.dashboard_pii.pd_regional_partner_program_registrations": ["model.cdo_analytics.base_dashboard_pii__pd_regional_partner_program_registrations"], "source.cdo_analytics.dashboard_pii.pd_scholarship_infos": ["model.cdo_analytics.base_dashboard_pii__pd_scholarship_infos"], "source.cdo_analytics.dashboard_pii.pd_sessions": ["model.cdo_analytics.base_dashboard_pii__pd_sessions"], "source.cdo_analytics.dashboard_pii.pd_survey_questions": ["model.cdo_analytics.base_dashboard_pii__pd_survey_questions"], "source.cdo_analytics.dashboard_pii.pd_teacher_applications": ["model.cdo_analytics.base_dashboard_pii__pd_teacher_applications"], "source.cdo_analytics.dashboard_pii.pd_teachercon_surveys": ["model.cdo_analytics.base_dashboard_pii__pd_teachercon_surveys"], "source.cdo_analytics.dashboard_pii.pd_teachercon1819_registrations": ["model.cdo_analytics.base_dashboard_pii__pd_teachercon1819_registrations"], "source.cdo_analytics.dashboard_pii.pd_workshop_daily_surveys": ["model.cdo_analytics.base_dashboard_pii__pd_workshop_daily_surveys"], "source.cdo_analytics.dashboard_pii.pd_workshop_facilitator_daily_surveys": ["model.cdo_analytics.base_dashboard_pii__pd_workshop_facilitator_daily_surveys"], "source.cdo_analytics.dashboard_pii.pd_workshop_survey_foorm_submissions": ["model.cdo_analytics.base_dashboard_pii__pd_workshop_survey_foorm_submissions"], "source.cdo_analytics.dashboard_pii.pd_workshop_surveys": ["model.cdo_analytics.base_dashboard_pii__pd_workshop_surveys"], "source.cdo_analytics.dashboard_pii.pd_workshops_facilitators": ["model.cdo_analytics.base_dashboard_pii__pd_workshops_facilitators"], "source.cdo_analytics.dashboard_pii.pd_workshops": ["model.cdo_analytics.base_dashboard_pii__pd_workshops"], "source.cdo_analytics.dashboard_pii.peer_reviews": ["model.cdo_analytics.base_dashboard_pii__peer_reviews"], "source.cdo_analytics.dashboard_pii.projects": ["model.cdo_analytics.base_dashboard_pii__projects"], "source.cdo_analytics.dashboard_pii.regional_partners": ["model.cdo_analytics.base_dashboard_pii__regional_partners"], "source.cdo_analytics.dashboard_pii.teacher_feedbacks": ["model.cdo_analytics.base_dashboard_pii__teacher_feedbacks"], "source.cdo_analytics.dashboard_pii.unit_groups": [], "source.cdo_analytics.dashboard_pii.user_school_infos": ["model.cdo_analytics.base_dashboard_pii__user_school_infos"], "source.cdo_analytics.dashboard_pii.users": ["model.cdo_analytics.base_dashboard_pii__users"], "source.cdo_analytics.pegasus_pii.forms": ["model.cdo_analytics.base_pegasus_pii__forms"], "source.cdo_analytics.pegasus_pii.form_geos": ["model.cdo_analytics.base_pegasus_pii__form_geos"], "source.cdo_analytics.pegasus_pii.hoc_activity": ["model.cdo_analytics.base_pegasus_pii__hoc_activity"], "source.cdo_analytics.legacy_pii.seed_international_partners": ["model.cdo_analytics.base_legacy_pii__international_partners"], "source.cdo_analytics.dashboard.ap_cs_offerings": ["model.cdo_analytics.base_dashboard__ap_cs_offerings"], "source.cdo_analytics.dashboard.ap_school_codes": ["model.cdo_analytics.base_dashboard__ap_school_codes"], "source.cdo_analytics.dashboard.census_submissions": ["model.cdo_analytics.base_dashboard__census_submissions"], "source.cdo_analytics.dashboard.contained_level_answers": ["model.cdo_analytics.base_dashboard__contained_level_answers"], "source.cdo_analytics.dashboard.contained_levels": ["model.cdo_analytics.base_dashboard__contained_levels"], "source.cdo_analytics.dashboard.census_summaries": ["model.cdo_analytics.base_dashboard__census_summaries"], "source.cdo_analytics.dashboard.course_scripts": ["model.cdo_analytics.base_dashboard__course_scripts"], "source.cdo_analytics.dashboard.courses": ["model.cdo_analytics.base_dashboard__courses"], "source.cdo_analytics.dashboard.followers": ["model.cdo_analytics.base_dashboard__followers"], "source.cdo_analytics.dashboard.foorm_forms": [], "source.cdo_analytics.dashboard.foorm_libraries": [], "source.cdo_analytics.dashboard.foorm_library_questions": [], "source.cdo_analytics.dashboard.foorm_simple_survey_forms": [], "source.cdo_analytics.dashboard.foorm_simple_survey_submissions": [], "source.cdo_analytics.dashboard.foorm_submissions": [], "source.cdo_analytics.dashboard.level_concept_difficulties": ["model.cdo_analytics.base_dashboard__level_concept_difficulties"], "source.cdo_analytics.dashboard.level_sources": ["model.cdo_analytics.base_dashboard__level_sources"], "source.cdo_analytics.dashboard.level_sources_multi_types": ["model.cdo_analytics.base_dashboard__level_sources_multi_types"], "source.cdo_analytics.dashboard.levels": ["model.cdo_analytics.base_dashboard__levels"], "source.cdo_analytics.dashboard.levels_script_levels": ["model.cdo_analytics.base_dashboard__levels_script_levels"], "source.cdo_analytics.dashboard.parent_levels_child_levels": ["model.cdo_analytics.base_dashboard__parent_levels_child_levels"], "source.cdo_analytics.dashboard.pd_applications": [], "source.cdo_analytics.dashboard.pd_attendances": [], "source.cdo_analytics.dashboard.pd_enrollments": [], "source.cdo_analytics.dashboard.pd_misc_surveys": [], "source.cdo_analytics.dashboard.pd_post_course_surveys": [], "source.cdo_analytics.dashboard.pd_pre_workshop_surveys": [], "source.cdo_analytics.dashboard.pd_regional_partner_contacts": [], "source.cdo_analytics.dashboard.pd_regional_partner_mappings": [], "source.cdo_analytics.dashboard.pd_regional_partner_mini_contacts": [], "source.cdo_analytics.dashboard.pd_regional_partner_program_registrations": [], "source.cdo_analytics.dashboard.pd_scholarship_infos": [], "source.cdo_analytics.dashboard.pd_sessions": [], "source.cdo_analytics.dashboard.pd_survey_questions": [], "source.cdo_analytics.dashboard.pd_teacher_applications": [], "source.cdo_analytics.dashboard.pd_teachercon_surveys": [], "source.cdo_analytics.dashboard.pd_teachercon1819_registrations": [], "source.cdo_analytics.dashboard.pd_workshop_daily_surveys": [], "source.cdo_analytics.dashboard.pd_workshop_facilitator_daily_surveys": [], "source.cdo_analytics.dashboard.pd_workshop_survey_foorm_submissions": [], "source.cdo_analytics.dashboard.pd_workshop_surveys": [], "source.cdo_analytics.dashboard.pd_workshops": [], "source.cdo_analytics.dashboard.pd_workshops_facilitators": [], "source.cdo_analytics.dashboard.peer_reviews": [], "source.cdo_analytics.dashboard.projects": [], "source.cdo_analytics.dashboard.regional_partners": [], "source.cdo_analytics.dashboard.regional_partners_school_districts": ["model.cdo_analytics.base_dashboard__regional_partners_school_districts"], "source.cdo_analytics.dashboard.school_districts": ["model.cdo_analytics.base_dashboard__school_districts"], "source.cdo_analytics.dashboard.school_infos": ["model.cdo_analytics.base_dashboard__school_infos"], "source.cdo_analytics.dashboard.school_stats_by_years": ["model.cdo_analytics.base_dashboard__school_stats_by_years"], "source.cdo_analytics.dashboard.schools": ["model.cdo_analytics.base_dashboard__schools"], "source.cdo_analytics.dashboard.script_levels": ["model.cdo_analytics.base_dashboard__script_levels"], "source.cdo_analytics.dashboard.scripts": ["model.cdo_analytics.base_dashboard__scripts"], "source.cdo_analytics.dashboard.sections": ["model.cdo_analytics.base_dashboard__sections"], "source.cdo_analytics.dashboard.sign_ins": ["model.cdo_analytics.base_dashboard__sign_ins"], "source.cdo_analytics.dashboard.stages": ["model.cdo_analytics.base_dashboard__stages"], "source.cdo_analytics.dashboard.studio_people": ["model.cdo_analytics.base_dashboard__studio_people"], "source.cdo_analytics.dashboard.survey_results": ["model.cdo_analytics.base_dashboard__survey_results"], "source.cdo_analytics.dashboard.teacher_feedbacks": [], "source.cdo_analytics.dashboard.unit_groups": ["model.cdo_analytics.base_dashboard__unit_groups"], "source.cdo_analytics.dashboard.user_proficiencies": ["model.cdo_analytics.base_dashboard__user_proficiencies"], "source.cdo_analytics.dashboard.user_geos": ["model.cdo_analytics.base_dashboard__user_geos"], "source.cdo_analytics.dashboard.user_levels": ["model.cdo_analytics.base_dashboard__user_levels"], "source.cdo_analytics.dashboard.user_project_storage_ids": ["model.cdo_analytics.base_dashboard__user_project_storage_ids"], "source.cdo_analytics.dashboard.user_scripts": ["model.cdo_analytics.base_dashboard__user_scripts"], "source.cdo_analytics.dashboard.users": ["model.cdo_analytics.base_dashboard__users"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}}